
remote_gate_opener.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008358  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d0  080084f8  080084f8  000094f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080089c8  080089c8  0000a078  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080089c8  080089c8  000099c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080089d0  080089d0  0000a078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080089d0  080089d0  000099d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080089d4  080089d4  000099d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  080089d8  0000a000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b2c  20000078  08008a50  0000a078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004ba4  08008a50  0000aba4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017a74  00000000  00000000  0000a0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000041f5  00000000  00000000  00021b1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017b8  00000000  00000000  00025d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000121d  00000000  00000000  000274d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006141  00000000  00000000  000286ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019ae4  00000000  00000000  0002e82e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a35f6  00000000  00000000  00048312  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000eb908  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006858  00000000  00000000  000eb94c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000f21a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080084e0 	.word	0x080084e0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	080084e0 	.word	0x080084e0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	@ 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	3c01      	subs	r4, #1
 800032c:	bf28      	it	cs
 800032e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000332:	d2e9      	bcs.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpun>:
 8000a9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x10>
 8000aa6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aaa:	d10a      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab4:	d102      	bne.n	8000abc <__aeabi_dcmpun+0x20>
 8000ab6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_dcmpun+0x26>
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0001 	mov.w	r0, #1
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2iz>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ad0:	d215      	bcs.n	8000afe <__aeabi_d2iz+0x36>
 8000ad2:	d511      	bpl.n	8000af8 <__aeabi_d2iz+0x30>
 8000ad4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000adc:	d912      	bls.n	8000b04 <__aeabi_d2iz+0x3c>
 8000ade:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aea:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aee:	fa23 f002 	lsr.w	r0, r3, r2
 8000af2:	bf18      	it	ne
 8000af4:	4240      	negne	r0, r0
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b02:	d105      	bne.n	8000b10 <__aeabi_d2iz+0x48>
 8000b04:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	bf08      	it	eq
 8000b0a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b0e:	4770      	bx	lr
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
 8000b20:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	041a      	lsls	r2, r3, #16
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	619a      	str	r2, [r3, #24]
}
 8000b2a:	bf00      	nop
 8000b2c:	370c      	adds	r7, #12
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
	...

08000b38 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b085      	sub	sp, #20
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000b40:	4b08      	ldr	r3, [pc, #32]	@ (8000b64 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000b42:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000b44:	4907      	ldr	r1, [pc, #28]	@ (8000b64 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000b4c:	4b05      	ldr	r3, [pc, #20]	@ (8000b64 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000b4e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	4013      	ands	r3, r2
 8000b54:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b56:	68fb      	ldr	r3, [r7, #12]
}
 8000b58:	bf00      	nop
 8000b5a:	3714      	adds	r7, #20
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	40023800 	.word	0x40023800

08000b68 <GPIO_Driver_Init>:
 *********************************************************************************************************************/

/**********************************************************************************************************************
 * Definitions of exported functions
 *********************************************************************************************************************/
bool GPIO_Driver_Init (void) {
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b088      	sub	sp, #32
 8000b6c:	af00      	add	r7, sp, #0
    LL_GPIO_InitTypeDef gpio_init_struct = {0};
 8000b6e:	1d3b      	adds	r3, r7, #4
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]
 8000b7a:	611a      	str	r2, [r3, #16]
 8000b7c:	615a      	str	r2, [r3, #20]
    bool is_init_successful = true;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	77fb      	strb	r3, [r7, #31]

    for (eGpioPin_t pin = eGpioPin_First; pin < eGpioPin_Last; pin++) {
 8000b82:	2300      	movs	r3, #0
 8000b84:	77bb      	strb	r3, [r7, #30]
 8000b86:	e053      	b.n	8000c30 <GPIO_Driver_Init+0xc8>
        LL_AHB1_GRP1_EnableClock(g_static_gpio_lut[pin].clock);
 8000b88:	7fbb      	ldrb	r3, [r7, #30]
 8000b8a:	4a2d      	ldr	r2, [pc, #180]	@ (8000c40 <GPIO_Driver_Init+0xd8>)
 8000b8c:	015b      	lsls	r3, r3, #5
 8000b8e:	4413      	add	r3, r2
 8000b90:	3318      	adds	r3, #24
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4618      	mov	r0, r3
 8000b96:	f7ff ffcf 	bl	8000b38 <LL_AHB1_GRP1_EnableClock>
        LL_GPIO_ResetOutputPin(g_static_gpio_lut[pin].port, g_static_gpio_lut[pin].pin);
 8000b9a:	7fbb      	ldrb	r3, [r7, #30]
 8000b9c:	4a28      	ldr	r2, [pc, #160]	@ (8000c40 <GPIO_Driver_Init+0xd8>)
 8000b9e:	015b      	lsls	r3, r3, #5
 8000ba0:	4413      	add	r3, r2
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	7fbb      	ldrb	r3, [r7, #30]
 8000ba6:	4926      	ldr	r1, [pc, #152]	@ (8000c40 <GPIO_Driver_Init+0xd8>)
 8000ba8:	015b      	lsls	r3, r3, #5
 8000baa:	440b      	add	r3, r1
 8000bac:	3304      	adds	r3, #4
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4610      	mov	r0, r2
 8000bb4:	f7ff ffb0 	bl	8000b18 <LL_GPIO_ResetOutputPin>

        gpio_init_struct.Pin = g_static_gpio_lut[pin].pin;
 8000bb8:	7fbb      	ldrb	r3, [r7, #30]
 8000bba:	4a21      	ldr	r2, [pc, #132]	@ (8000c40 <GPIO_Driver_Init+0xd8>)
 8000bbc:	015b      	lsls	r3, r3, #5
 8000bbe:	4413      	add	r3, r2
 8000bc0:	3304      	adds	r3, #4
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	607b      	str	r3, [r7, #4]
        gpio_init_struct.Mode = g_static_gpio_lut[pin].mode;
 8000bc6:	7fbb      	ldrb	r3, [r7, #30]
 8000bc8:	4a1d      	ldr	r2, [pc, #116]	@ (8000c40 <GPIO_Driver_Init+0xd8>)
 8000bca:	015b      	lsls	r3, r3, #5
 8000bcc:	4413      	add	r3, r2
 8000bce:	3308      	adds	r3, #8
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	60bb      	str	r3, [r7, #8]
        gpio_init_struct.Speed = g_static_gpio_lut[pin].speed;
 8000bd4:	7fbb      	ldrb	r3, [r7, #30]
 8000bd6:	4a1a      	ldr	r2, [pc, #104]	@ (8000c40 <GPIO_Driver_Init+0xd8>)
 8000bd8:	015b      	lsls	r3, r3, #5
 8000bda:	4413      	add	r3, r2
 8000bdc:	330c      	adds	r3, #12
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	60fb      	str	r3, [r7, #12]
        gpio_init_struct.OutputType = g_static_gpio_lut[pin].output;
 8000be2:	7fbb      	ldrb	r3, [r7, #30]
 8000be4:	4a16      	ldr	r2, [pc, #88]	@ (8000c40 <GPIO_Driver_Init+0xd8>)
 8000be6:	015b      	lsls	r3, r3, #5
 8000be8:	4413      	add	r3, r2
 8000bea:	3310      	adds	r3, #16
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	613b      	str	r3, [r7, #16]
        gpio_init_struct.Pull = g_static_gpio_lut[pin].pull;
 8000bf0:	7fbb      	ldrb	r3, [r7, #30]
 8000bf2:	4a13      	ldr	r2, [pc, #76]	@ (8000c40 <GPIO_Driver_Init+0xd8>)
 8000bf4:	015b      	lsls	r3, r3, #5
 8000bf6:	4413      	add	r3, r2
 8000bf8:	3314      	adds	r3, #20
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	617b      	str	r3, [r7, #20]
        gpio_init_struct.Alternate = g_static_gpio_lut[pin].alternate;
 8000bfe:	7fbb      	ldrb	r3, [r7, #30]
 8000c00:	4a0f      	ldr	r2, [pc, #60]	@ (8000c40 <GPIO_Driver_Init+0xd8>)
 8000c02:	015b      	lsls	r3, r3, #5
 8000c04:	4413      	add	r3, r2
 8000c06:	331c      	adds	r3, #28
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	61bb      	str	r3, [r7, #24]

        if (LL_GPIO_Init(g_static_gpio_lut[pin].port, &gpio_init_struct) != SUCCESS) {
 8000c0c:	7fbb      	ldrb	r3, [r7, #30]
 8000c0e:	4a0c      	ldr	r2, [pc, #48]	@ (8000c40 <GPIO_Driver_Init+0xd8>)
 8000c10:	015b      	lsls	r3, r3, #5
 8000c12:	4413      	add	r3, r2
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	1d3a      	adds	r2, r7, #4
 8000c18:	4611      	mov	r1, r2
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f002 f957 	bl	8002ece <LL_GPIO_Init>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <GPIO_Driver_Init+0xc2>
            is_init_successful = false;
 8000c26:	2300      	movs	r3, #0
 8000c28:	77fb      	strb	r3, [r7, #31]
    for (eGpioPin_t pin = eGpioPin_First; pin < eGpioPin_Last; pin++) {
 8000c2a:	7fbb      	ldrb	r3, [r7, #30]
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	77bb      	strb	r3, [r7, #30]
 8000c30:	7fbb      	ldrb	r3, [r7, #30]
 8000c32:	2b05      	cmp	r3, #5
 8000c34:	d9a8      	bls.n	8000b88 <GPIO_Driver_Init+0x20>
        }
    }

    return is_init_successful;
 8000c36:	7ffb      	ldrb	r3, [r7, #31]
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3720      	adds	r7, #32
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	0800857c 	.word	0x0800857c

08000c44 <GPS_APP_Task>:
static bool UBX_MSG_Check (uint8_t *gps_buff);
static int32_t CoordinatesConversion (uint8_t *gps_buff);
static double DegreesToRadians(double degrees);
static double CalculateDistance(double lat1, double lon1, double lat2, double lon2);

static void GPS_APP_Task (void *argument) {
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b0a6      	sub	sp, #152	@ 0x98
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
	uint8_t gps_buff[GPS_BUFF_SIZE];
	while (1) {
		I2C_Driver_Write(eI2cPort_Gps, (uint8_t*)ubx_nav_pvt, sizeof(ubx_nav_pvt));
 8000c4c:	2208      	movs	r2, #8
 8000c4e:	495d      	ldr	r1, [pc, #372]	@ (8000dc4 <GPS_APP_Task+0x180>)
 8000c50:	2000      	movs	r0, #0
 8000c52:	f000 fc83 	bl	800155c <I2C_Driver_Write>
		osDelay(100);
 8000c56:	2064      	movs	r0, #100	@ 0x64
 8000c58:	f002 fd6a 	bl	8003730 <osDelay>
		I2C_Driver_Read(eI2cPort_Gps, gps_buff, GPS_BUFF_SIZE);
 8000c5c:	f107 0314 	add.w	r3, r7, #20
 8000c60:	2264      	movs	r2, #100	@ 0x64
 8000c62:	4619      	mov	r1, r3
 8000c64:	2000      	movs	r0, #0
 8000c66:	f000 fd31 	bl	80016cc <I2C_Driver_Read>

		if (!UBX_MSG_Check(gps_buff)) {
 8000c6a:	f107 0314 	add.w	r3, r7, #20
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f000 f8cc 	bl	8000e0c <UBX_MSG_Check>
 8000c74:	4603      	mov	r3, r0
 8000c76:	f083 0301 	eor.w	r3, r3, #1
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	f040 809f 	bne.w	8000dc0 <GPS_APP_Task+0x17c>
			continue;
		}

		double lon_deg = CoordinatesConversion(&gps_buff[LON_BUFF_INDEX]);
 8000c82:	f107 0314 	add.w	r3, r7, #20
 8000c86:	3318      	adds	r3, #24
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f000 f8e1 	bl	8000e50 <CoordinatesConversion>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	4618      	mov	r0, r3
 8000c92:	f7ff fbff 	bl	8000494 <__aeabi_i2d>
 8000c96:	4602      	mov	r2, r0
 8000c98:	460b      	mov	r3, r1
 8000c9a:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
		double lat_deg = CoordinatesConversion(&gps_buff[LAT_BUFF_INDEX]);
 8000c9e:	f107 0314 	add.w	r3, r7, #20
 8000ca2:	331c      	adds	r3, #28
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f000 f8d3 	bl	8000e50 <CoordinatesConversion>
 8000caa:	4603      	mov	r3, r0
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff fbf1 	bl	8000494 <__aeabi_i2d>
 8000cb2:	4602      	mov	r2, r0
 8000cb4:	460b      	mov	r3, r1
 8000cb6:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80

		for (uint8_t i = 0; i < GPS_DATA_COUNT; i++) {
 8000cba:	2300      	movs	r3, #0
 8000cbc:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8000cc0:	e075      	b.n	8000dae <GPS_APP_Task+0x16a>
			double distance = CalculateDistance(lat_deg, lon_deg, gps_data[i].latitude, gps_data[i].longitude);
 8000cc2:	f897 2097 	ldrb.w	r2, [r7, #151]	@ 0x97
 8000cc6:	4940      	ldr	r1, [pc, #256]	@ (8000dc8 <GPS_APP_Task+0x184>)
 8000cc8:	4613      	mov	r3, r2
 8000cca:	005b      	lsls	r3, r3, #1
 8000ccc:	4413      	add	r3, r2
 8000cce:	00db      	lsls	r3, r3, #3
 8000cd0:	440b      	add	r3, r1
 8000cd2:	ed93 7b00 	vldr	d7, [r3]
 8000cd6:	f897 2097 	ldrb.w	r2, [r7, #151]	@ 0x97
 8000cda:	493b      	ldr	r1, [pc, #236]	@ (8000dc8 <GPS_APP_Task+0x184>)
 8000cdc:	4613      	mov	r3, r2
 8000cde:	005b      	lsls	r3, r3, #1
 8000ce0:	4413      	add	r3, r2
 8000ce2:	00db      	lsls	r3, r3, #3
 8000ce4:	440b      	add	r3, r1
 8000ce6:	3308      	adds	r3, #8
 8000ce8:	ed93 6b00 	vldr	d6, [r3]
 8000cec:	eeb0 3a46 	vmov.f32	s6, s12
 8000cf0:	eef0 3a66 	vmov.f32	s7, s13
 8000cf4:	eeb0 2a47 	vmov.f32	s4, s14
 8000cf8:	eef0 2a67 	vmov.f32	s5, s15
 8000cfc:	ed97 1b22 	vldr	d1, [r7, #136]	@ 0x88
 8000d00:	ed97 0b20 	vldr	d0, [r7, #128]	@ 0x80
 8000d04:	f000 f8f8 	bl	8000ef8 <CalculateDistance>
 8000d08:	ed87 0b1e 	vstr	d0, [r7, #120]	@ 0x78
			if (!gps_data[i].inside_area) {
 8000d0c:	f897 2097 	ldrb.w	r2, [r7, #151]	@ 0x97
 8000d10:	492d      	ldr	r1, [pc, #180]	@ (8000dc8 <GPS_APP_Task+0x184>)
 8000d12:	4613      	mov	r3, r2
 8000d14:	005b      	lsls	r3, r3, #1
 8000d16:	4413      	add	r3, r2
 8000d18:	00db      	lsls	r3, r3, #3
 8000d1a:	440b      	add	r3, r1
 8000d1c:	3314      	adds	r3, #20
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	f083 0301 	eor.w	r3, r3, #1
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d027      	beq.n	8000d7a <GPS_APP_Task+0x136>
				if (distance <= 200) {
 8000d2a:	f04f 0200 	mov.w	r2, #0
 8000d2e:	4b27      	ldr	r3, [pc, #156]	@ (8000dcc <GPS_APP_Task+0x188>)
 8000d30:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8000d34:	f7ff fe94 	bl	8000a60 <__aeabi_dcmple>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d032      	beq.n	8000da4 <GPS_APP_Task+0x160>
					sMessage_t call_message = {.message = (uint8_t*)gps_data[i].phone_number, sizeof(gps_data[i].phone_number)};
 8000d3e:	f897 2097 	ldrb.w	r2, [r7, #151]	@ 0x97
 8000d42:	4921      	ldr	r1, [pc, #132]	@ (8000dc8 <GPS_APP_Task+0x184>)
 8000d44:	4613      	mov	r3, r2
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	4413      	add	r3, r2
 8000d4a:	00db      	lsls	r3, r3, #3
 8000d4c:	440b      	add	r3, r1
 8000d4e:	3310      	adds	r3, #16
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	2304      	movs	r3, #4
 8000d56:	613b      	str	r3, [r7, #16]
					gps_data[i].inside_area = true;
 8000d58:	f897 2097 	ldrb.w	r2, [r7, #151]	@ 0x97
 8000d5c:	491a      	ldr	r1, [pc, #104]	@ (8000dc8 <GPS_APP_Task+0x184>)
 8000d5e:	4613      	mov	r3, r2
 8000d60:	005b      	lsls	r3, r3, #1
 8000d62:	4413      	add	r3, r2
 8000d64:	00db      	lsls	r3, r3, #3
 8000d66:	440b      	add	r3, r1
 8000d68:	3314      	adds	r3, #20
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	701a      	strb	r2, [r3, #0]
					MODEM_API_AddCall(&call_message);
 8000d6e:	f107 030c 	add.w	r3, r7, #12
 8000d72:	4618      	mov	r0, r3
 8000d74:	f000 ffe0 	bl	8001d38 <MODEM_API_AddCall>
 8000d78:	e014      	b.n	8000da4 <GPS_APP_Task+0x160>
				}
			} else {
				if (distance > 200) {
 8000d7a:	f04f 0200 	mov.w	r2, #0
 8000d7e:	4b13      	ldr	r3, [pc, #76]	@ (8000dcc <GPS_APP_Task+0x188>)
 8000d80:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8000d84:	f7ff fe80 	bl	8000a88 <__aeabi_dcmpgt>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d00a      	beq.n	8000da4 <GPS_APP_Task+0x160>
					gps_data[i].inside_area = false;
 8000d8e:	f897 2097 	ldrb.w	r2, [r7, #151]	@ 0x97
 8000d92:	490d      	ldr	r1, [pc, #52]	@ (8000dc8 <GPS_APP_Task+0x184>)
 8000d94:	4613      	mov	r3, r2
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	4413      	add	r3, r2
 8000d9a:	00db      	lsls	r3, r3, #3
 8000d9c:	440b      	add	r3, r1
 8000d9e:	3314      	adds	r3, #20
 8000da0:	2200      	movs	r2, #0
 8000da2:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < GPS_DATA_COUNT; i++) {
 8000da4:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000da8:	3301      	adds	r3, #1
 8000daa:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8000dae:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d085      	beq.n	8000cc2 <GPS_APP_Task+0x7e>
				}
			}
		}

		osDelay(500);
 8000db6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000dba:	f002 fcb9 	bl	8003730 <osDelay>
 8000dbe:	e745      	b.n	8000c4c <GPS_APP_Task+0x8>
			continue;
 8000dc0:	bf00      	nop
	while (1) {
 8000dc2:	e743      	b.n	8000c4c <GPS_APP_Task+0x8>
 8000dc4:	0800863c 	.word	0x0800863c
 8000dc8:	20000000 	.word	0x20000000
 8000dcc:	40690000 	.word	0x40690000

08000dd0 <GPS_APP_Init>:
	}
}

bool GPS_APP_Init (void) {
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
	if (g_static_gps_app_task == NULL) {
 8000dd4:	4b0a      	ldr	r3, [pc, #40]	@ (8000e00 <GPS_APP_Init+0x30>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d10d      	bne.n	8000df8 <GPS_APP_Init+0x28>
		g_static_gps_app_task = osThreadNew(GPS_APP_Task, NO_THREAD_ARGUMENTS, &g_static_gps_app_task_attr);
 8000ddc:	4a09      	ldr	r2, [pc, #36]	@ (8000e04 <GPS_APP_Init+0x34>)
 8000dde:	2100      	movs	r1, #0
 8000de0:	4809      	ldr	r0, [pc, #36]	@ (8000e08 <GPS_APP_Init+0x38>)
 8000de2:	f002 fc13 	bl	800360c <osThreadNew>
 8000de6:	4603      	mov	r3, r0
 8000de8:	4a05      	ldr	r2, [pc, #20]	@ (8000e00 <GPS_APP_Init+0x30>)
 8000dea:	6013      	str	r3, [r2, #0]
		if (g_static_gps_app_task == NULL) {
 8000dec:	4b04      	ldr	r3, [pc, #16]	@ (8000e00 <GPS_APP_Init+0x30>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d101      	bne.n	8000df8 <GPS_APP_Init+0x28>
			return false;
 8000df4:	2300      	movs	r3, #0
 8000df6:	e000      	b.n	8000dfa <GPS_APP_Init+0x2a>
		}
	}

	return true;
 8000df8:	2301      	movs	r3, #1
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	20000094 	.word	0x20000094
 8000e04:	08008644 	.word	0x08008644
 8000e08:	08000c45 	.word	0x08000c45

08000e0c <UBX_MSG_Check>:

static bool UBX_MSG_Check (uint8_t *gps_buff) {
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
	if ((gps_buff[SYNC_CHAR1] != DEFAULT_SYNC1_VALUE) && (gps_buff[SYNC_CHAR2] != DEFAULT_SYNC2_VALUE)) {
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	2bb5      	cmp	r3, #181	@ 0xb5
 8000e1a:	d006      	beq.n	8000e2a <UBX_MSG_Check+0x1e>
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	3301      	adds	r3, #1
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	2b62      	cmp	r3, #98	@ 0x62
 8000e24:	d001      	beq.n	8000e2a <UBX_MSG_Check+0x1e>
		return false;
 8000e26:	2300      	movs	r3, #0
 8000e28:	e00c      	b.n	8000e44 <UBX_MSG_Check+0x38>
	}

	if ((gps_buff[UBX_CLASS] != DEFAULT_UBX_CLASS_VALUE) && (gps_buff[UBX_ID] != DEFAULT_UBX_ID_VALUE)) {
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	3302      	adds	r3, #2
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d006      	beq.n	8000e42 <UBX_MSG_Check+0x36>
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	3303      	adds	r3, #3
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	2b07      	cmp	r3, #7
 8000e3c:	d001      	beq.n	8000e42 <UBX_MSG_Check+0x36>
		return false;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	e000      	b.n	8000e44 <UBX_MSG_Check+0x38>
	}

	return true;
 8000e42:	2301      	movs	r3, #1
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	370c      	adds	r7, #12
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr

08000e50 <CoordinatesConversion>:

static int32_t CoordinatesConversion (uint8_t *gps_buff) {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
	int32_t coordinate = (int32_t)(
	    ((uint32_t)gps_buff)       |
	    ((uint32_t)(gps_buff + 1) << 8)  |
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	021a      	lsls	r2, r3, #8
	    ((uint32_t)gps_buff)       |
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	431a      	orrs	r2, r3
	    ((uint32_t)(gps_buff + 2) << 16) |
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	3302      	adds	r3, #2
 8000e66:	041b      	lsls	r3, r3, #16
	    ((uint32_t)(gps_buff + 1) << 8)  |
 8000e68:	431a      	orrs	r2, r3
	    ((uint32_t)(gps_buff + 3) << 24)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	3303      	adds	r3, #3
 8000e6e:	061b      	lsls	r3, r3, #24
	    ((uint32_t)(gps_buff + 2) << 16) |
 8000e70:	4313      	orrs	r3, r2
	int32_t coordinate = (int32_t)(
 8000e72:	60fb      	str	r3, [r7, #12]
	);

	return coordinate / 1e7;
 8000e74:	68f8      	ldr	r0, [r7, #12]
 8000e76:	f7ff fb0d 	bl	8000494 <__aeabi_i2d>
 8000e7a:	a309      	add	r3, pc, #36	@ (adr r3, 8000ea0 <CoordinatesConversion+0x50>)
 8000e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e80:	f7ff fc9c 	bl	80007bc <__aeabi_ddiv>
 8000e84:	4602      	mov	r2, r0
 8000e86:	460b      	mov	r3, r1
 8000e88:	4610      	mov	r0, r2
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	f7ff fe1c 	bl	8000ac8 <__aeabi_d2iz>
 8000e90:	4603      	mov	r3, r0
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3710      	adds	r7, #16
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	f3af 8000 	nop.w
 8000ea0:	00000000 	.word	0x00000000
 8000ea4:	416312d0 	.word	0x416312d0

08000ea8 <DegreesToRadians>:

static double DegreesToRadians(double degrees) {
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	ed87 0b00 	vstr	d0, [r7]
    return degrees * M_PI / 180.0;
 8000eb2:	a30e      	add	r3, pc, #56	@ (adr r3, 8000eec <DegreesToRadians+0x44>)
 8000eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eb8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000ebc:	f7ff fb54 	bl	8000568 <__aeabi_dmul>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	460b      	mov	r3, r1
 8000ec4:	4610      	mov	r0, r2
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	f04f 0200 	mov.w	r2, #0
 8000ecc:	4b06      	ldr	r3, [pc, #24]	@ (8000ee8 <DegreesToRadians+0x40>)
 8000ece:	f7ff fc75 	bl	80007bc <__aeabi_ddiv>
 8000ed2:	4602      	mov	r2, r0
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	ec43 2b17 	vmov	d7, r2, r3
}
 8000eda:	eeb0 0a47 	vmov.f32	s0, s14
 8000ede:	eef0 0a67 	vmov.f32	s1, s15
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	40668000 	.word	0x40668000
 8000eec:	54442d18 	.word	0x54442d18
 8000ef0:	400921fb 	.word	0x400921fb
 8000ef4:	00000000 	.word	0x00000000

08000ef8 <CalculateDistance>:

static double CalculateDistance(double lat1, double lon1, double lat2, double lon2) {
 8000ef8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000efc:	ed2d 8b02 	vpush	{d8}
 8000f00:	b090      	sub	sp, #64	@ 0x40
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	ed87 0b06 	vstr	d0, [r7, #24]
 8000f08:	ed87 1b04 	vstr	d1, [r7, #16]
 8000f0c:	ed87 2b02 	vstr	d2, [r7, #8]
 8000f10:	ed87 3b00 	vstr	d3, [r7]
    double dLat = DegreesToRadians(lat2 - lat1);
 8000f14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000f18:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000f1c:	f7ff f96c 	bl	80001f8 <__aeabi_dsub>
 8000f20:	4602      	mov	r2, r0
 8000f22:	460b      	mov	r3, r1
 8000f24:	ec43 2b17 	vmov	d7, r2, r3
 8000f28:	eeb0 0a47 	vmov.f32	s0, s14
 8000f2c:	eef0 0a67 	vmov.f32	s1, s15
 8000f30:	f7ff ffba 	bl	8000ea8 <DegreesToRadians>
 8000f34:	ed87 0b0e 	vstr	d0, [r7, #56]	@ 0x38
    double dLon = DegreesToRadians(lon2 - lon1);
 8000f38:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000f3c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000f40:	f7ff f95a 	bl	80001f8 <__aeabi_dsub>
 8000f44:	4602      	mov	r2, r0
 8000f46:	460b      	mov	r3, r1
 8000f48:	ec43 2b17 	vmov	d7, r2, r3
 8000f4c:	eeb0 0a47 	vmov.f32	s0, s14
 8000f50:	eef0 0a67 	vmov.f32	s1, s15
 8000f54:	f7ff ffa8 	bl	8000ea8 <DegreesToRadians>
 8000f58:	ed87 0b0c 	vstr	d0, [r7, #48]	@ 0x30

    double a = sin(dLat / 2) * sin(dLat / 2) +
 8000f5c:	f04f 0200 	mov.w	r2, #0
 8000f60:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f64:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8000f68:	f7ff fc28 	bl	80007bc <__aeabi_ddiv>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	460b      	mov	r3, r1
 8000f70:	ec43 2b17 	vmov	d7, r2, r3
 8000f74:	eeb0 0a47 	vmov.f32	s0, s14
 8000f78:	eef0 0a67 	vmov.f32	s1, s15
 8000f7c:	f005 ff54 	bl	8006e28 <sin>
 8000f80:	ec55 4b10 	vmov	r4, r5, d0
 8000f84:	f04f 0200 	mov.w	r2, #0
 8000f88:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000f8c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8000f90:	f7ff fc14 	bl	80007bc <__aeabi_ddiv>
 8000f94:	4602      	mov	r2, r0
 8000f96:	460b      	mov	r3, r1
 8000f98:	ec43 2b17 	vmov	d7, r2, r3
 8000f9c:	eeb0 0a47 	vmov.f32	s0, s14
 8000fa0:	eef0 0a67 	vmov.f32	s1, s15
 8000fa4:	f005 ff40 	bl	8006e28 <sin>
 8000fa8:	ec53 2b10 	vmov	r2, r3, d0
 8000fac:	4620      	mov	r0, r4
 8000fae:	4629      	mov	r1, r5
 8000fb0:	f7ff fada 	bl	8000568 <__aeabi_dmul>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	460b      	mov	r3, r1
 8000fb8:	4614      	mov	r4, r2
 8000fba:	461d      	mov	r5, r3
               cos(DegreesToRadians(lat1)) * cos(DegreesToRadians(lat2)) *
 8000fbc:	ed97 0b06 	vldr	d0, [r7, #24]
 8000fc0:	f7ff ff72 	bl	8000ea8 <DegreesToRadians>
 8000fc4:	eeb0 7a40 	vmov.f32	s14, s0
 8000fc8:	eef0 7a60 	vmov.f32	s15, s1
 8000fcc:	eeb0 0a47 	vmov.f32	s0, s14
 8000fd0:	eef0 0a67 	vmov.f32	s1, s15
 8000fd4:	f005 fed4 	bl	8006d80 <cos>
 8000fd8:	ec59 8b10 	vmov	r8, r9, d0
 8000fdc:	ed97 0b02 	vldr	d0, [r7, #8]
 8000fe0:	f7ff ff62 	bl	8000ea8 <DegreesToRadians>
 8000fe4:	eeb0 7a40 	vmov.f32	s14, s0
 8000fe8:	eef0 7a60 	vmov.f32	s15, s1
 8000fec:	eeb0 0a47 	vmov.f32	s0, s14
 8000ff0:	eef0 0a67 	vmov.f32	s1, s15
 8000ff4:	f005 fec4 	bl	8006d80 <cos>
 8000ff8:	ec53 2b10 	vmov	r2, r3, d0
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	4649      	mov	r1, r9
 8001000:	f7ff fab2 	bl	8000568 <__aeabi_dmul>
 8001004:	4602      	mov	r2, r0
 8001006:	460b      	mov	r3, r1
 8001008:	4690      	mov	r8, r2
 800100a:	4699      	mov	r9, r3
               sin(dLon / 2) * sin(dLon / 2);
 800100c:	f04f 0200 	mov.w	r2, #0
 8001010:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001014:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001018:	f7ff fbd0 	bl	80007bc <__aeabi_ddiv>
 800101c:	4602      	mov	r2, r0
 800101e:	460b      	mov	r3, r1
 8001020:	ec43 2b17 	vmov	d7, r2, r3
 8001024:	eeb0 0a47 	vmov.f32	s0, s14
 8001028:	eef0 0a67 	vmov.f32	s1, s15
 800102c:	f005 fefc 	bl	8006e28 <sin>
 8001030:	ec53 2b10 	vmov	r2, r3, d0
               cos(DegreesToRadians(lat1)) * cos(DegreesToRadians(lat2)) *
 8001034:	4640      	mov	r0, r8
 8001036:	4649      	mov	r1, r9
 8001038:	f7ff fa96 	bl	8000568 <__aeabi_dmul>
 800103c:	4602      	mov	r2, r0
 800103e:	460b      	mov	r3, r1
 8001040:	4690      	mov	r8, r2
 8001042:	4699      	mov	r9, r3
               sin(dLon / 2) * sin(dLon / 2);
 8001044:	f04f 0200 	mov.w	r2, #0
 8001048:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800104c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001050:	f7ff fbb4 	bl	80007bc <__aeabi_ddiv>
 8001054:	4602      	mov	r2, r0
 8001056:	460b      	mov	r3, r1
 8001058:	ec43 2b17 	vmov	d7, r2, r3
 800105c:	eeb0 0a47 	vmov.f32	s0, s14
 8001060:	eef0 0a67 	vmov.f32	s1, s15
 8001064:	f005 fee0 	bl	8006e28 <sin>
 8001068:	ec53 2b10 	vmov	r2, r3, d0
 800106c:	4640      	mov	r0, r8
 800106e:	4649      	mov	r1, r9
 8001070:	f7ff fa7a 	bl	8000568 <__aeabi_dmul>
 8001074:	4602      	mov	r2, r0
 8001076:	460b      	mov	r3, r1
    double a = sin(dLat / 2) * sin(dLat / 2) +
 8001078:	4620      	mov	r0, r4
 800107a:	4629      	mov	r1, r5
 800107c:	f7ff f8be 	bl	80001fc <__adddf3>
 8001080:	4602      	mov	r2, r0
 8001082:	460b      	mov	r3, r1
 8001084:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    double c = 2 * atan2(sqrt(a), sqrt(1 - a));
 8001088:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 800108c:	f005 fe4c 	bl	8006d28 <sqrt>
 8001090:	eeb0 8a40 	vmov.f32	s16, s0
 8001094:	eef0 8a60 	vmov.f32	s17, s1
 8001098:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800109c:	f04f 0000 	mov.w	r0, #0
 80010a0:	491f      	ldr	r1, [pc, #124]	@ (8001120 <CalculateDistance+0x228>)
 80010a2:	f7ff f8a9 	bl	80001f8 <__aeabi_dsub>
 80010a6:	4602      	mov	r2, r0
 80010a8:	460b      	mov	r3, r1
 80010aa:	ec43 2b17 	vmov	d7, r2, r3
 80010ae:	eeb0 0a47 	vmov.f32	s0, s14
 80010b2:	eef0 0a67 	vmov.f32	s1, s15
 80010b6:	f005 fe37 	bl	8006d28 <sqrt>
 80010ba:	eeb0 7a40 	vmov.f32	s14, s0
 80010be:	eef0 7a60 	vmov.f32	s15, s1
 80010c2:	eeb0 1a47 	vmov.f32	s2, s14
 80010c6:	eef0 1a67 	vmov.f32	s3, s15
 80010ca:	eeb0 0a48 	vmov.f32	s0, s16
 80010ce:	eef0 0a68 	vmov.f32	s1, s17
 80010d2:	f005 fe27 	bl	8006d24 <atan2>
 80010d6:	ec51 0b10 	vmov	r0, r1, d0
 80010da:	4602      	mov	r2, r0
 80010dc:	460b      	mov	r3, r1
 80010de:	f7ff f88d 	bl	80001fc <__adddf3>
 80010e2:	4602      	mov	r2, r0
 80010e4:	460b      	mov	r3, r1
 80010e6:	e9c7 2308 	strd	r2, r3, [r7, #32]

    return EARTH_RADIUS_KM * c;
 80010ea:	a30b      	add	r3, pc, #44	@ (adr r3, 8001118 <CalculateDistance+0x220>)
 80010ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80010f4:	f7ff fa38 	bl	8000568 <__aeabi_dmul>
 80010f8:	4602      	mov	r2, r0
 80010fa:	460b      	mov	r3, r1
 80010fc:	ec43 2b17 	vmov	d7, r2, r3
}
 8001100:	eeb0 0a47 	vmov.f32	s0, s14
 8001104:	eef0 0a67 	vmov.f32	s1, s15
 8001108:	3740      	adds	r7, #64	@ 0x40
 800110a:	46bd      	mov	sp, r7
 800110c:	ecbd 8b02 	vpop	{d8}
 8001110:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001114:	f3af 8000 	nop.w
 8001118:	00000000 	.word	0x00000000
 800111c:	40b8e300 	.word	0x40b8e300
 8001120:	3ff00000 	.word	0x3ff00000

08001124 <HEAP_API_Init>:
 *********************************************************************************************************************/

/**********************************************************************************************************************
 * Definitions of exported functions
 *********************************************************************************************************************/
bool HEAP_API_Init (void) {
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
    if (heap_mutex != NULL) {
 8001128:	4b0a      	ldr	r3, [pc, #40]	@ (8001154 <HEAP_API_Init+0x30>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <HEAP_API_Init+0x10>
        return false;
 8001130:	2300      	movs	r3, #0
 8001132:	e00c      	b.n	800114e <HEAP_API_Init+0x2a>
    }

    heap_mutex = osMutexNew(&g_static_uart_mutex_attr);
 8001134:	4808      	ldr	r0, [pc, #32]	@ (8001158 <HEAP_API_Init+0x34>)
 8001136:	f002 fb16 	bl	8003766 <osMutexNew>
 800113a:	4603      	mov	r3, r0
 800113c:	4a05      	ldr	r2, [pc, #20]	@ (8001154 <HEAP_API_Init+0x30>)
 800113e:	6013      	str	r3, [r2, #0]
    if (heap_mutex == NULL) {
 8001140:	4b04      	ldr	r3, [pc, #16]	@ (8001154 <HEAP_API_Init+0x30>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d101      	bne.n	800114c <HEAP_API_Init+0x28>
        return false;
 8001148:	2300      	movs	r3, #0
 800114a:	e000      	b.n	800114e <HEAP_API_Init+0x2a>
    }

    return true;
 800114c:	2301      	movs	r3, #1
}
 800114e:	4618      	mov	r0, r3
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20000098 	.word	0x20000098
 8001158:	08008668 	.word	0x08008668

0800115c <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f043 0201 	orr.w	r2, r3, #1
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	601a      	str	r2, [r3, #0]
}
 8001170:	bf00      	nop
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	601a      	str	r2, [r3, #0]
}
 8001190:	bf00      	nop
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          ENGC          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	601a      	str	r2, [r3, #0]
}
 80011b0:	bf00      	nop
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr

080011bc <LL_I2C_SetOwnAddress2>:
  * @param  I2Cx I2C Instance.
  * @param  OwnAddress2 This parameter must be a value between Min_Data=0 and Max_Data=0x7F.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	68db      	ldr	r3, [r3, #12]
 80011ca:	f023 02fe 	bic.w	r2, r3, #254	@ 0xfe
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	431a      	orrs	r2, r3
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	60da      	str	r2, [r3, #12]
}
 80011d6:	bf00      	nop
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr

080011e2 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         ENDUAL        LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 80011e2:	b480      	push	{r7}
 80011e4:	b083      	sub	sp, #12
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	68db      	ldr	r3, [r3, #12]
 80011ee:	f023 0201 	bic.w	r2, r3, #1
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	60da      	str	r2, [r3, #12]
}
 80011f6:	bf00      	nop
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr

08001202 <LL_I2C_IsActiveFlag_TXE>:
  * @rmtoll SR1          TXE           LL_I2C_IsActiveFlag_TXE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_TXE(I2C_TypeDef *I2Cx)
{
 8001202:	b480      	push	{r7}
 8001204:	b083      	sub	sp, #12
 8001206:	af00      	add	r7, sp, #0
 8001208:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_TXE) == (I2C_SR1_TXE));
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	695b      	ldr	r3, [r3, #20]
 800120e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001212:	2b80      	cmp	r3, #128	@ 0x80
 8001214:	bf0c      	ite	eq
 8001216:	2301      	moveq	r3, #1
 8001218:	2300      	movne	r3, #0
 800121a:	b2db      	uxtb	r3, r3
}
 800121c:	4618      	mov	r0, r3
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr

08001228 <LL_I2C_IsActiveFlag_BTF>:
  * @rmtoll SR1          BTF           LL_I2C_IsActiveFlag_BTF
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_BTF(I2C_TypeDef *I2Cx)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_BTF) == (I2C_SR1_BTF));
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	695b      	ldr	r3, [r3, #20]
 8001234:	f003 0304 	and.w	r3, r3, #4
 8001238:	2b04      	cmp	r3, #4
 800123a:	bf0c      	ite	eq
 800123c:	2301      	moveq	r3, #1
 800123e:	2300      	movne	r3, #0
 8001240:	b2db      	uxtb	r3, r3
}
 8001242:	4618      	mov	r0, r3
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr

0800124e <LL_I2C_IsActiveFlag_RXNE>:
  * @rmtoll SR1          RXNE          LL_I2C_IsActiveFlag_RXNE
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_RXNE(I2C_TypeDef *I2Cx)
{
 800124e:	b480      	push	{r7}
 8001250:	b083      	sub	sp, #12
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_RXNE) == (I2C_SR1_RXNE));
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	695b      	ldr	r3, [r3, #20]
 800125a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800125e:	2b40      	cmp	r3, #64	@ 0x40
 8001260:	bf0c      	ite	eq
 8001262:	2301      	moveq	r3, #1
 8001264:	2300      	movne	r3, #0
 8001266:	b2db      	uxtb	r3, r3
}
 8001268:	4618      	mov	r0, r3
 800126a:	370c      	adds	r7, #12
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr

08001274 <LL_I2C_IsActiveFlag_SB>:
  * @rmtoll SR1          SB            LL_I2C_IsActiveFlag_SB
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_SB(I2C_TypeDef *I2Cx)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_SB) == (I2C_SR1_SB));
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	695b      	ldr	r3, [r3, #20]
 8001280:	f003 0301 	and.w	r3, r3, #1
 8001284:	2b01      	cmp	r3, #1
 8001286:	bf0c      	ite	eq
 8001288:	2301      	moveq	r3, #1
 800128a:	2300      	movne	r3, #0
 800128c:	b2db      	uxtb	r3, r3
}
 800128e:	4618      	mov	r0, r3
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr

0800129a <LL_I2C_IsActiveFlag_ADDR>:
  * @rmtoll SR1          ADDR          LL_I2C_IsActiveFlag_ADDR
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_ADDR(I2C_TypeDef *I2Cx)
{
 800129a:	b480      	push	{r7}
 800129c:	b083      	sub	sp, #12
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR1, I2C_SR1_ADDR) == (I2C_SR1_ADDR));
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	695b      	ldr	r3, [r3, #20]
 80012a6:	f003 0302 	and.w	r3, r3, #2
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	bf0c      	ite	eq
 80012ae:	2301      	moveq	r3, #1
 80012b0:	2300      	movne	r3, #0
 80012b2:	b2db      	uxtb	r3, r3
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <LL_I2C_IsActiveFlag_BUSY>:
  * @rmtoll SR2          BUSY          LL_I2C_IsActiveFlag_BUSY
  * @param  I2Cx I2C Instance.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_I2C_IsActiveFlag_BUSY(I2C_TypeDef *I2Cx)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(I2Cx->SR2, I2C_SR2_BUSY) == (I2C_SR2_BUSY));
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	f003 0302 	and.w	r3, r3, #2
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	bf0c      	ite	eq
 80012d4:	2301      	moveq	r3, #1
 80012d6:	2300      	movne	r3, #0
 80012d8:	b2db      	uxtb	r3, r3
}
 80012da:	4618      	mov	r0, r3
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr

080012e6 <LL_I2C_ClearFlag_ADDR>:
  * @rmtoll SR1          ADDR          LL_I2C_ClearFlag_ADDR
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ClearFlag_ADDR(I2C_TypeDef *I2Cx)
{
 80012e6:	b480      	push	{r7}
 80012e8:	b085      	sub	sp, #20
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = I2Cx->SR1;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	695b      	ldr	r3, [r3, #20]
 80012f2:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80012f4:	68fb      	ldr	r3, [r7, #12]
  tmpreg = I2Cx->SR2;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	699b      	ldr	r3, [r3, #24]
 80012fa:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80012fc:	68fb      	ldr	r3, [r7, #12]
}
 80012fe:	bf00      	nop
 8001300:	3714      	adds	r7, #20
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr

0800130a <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 800130a:	b480      	push	{r7}
 800130c:	b083      	sub	sp, #12
 800130e:	af00      	add	r7, sp, #0
 8001310:	6078      	str	r0, [r7, #4]
 8001312:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	431a      	orrs	r2, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	601a      	str	r2, [r3, #0]
}
 8001324:	bf00      	nop
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <LL_I2C_GenerateStartCondition>:
  * @rmtoll CR1          START         LL_I2C_GenerateStartCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStartCondition(I2C_TypeDef *I2Cx)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_START);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	601a      	str	r2, [r3, #0]
}
 8001344:	bf00      	nop
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr

08001350 <LL_I2C_GenerateStopCondition>:
  * @rmtoll CR1          STOP          LL_I2C_GenerateStopCondition
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_GenerateStopCondition(I2C_TypeDef *I2Cx)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_STOP);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	601a      	str	r2, [r3, #0]
}
 8001364:	bf00      	nop
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <LL_I2C_ReceiveData8>:
  * @rmtoll DR           DR            LL_I2C_ReceiveData8
  * @param  I2Cx I2C Instance.
  * @retval Value between Min_Data=0x0 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_I2C_ReceiveData8(I2C_TypeDef *I2Cx)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(I2Cx->DR, I2C_DR_DR));
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	691b      	ldr	r3, [r3, #16]
 800137c:	b2db      	uxtb	r3, r3
}
 800137e:	4618      	mov	r0, r3
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr

0800138a <LL_I2C_TransmitData8>:
  * @param  I2Cx I2C Instance.
  * @param  Data Value between Min_Data=0x0 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_I2C_TransmitData8(I2C_TypeDef *I2Cx, uint8_t Data)
{
 800138a:	b480      	push	{r7}
 800138c:	b083      	sub	sp, #12
 800138e:	af00      	add	r7, sp, #0
 8001390:	6078      	str	r0, [r7, #4]
 8001392:	460b      	mov	r3, r1
 8001394:	70fb      	strb	r3, [r7, #3]
  MODIFY_REG(I2Cx->DR, I2C_DR_DR, Data);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	691b      	ldr	r3, [r3, #16]
 800139a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800139e:	78fb      	ldrb	r3, [r7, #3]
 80013a0:	431a      	orrs	r2, r3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	611a      	str	r2, [r3, #16]
}
 80013a6:	bf00      	nop
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
	...

080013b4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80013bc:	4b08      	ldr	r3, [pc, #32]	@ (80013e0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80013be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80013c0:	4907      	ldr	r1, [pc, #28]	@ (80013e0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80013c8:	4b05      	ldr	r3, [pc, #20]	@ (80013e0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80013ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	4013      	ands	r3, r2
 80013d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013d2:	68fb      	ldr	r3, [r7, #12]
}
 80013d4:	bf00      	nop
 80013d6:	3714      	adds	r7, #20
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr
 80013e0:	40023800 	.word	0x40023800

080013e4 <I2C_Driver_Init>:
		.enable_clock = LL_APB1_GRP1_EnableClock,
		.clock = LL_APB1_GRP1_PERIPH_I2C1
	}
};

bool I2C_Driver_Init (eI2cPort_t i2c_port) {
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b08a      	sub	sp, #40	@ 0x28
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	71fb      	strb	r3, [r7, #7]
	LL_I2C_InitTypeDef i2c_init_stuct = {0};
 80013ee:	f107 0308 	add.w	r3, r7, #8
 80013f2:	2220      	movs	r2, #32
 80013f4:	2100      	movs	r1, #0
 80013f6:	4618      	mov	r0, r3
 80013f8:	f005 fc2e 	bl	8006c58 <memset>

	g_static_i2c_lut[i2c_port].enable_clock(g_static_i2c_lut[i2c_port].clock);
 80013fc:	79fa      	ldrb	r2, [r7, #7]
 80013fe:	4956      	ldr	r1, [pc, #344]	@ (8001558 <I2C_Driver_Init+0x174>)
 8001400:	4613      	mov	r3, r2
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	4413      	add	r3, r2
 8001406:	011b      	lsls	r3, r3, #4
 8001408:	440b      	add	r3, r1
 800140a:	3328      	adds	r3, #40	@ 0x28
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001412:	4610      	mov	r0, r2
 8001414:	4798      	blx	r3

	LL_I2C_DisableOwnAddress2(g_static_i2c_lut[i2c_port].port);
 8001416:	79fa      	ldrb	r2, [r7, #7]
 8001418:	494f      	ldr	r1, [pc, #316]	@ (8001558 <I2C_Driver_Init+0x174>)
 800141a:	4613      	mov	r3, r2
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	4413      	add	r3, r2
 8001420:	011b      	lsls	r3, r3, #4
 8001422:	440b      	add	r3, r1
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff fedb 	bl	80011e2 <LL_I2C_DisableOwnAddress2>
	LL_I2C_DisableGeneralCall(g_static_i2c_lut[i2c_port].port);
 800142c:	79fa      	ldrb	r2, [r7, #7]
 800142e:	494a      	ldr	r1, [pc, #296]	@ (8001558 <I2C_Driver_Init+0x174>)
 8001430:	4613      	mov	r3, r2
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	4413      	add	r3, r2
 8001436:	011b      	lsls	r3, r3, #4
 8001438:	440b      	add	r3, r1
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff fead 	bl	800119c <LL_I2C_DisableGeneralCall>
	LL_I2C_EnableClockStretching(g_static_i2c_lut[i2c_port].port);
 8001442:	79fa      	ldrb	r2, [r7, #7]
 8001444:	4944      	ldr	r1, [pc, #272]	@ (8001558 <I2C_Driver_Init+0x174>)
 8001446:	4613      	mov	r3, r2
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	4413      	add	r3, r2
 800144c:	011b      	lsls	r3, r3, #4
 800144e:	440b      	add	r3, r1
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff fe92 	bl	800117c <LL_I2C_EnableClockStretching>

	i2c_init_stuct.PeripheralMode = g_static_i2c_lut[i2c_port].periph_mode;
 8001458:	79fa      	ldrb	r2, [r7, #7]
 800145a:	493f      	ldr	r1, [pc, #252]	@ (8001558 <I2C_Driver_Init+0x174>)
 800145c:	4613      	mov	r3, r2
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	4413      	add	r3, r2
 8001462:	011b      	lsls	r3, r3, #4
 8001464:	440b      	add	r3, r1
 8001466:	3304      	adds	r3, #4
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	60bb      	str	r3, [r7, #8]
	i2c_init_stuct.ClockSpeed = g_static_i2c_lut[i2c_port].clock_speed;
 800146c:	79fa      	ldrb	r2, [r7, #7]
 800146e:	493a      	ldr	r1, [pc, #232]	@ (8001558 <I2C_Driver_Init+0x174>)
 8001470:	4613      	mov	r3, r2
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	4413      	add	r3, r2
 8001476:	011b      	lsls	r3, r3, #4
 8001478:	440b      	add	r3, r1
 800147a:	3308      	adds	r3, #8
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	60fb      	str	r3, [r7, #12]
	i2c_init_stuct.DutyCycle = g_static_i2c_lut[i2c_port].duty_cycle;
 8001480:	79fa      	ldrb	r2, [r7, #7]
 8001482:	4935      	ldr	r1, [pc, #212]	@ (8001558 <I2C_Driver_Init+0x174>)
 8001484:	4613      	mov	r3, r2
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	4413      	add	r3, r2
 800148a:	011b      	lsls	r3, r3, #4
 800148c:	440b      	add	r3, r1
 800148e:	330c      	adds	r3, #12
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	613b      	str	r3, [r7, #16]
	i2c_init_stuct.AnalogFilter = g_static_i2c_lut[i2c_port].analog_filter;
 8001494:	79fa      	ldrb	r2, [r7, #7]
 8001496:	4930      	ldr	r1, [pc, #192]	@ (8001558 <I2C_Driver_Init+0x174>)
 8001498:	4613      	mov	r3, r2
 800149a:	005b      	lsls	r3, r3, #1
 800149c:	4413      	add	r3, r2
 800149e:	011b      	lsls	r3, r3, #4
 80014a0:	440b      	add	r3, r1
 80014a2:	3310      	adds	r3, #16
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	617b      	str	r3, [r7, #20]
	i2c_init_stuct.DigitalFilter = g_static_i2c_lut[i2c_port].digital_filter;
 80014a8:	79fa      	ldrb	r2, [r7, #7]
 80014aa:	492b      	ldr	r1, [pc, #172]	@ (8001558 <I2C_Driver_Init+0x174>)
 80014ac:	4613      	mov	r3, r2
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	4413      	add	r3, r2
 80014b2:	011b      	lsls	r3, r3, #4
 80014b4:	440b      	add	r3, r1
 80014b6:	3314      	adds	r3, #20
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	61bb      	str	r3, [r7, #24]
	i2c_init_stuct.OwnAddress1 = g_static_i2c_lut[i2c_port].own_address;
 80014bc:	79fa      	ldrb	r2, [r7, #7]
 80014be:	4926      	ldr	r1, [pc, #152]	@ (8001558 <I2C_Driver_Init+0x174>)
 80014c0:	4613      	mov	r3, r2
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	4413      	add	r3, r2
 80014c6:	011b      	lsls	r3, r3, #4
 80014c8:	440b      	add	r3, r1
 80014ca:	3318      	adds	r3, #24
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	61fb      	str	r3, [r7, #28]
	i2c_init_stuct.TypeAcknowledge = g_static_i2c_lut[i2c_port].type_acknowledge;
 80014d0:	79fa      	ldrb	r2, [r7, #7]
 80014d2:	4921      	ldr	r1, [pc, #132]	@ (8001558 <I2C_Driver_Init+0x174>)
 80014d4:	4613      	mov	r3, r2
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	4413      	add	r3, r2
 80014da:	011b      	lsls	r3, r3, #4
 80014dc:	440b      	add	r3, r1
 80014de:	331c      	adds	r3, #28
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	623b      	str	r3, [r7, #32]
	i2c_init_stuct.OwnAddrSize = g_static_i2c_lut[i2c_port].own_addr_size;
 80014e4:	79fa      	ldrb	r2, [r7, #7]
 80014e6:	491c      	ldr	r1, [pc, #112]	@ (8001558 <I2C_Driver_Init+0x174>)
 80014e8:	4613      	mov	r3, r2
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	4413      	add	r3, r2
 80014ee:	011b      	lsls	r3, r3, #4
 80014f0:	440b      	add	r3, r1
 80014f2:	3320      	adds	r3, #32
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	627b      	str	r3, [r7, #36]	@ 0x24

	if (LL_I2C_Init(g_static_i2c_lut[i2c_port].port, &i2c_init_stuct) != SUCCESS ) {
 80014f8:	79fa      	ldrb	r2, [r7, #7]
 80014fa:	4917      	ldr	r1, [pc, #92]	@ (8001558 <I2C_Driver_Init+0x174>)
 80014fc:	4613      	mov	r3, r2
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	4413      	add	r3, r2
 8001502:	011b      	lsls	r3, r3, #4
 8001504:	440b      	add	r3, r1
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f107 0208 	add.w	r2, r7, #8
 800150c:	4611      	mov	r1, r2
 800150e:	4618      	mov	r0, r3
 8001510:	f001 fe6a 	bl	80031e8 <LL_I2C_Init>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <I2C_Driver_Init+0x13a>
		return false;
 800151a:	2300      	movs	r3, #0
 800151c:	e017      	b.n	800154e <I2C_Driver_Init+0x16a>
	}

	LL_I2C_SetOwnAddress2(g_static_i2c_lut[i2c_port].port, 0);
 800151e:	79fa      	ldrb	r2, [r7, #7]
 8001520:	490d      	ldr	r1, [pc, #52]	@ (8001558 <I2C_Driver_Init+0x174>)
 8001522:	4613      	mov	r3, r2
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	4413      	add	r3, r2
 8001528:	011b      	lsls	r3, r3, #4
 800152a:	440b      	add	r3, r1
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	2100      	movs	r1, #0
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff fe43 	bl	80011bc <LL_I2C_SetOwnAddress2>
	LL_I2C_Enable(g_static_i2c_lut[i2c_port].port);
 8001536:	79fa      	ldrb	r2, [r7, #7]
 8001538:	4907      	ldr	r1, [pc, #28]	@ (8001558 <I2C_Driver_Init+0x174>)
 800153a:	4613      	mov	r3, r2
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	4413      	add	r3, r2
 8001540:	011b      	lsls	r3, r3, #4
 8001542:	440b      	add	r3, r1
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4618      	mov	r0, r3
 8001548:	f7ff fe08 	bl	800115c <LL_I2C_Enable>

	return true;
 800154c:	2301      	movs	r3, #1
}
 800154e:	4618      	mov	r0, r3
 8001550:	3728      	adds	r7, #40	@ 0x28
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	08008678 	.word	0x08008678

0800155c <I2C_Driver_Write>:

bool I2C_Driver_Write (eI2cPort_t i2c, uint8_t *buffer, size_t byte_count) {
 800155c:	b580      	push	{r7, lr}
 800155e:	b086      	sub	sp, #24
 8001560:	af00      	add	r7, sp, #0
 8001562:	4603      	mov	r3, r0
 8001564:	60b9      	str	r1, [r7, #8]
 8001566:	607a      	str	r2, [r7, #4]
 8001568:	73fb      	strb	r3, [r7, #15]
    if ((i2c >= eI2cPort_Last) || (buffer == NULL) || (byte_count == 0)) {
 800156a:	7bfb      	ldrb	r3, [r7, #15]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d105      	bne.n	800157c <I2C_Driver_Write+0x20>
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d002      	beq.n	800157c <I2C_Driver_Write+0x20>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d101      	bne.n	8001580 <I2C_Driver_Write+0x24>
        return false;
 800157c:	2300      	movs	r3, #0
 800157e:	e09e      	b.n	80016be <I2C_Driver_Write+0x162>
    }

    uint8_t address = g_static_i2c_lut[i2c].dev_addr << 1;
 8001580:	7bfa      	ldrb	r2, [r7, #15]
 8001582:	4951      	ldr	r1, [pc, #324]	@ (80016c8 <I2C_Driver_Write+0x16c>)
 8001584:	4613      	mov	r3, r2
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	4413      	add	r3, r2
 800158a:	011b      	lsls	r3, r3, #4
 800158c:	440b      	add	r3, r1
 800158e:	3324      	adds	r3, #36	@ 0x24
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	75fb      	strb	r3, [r7, #23]
    uint8_t address_w = address | 0;
 8001596:	7dfb      	ldrb	r3, [r7, #23]
 8001598:	75bb      	strb	r3, [r7, #22]

    LL_I2C_GenerateStartCondition(g_static_i2c_lut[i2c].port);
 800159a:	7bfa      	ldrb	r2, [r7, #15]
 800159c:	494a      	ldr	r1, [pc, #296]	@ (80016c8 <I2C_Driver_Write+0x16c>)
 800159e:	4613      	mov	r3, r2
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	4413      	add	r3, r2
 80015a4:	011b      	lsls	r3, r3, #4
 80015a6:	440b      	add	r3, r1
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7ff fec0 	bl	8001330 <LL_I2C_GenerateStartCondition>
    while (!LL_I2C_IsActiveFlag_SB(g_static_i2c_lut[i2c].port)) {};
 80015b0:	bf00      	nop
 80015b2:	7bfa      	ldrb	r2, [r7, #15]
 80015b4:	4944      	ldr	r1, [pc, #272]	@ (80016c8 <I2C_Driver_Write+0x16c>)
 80015b6:	4613      	mov	r3, r2
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	4413      	add	r3, r2
 80015bc:	011b      	lsls	r3, r3, #4
 80015be:	440b      	add	r3, r1
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff fe56 	bl	8001274 <LL_I2C_IsActiveFlag_SB>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d0f1      	beq.n	80015b2 <I2C_Driver_Write+0x56>

    LL_I2C_TransmitData8(g_static_i2c_lut[i2c].port, address_w);
 80015ce:	7bfa      	ldrb	r2, [r7, #15]
 80015d0:	493d      	ldr	r1, [pc, #244]	@ (80016c8 <I2C_Driver_Write+0x16c>)
 80015d2:	4613      	mov	r3, r2
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	4413      	add	r3, r2
 80015d8:	011b      	lsls	r3, r3, #4
 80015da:	440b      	add	r3, r1
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	7dba      	ldrb	r2, [r7, #22]
 80015e0:	4611      	mov	r1, r2
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7ff fed1 	bl	800138a <LL_I2C_TransmitData8>
    while (!LL_I2C_IsActiveFlag_ADDR(g_static_i2c_lut[i2c].port)) {};
 80015e8:	bf00      	nop
 80015ea:	7bfa      	ldrb	r2, [r7, #15]
 80015ec:	4936      	ldr	r1, [pc, #216]	@ (80016c8 <I2C_Driver_Write+0x16c>)
 80015ee:	4613      	mov	r3, r2
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	4413      	add	r3, r2
 80015f4:	011b      	lsls	r3, r3, #4
 80015f6:	440b      	add	r3, r1
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7ff fe4d 	bl	800129a <LL_I2C_IsActiveFlag_ADDR>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d0f1      	beq.n	80015ea <I2C_Driver_Write+0x8e>
    LL_I2C_ClearFlag_ADDR(g_static_i2c_lut[i2c].port);
 8001606:	7bfa      	ldrb	r2, [r7, #15]
 8001608:	492f      	ldr	r1, [pc, #188]	@ (80016c8 <I2C_Driver_Write+0x16c>)
 800160a:	4613      	mov	r3, r2
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	4413      	add	r3, r2
 8001610:	011b      	lsls	r3, r3, #4
 8001612:	440b      	add	r3, r1
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4618      	mov	r0, r3
 8001618:	f7ff fe65 	bl	80012e6 <LL_I2C_ClearFlag_ADDR>

    while (byte_count > 0) {
 800161c:	e022      	b.n	8001664 <I2C_Driver_Write+0x108>
        while (!LL_I2C_IsActiveFlag_TXE(g_static_i2c_lut[i2c].port)) {};
 800161e:	bf00      	nop
 8001620:	7bfa      	ldrb	r2, [r7, #15]
 8001622:	4929      	ldr	r1, [pc, #164]	@ (80016c8 <I2C_Driver_Write+0x16c>)
 8001624:	4613      	mov	r3, r2
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	4413      	add	r3, r2
 800162a:	011b      	lsls	r3, r3, #4
 800162c:	440b      	add	r3, r1
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4618      	mov	r0, r3
 8001632:	f7ff fde6 	bl	8001202 <LL_I2C_IsActiveFlag_TXE>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d0f1      	beq.n	8001620 <I2C_Driver_Write+0xc4>

        LL_I2C_TransmitData8(g_static_i2c_lut[i2c].port, *buffer);
 800163c:	7bfa      	ldrb	r2, [r7, #15]
 800163e:	4922      	ldr	r1, [pc, #136]	@ (80016c8 <I2C_Driver_Write+0x16c>)
 8001640:	4613      	mov	r3, r2
 8001642:	005b      	lsls	r3, r3, #1
 8001644:	4413      	add	r3, r2
 8001646:	011b      	lsls	r3, r3, #4
 8001648:	440b      	add	r3, r1
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	4619      	mov	r1, r3
 8001652:	4610      	mov	r0, r2
 8001654:	f7ff fe99 	bl	800138a <LL_I2C_TransmitData8>
        buffer++;
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	3301      	adds	r3, #1
 800165c:	60bb      	str	r3, [r7, #8]
        byte_count--;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	3b01      	subs	r3, #1
 8001662:	607b      	str	r3, [r7, #4]
    while (byte_count > 0) {
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d1d9      	bne.n	800161e <I2C_Driver_Write+0xc2>
    }

    while (!LL_I2C_IsActiveFlag_TXE(g_static_i2c_lut[i2c].port)) {};
 800166a:	bf00      	nop
 800166c:	7bfa      	ldrb	r2, [r7, #15]
 800166e:	4916      	ldr	r1, [pc, #88]	@ (80016c8 <I2C_Driver_Write+0x16c>)
 8001670:	4613      	mov	r3, r2
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	4413      	add	r3, r2
 8001676:	011b      	lsls	r3, r3, #4
 8001678:	440b      	add	r3, r1
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff fdc0 	bl	8001202 <LL_I2C_IsActiveFlag_TXE>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d0f1      	beq.n	800166c <I2C_Driver_Write+0x110>
	while (!LL_I2C_IsActiveFlag_BTF(g_static_i2c_lut[i2c].port)) {};
 8001688:	bf00      	nop
 800168a:	7bfa      	ldrb	r2, [r7, #15]
 800168c:	490e      	ldr	r1, [pc, #56]	@ (80016c8 <I2C_Driver_Write+0x16c>)
 800168e:	4613      	mov	r3, r2
 8001690:	005b      	lsls	r3, r3, #1
 8001692:	4413      	add	r3, r2
 8001694:	011b      	lsls	r3, r3, #4
 8001696:	440b      	add	r3, r1
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4618      	mov	r0, r3
 800169c:	f7ff fdc4 	bl	8001228 <LL_I2C_IsActiveFlag_BTF>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d0f1      	beq.n	800168a <I2C_Driver_Write+0x12e>
    LL_I2C_GenerateStopCondition(g_static_i2c_lut[i2c].port); // stop
 80016a6:	7bfa      	ldrb	r2, [r7, #15]
 80016a8:	4907      	ldr	r1, [pc, #28]	@ (80016c8 <I2C_Driver_Write+0x16c>)
 80016aa:	4613      	mov	r3, r2
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	4413      	add	r3, r2
 80016b0:	011b      	lsls	r3, r3, #4
 80016b2:	440b      	add	r3, r1
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff fe4a 	bl	8001350 <LL_I2C_GenerateStopCondition>

    return true;
 80016bc:	2301      	movs	r3, #1
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3718      	adds	r7, #24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	08008678 	.word	0x08008678

080016cc <I2C_Driver_Read>:


bool I2C_Driver_Read (eI2cPort_t i2c, uint8_t *buffer, size_t byte_count) {
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	607a      	str	r2, [r7, #4]
 80016d8:	73fb      	strb	r3, [r7, #15]
	if ((i2c >= eI2cPort_Last) || (buffer == NULL) || (byte_count == 0)) {
 80016da:	7bfb      	ldrb	r3, [r7, #15]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d105      	bne.n	80016ec <I2C_Driver_Read+0x20>
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d002      	beq.n	80016ec <I2C_Driver_Read+0x20>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d101      	bne.n	80016f0 <I2C_Driver_Read+0x24>
	        return false;
 80016ec:	2300      	movs	r3, #0
 80016ee:	e0be      	b.n	800186e <I2C_Driver_Read+0x1a2>
	}

	uint8_t address = g_static_i2c_lut[i2c].dev_addr << 1;
 80016f0:	7bfa      	ldrb	r2, [r7, #15]
 80016f2:	4961      	ldr	r1, [pc, #388]	@ (8001878 <I2C_Driver_Read+0x1ac>)
 80016f4:	4613      	mov	r3, r2
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	4413      	add	r3, r2
 80016fa:	011b      	lsls	r3, r3, #4
 80016fc:	440b      	add	r3, r1
 80016fe:	3324      	adds	r3, #36	@ 0x24
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	75fb      	strb	r3, [r7, #23]
	uint8_t address_r = address | 1;
 8001706:	7dfb      	ldrb	r3, [r7, #23]
 8001708:	f043 0301 	orr.w	r3, r3, #1
 800170c:	75bb      	strb	r3, [r7, #22]

	while (LL_I2C_IsActiveFlag_BUSY(g_static_i2c_lut[i2c].port));
 800170e:	bf00      	nop
 8001710:	7bfa      	ldrb	r2, [r7, #15]
 8001712:	4959      	ldr	r1, [pc, #356]	@ (8001878 <I2C_Driver_Read+0x1ac>)
 8001714:	4613      	mov	r3, r2
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	4413      	add	r3, r2
 800171a:	011b      	lsls	r3, r3, #4
 800171c:	440b      	add	r3, r1
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff fdcd 	bl	80012c0 <LL_I2C_IsActiveFlag_BUSY>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d1f1      	bne.n	8001710 <I2C_Driver_Read+0x44>

	LL_I2C_GenerateStartCondition(g_static_i2c_lut[i2c].port);
 800172c:	7bfa      	ldrb	r2, [r7, #15]
 800172e:	4952      	ldr	r1, [pc, #328]	@ (8001878 <I2C_Driver_Read+0x1ac>)
 8001730:	4613      	mov	r3, r2
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	4413      	add	r3, r2
 8001736:	011b      	lsls	r3, r3, #4
 8001738:	440b      	add	r3, r1
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff fdf7 	bl	8001330 <LL_I2C_GenerateStartCondition>
	while (!LL_I2C_IsActiveFlag_SB(g_static_i2c_lut[i2c].port));
 8001742:	bf00      	nop
 8001744:	7bfa      	ldrb	r2, [r7, #15]
 8001746:	494c      	ldr	r1, [pc, #304]	@ (8001878 <I2C_Driver_Read+0x1ac>)
 8001748:	4613      	mov	r3, r2
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	4413      	add	r3, r2
 800174e:	011b      	lsls	r3, r3, #4
 8001750:	440b      	add	r3, r1
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff fd8d 	bl	8001274 <LL_I2C_IsActiveFlag_SB>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d0f1      	beq.n	8001744 <I2C_Driver_Read+0x78>

	LL_I2C_TransmitData8(g_static_i2c_lut[i2c].port, address_r);
 8001760:	7bfa      	ldrb	r2, [r7, #15]
 8001762:	4945      	ldr	r1, [pc, #276]	@ (8001878 <I2C_Driver_Read+0x1ac>)
 8001764:	4613      	mov	r3, r2
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	4413      	add	r3, r2
 800176a:	011b      	lsls	r3, r3, #4
 800176c:	440b      	add	r3, r1
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	7dba      	ldrb	r2, [r7, #22]
 8001772:	4611      	mov	r1, r2
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff fe08 	bl	800138a <LL_I2C_TransmitData8>
	while (!LL_I2C_IsActiveFlag_ADDR(g_static_i2c_lut[i2c].port));
 800177a:	bf00      	nop
 800177c:	7bfa      	ldrb	r2, [r7, #15]
 800177e:	493e      	ldr	r1, [pc, #248]	@ (8001878 <I2C_Driver_Read+0x1ac>)
 8001780:	4613      	mov	r3, r2
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	4413      	add	r3, r2
 8001786:	011b      	lsls	r3, r3, #4
 8001788:	440b      	add	r3, r1
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff fd84 	bl	800129a <LL_I2C_IsActiveFlag_ADDR>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d0f1      	beq.n	800177c <I2C_Driver_Read+0xb0>
	LL_I2C_ClearFlag_ADDR(g_static_i2c_lut[i2c].port);
 8001798:	7bfa      	ldrb	r2, [r7, #15]
 800179a:	4937      	ldr	r1, [pc, #220]	@ (8001878 <I2C_Driver_Read+0x1ac>)
 800179c:	4613      	mov	r3, r2
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	4413      	add	r3, r2
 80017a2:	011b      	lsls	r3, r3, #4
 80017a4:	440b      	add	r3, r1
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff fd9c 	bl	80012e6 <LL_I2C_ClearFlag_ADDR>

	if (byte_count == 1) {
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d14d      	bne.n	8001850 <I2C_Driver_Read+0x184>
		LL_I2C_AcknowledgeNextData(g_static_i2c_lut[i2c].port, LL_I2C_NACK);
 80017b4:	7bfa      	ldrb	r2, [r7, #15]
 80017b6:	4930      	ldr	r1, [pc, #192]	@ (8001878 <I2C_Driver_Read+0x1ac>)
 80017b8:	4613      	mov	r3, r2
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	4413      	add	r3, r2
 80017be:	011b      	lsls	r3, r3, #4
 80017c0:	440b      	add	r3, r1
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2100      	movs	r1, #0
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff fd9f 	bl	800130a <LL_I2C_AcknowledgeNextData>
	}

	while (byte_count > 0) {
 80017cc:	e040      	b.n	8001850 <I2C_Driver_Read+0x184>
		while (!LL_I2C_IsActiveFlag_RXNE(g_static_i2c_lut[i2c].port));
 80017ce:	bf00      	nop
 80017d0:	7bfa      	ldrb	r2, [r7, #15]
 80017d2:	4929      	ldr	r1, [pc, #164]	@ (8001878 <I2C_Driver_Read+0x1ac>)
 80017d4:	4613      	mov	r3, r2
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	4413      	add	r3, r2
 80017da:	011b      	lsls	r3, r3, #4
 80017dc:	440b      	add	r3, r1
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7ff fd34 	bl	800124e <LL_I2C_IsActiveFlag_RXNE>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d0f1      	beq.n	80017d0 <I2C_Driver_Read+0x104>

		*buffer = LL_I2C_ReceiveData8(g_static_i2c_lut[i2c].port);
 80017ec:	7bfa      	ldrb	r2, [r7, #15]
 80017ee:	4922      	ldr	r1, [pc, #136]	@ (8001878 <I2C_Driver_Read+0x1ac>)
 80017f0:	4613      	mov	r3, r2
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	4413      	add	r3, r2
 80017f6:	011b      	lsls	r3, r3, #4
 80017f8:	440b      	add	r3, r1
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff fdb7 	bl	8001370 <LL_I2C_ReceiveData8>
 8001802:	4603      	mov	r3, r0
 8001804:	461a      	mov	r2, r3
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	701a      	strb	r2, [r3, #0]

		if (byte_count - 2 == 0) {
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2b02      	cmp	r3, #2
 800180e:	d10c      	bne.n	800182a <I2C_Driver_Read+0x15e>
			LL_I2C_AcknowledgeNextData(g_static_i2c_lut[i2c].port, LL_I2C_NACK);
 8001810:	7bfa      	ldrb	r2, [r7, #15]
 8001812:	4919      	ldr	r1, [pc, #100]	@ (8001878 <I2C_Driver_Read+0x1ac>)
 8001814:	4613      	mov	r3, r2
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	4413      	add	r3, r2
 800181a:	011b      	lsls	r3, r3, #4
 800181c:	440b      	add	r3, r1
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2100      	movs	r1, #0
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff fd71 	bl	800130a <LL_I2C_AcknowledgeNextData>
 8001828:	e00c      	b.n	8001844 <I2C_Driver_Read+0x178>
		} else {
			LL_I2C_AcknowledgeNextData(g_static_i2c_lut[i2c].port, LL_I2C_ACK);
 800182a:	7bfa      	ldrb	r2, [r7, #15]
 800182c:	4912      	ldr	r1, [pc, #72]	@ (8001878 <I2C_Driver_Read+0x1ac>)
 800182e:	4613      	mov	r3, r2
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	4413      	add	r3, r2
 8001834:	011b      	lsls	r3, r3, #4
 8001836:	440b      	add	r3, r1
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800183e:	4618      	mov	r0, r3
 8001840:	f7ff fd63 	bl	800130a <LL_I2C_AcknowledgeNextData>
		}

		buffer++;
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	3301      	adds	r3, #1
 8001848:	60bb      	str	r3, [r7, #8]
		byte_count--;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	3b01      	subs	r3, #1
 800184e:	607b      	str	r3, [r7, #4]
	while (byte_count > 0) {
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d1bb      	bne.n	80017ce <I2C_Driver_Read+0x102>
	}

	LL_I2C_GenerateStopCondition(g_static_i2c_lut[i2c].port);
 8001856:	7bfa      	ldrb	r2, [r7, #15]
 8001858:	4907      	ldr	r1, [pc, #28]	@ (8001878 <I2C_Driver_Read+0x1ac>)
 800185a:	4613      	mov	r3, r2
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	4413      	add	r3, r2
 8001860:	011b      	lsls	r3, r3, #4
 8001862:	440b      	add	r3, r1
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff fd72 	bl	8001350 <LL_I2C_GenerateStopCondition>

	return true;
 800186c:	2301      	movs	r3, #1
}
 800186e:	4618      	mov	r0, r3
 8001870:	3718      	adds	r7, #24
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	08008678 	.word	0x08008678

0800187c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001880:	4b05      	ldr	r3, [pc, #20]	@ (8001898 <LL_RCC_HSI_Enable+0x1c>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a04      	ldr	r2, [pc, #16]	@ (8001898 <LL_RCC_HSI_Enable+0x1c>)
 8001886:	f043 0301 	orr.w	r3, r3, #1
 800188a:	6013      	str	r3, [r2, #0]
}
 800188c:	bf00      	nop
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	40023800 	.word	0x40023800

0800189c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80018a0:	4b06      	ldr	r3, [pc, #24]	@ (80018bc <LL_RCC_HSI_IsReady+0x20>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0302 	and.w	r3, r3, #2
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	bf0c      	ite	eq
 80018ac:	2301      	moveq	r3, #1
 80018ae:	2300      	movne	r3, #0
 80018b0:	b2db      	uxtb	r3, r3
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr
 80018bc:	40023800 	.word	0x40023800

080018c0 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80018c8:	4b07      	ldr	r3, [pc, #28]	@ (80018e8 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	00db      	lsls	r3, r3, #3
 80018d4:	4904      	ldr	r1, [pc, #16]	@ (80018e8 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80018d6:	4313      	orrs	r3, r2
 80018d8:	600b      	str	r3, [r1, #0]
}
 80018da:	bf00      	nop
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	40023800 	.word	0x40023800

080018ec <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80018f4:	4b06      	ldr	r3, [pc, #24]	@ (8001910 <LL_RCC_SetSysClkSource+0x24>)
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	f023 0203 	bic.w	r2, r3, #3
 80018fc:	4904      	ldr	r1, [pc, #16]	@ (8001910 <LL_RCC_SetSysClkSource+0x24>)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4313      	orrs	r3, r2
 8001902:	608b      	str	r3, [r1, #8]
}
 8001904:	bf00      	nop
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	40023800 	.word	0x40023800

08001914 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001918:	4b04      	ldr	r3, [pc, #16]	@ (800192c <LL_RCC_GetSysClkSource+0x18>)
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	f003 030c 	and.w	r3, r3, #12
}
 8001920:	4618      	mov	r0, r3
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	40023800 	.word	0x40023800

08001930 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001938:	4b06      	ldr	r3, [pc, #24]	@ (8001954 <LL_RCC_SetAHBPrescaler+0x24>)
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001940:	4904      	ldr	r1, [pc, #16]	@ (8001954 <LL_RCC_SetAHBPrescaler+0x24>)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4313      	orrs	r3, r2
 8001946:	608b      	str	r3, [r1, #8]
}
 8001948:	bf00      	nop
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	40023800 	.word	0x40023800

08001958 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001960:	4b06      	ldr	r3, [pc, #24]	@ (800197c <LL_RCC_SetAPB1Prescaler+0x24>)
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001968:	4904      	ldr	r1, [pc, #16]	@ (800197c <LL_RCC_SetAPB1Prescaler+0x24>)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4313      	orrs	r3, r2
 800196e:	608b      	str	r3, [r1, #8]
}
 8001970:	bf00      	nop
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr
 800197c:	40023800 	.word	0x40023800

08001980 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001988:	4b06      	ldr	r3, [pc, #24]	@ (80019a4 <LL_RCC_SetAPB2Prescaler+0x24>)
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001990:	4904      	ldr	r1, [pc, #16]	@ (80019a4 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4313      	orrs	r3, r2
 8001996:	608b      	str	r3, [r1, #8]
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	40023800 	.word	0x40023800

080019a8 <LL_RCC_SetTIMPrescaler>:
  *         @arg @ref LL_RCC_TIM_PRESCALER_TWICE
  *         @arg @ref LL_RCC_TIM_PRESCALER_FOUR_TIMES
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMPrescaler(uint32_t Prescaler)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 80019b0:	4b07      	ldr	r3, [pc, #28]	@ (80019d0 <LL_RCC_SetTIMPrescaler+0x28>)
 80019b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80019b6:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80019ba:	4905      	ldr	r1, [pc, #20]	@ (80019d0 <LL_RCC_SetTIMPrescaler+0x28>)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	4313      	orrs	r3, r2
 80019c0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
}
 80019c4:	bf00      	nop
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr
 80019d0:	40023800 	.word	0x40023800

080019d4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80019d8:	4b05      	ldr	r3, [pc, #20]	@ (80019f0 <LL_RCC_PLL_Enable+0x1c>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a04      	ldr	r2, [pc, #16]	@ (80019f0 <LL_RCC_PLL_Enable+0x1c>)
 80019de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019e2:	6013      	str	r3, [r2, #0]
}
 80019e4:	bf00      	nop
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	40023800 	.word	0x40023800

080019f4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80019f8:	4b07      	ldr	r3, [pc, #28]	@ (8001a18 <LL_RCC_PLL_IsReady+0x24>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a00:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001a04:	bf0c      	ite	eq
 8001a06:	2301      	moveq	r3, #1
 8001a08:	2300      	movne	r3, #0
 8001a0a:	b2db      	uxtb	r3, r3
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	40023800 	.word	0x40023800

08001a1c <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b085      	sub	sp, #20
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	60b9      	str	r1, [r7, #8]
 8001a26:	607a      	str	r2, [r7, #4]
 8001a28:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8001a2a:	4b0d      	ldr	r3, [pc, #52]	@ (8001a60 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8001a2c:	685a      	ldr	r2, [r3, #4]
 8001a2e:	4b0d      	ldr	r3, [pc, #52]	@ (8001a64 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 8001a30:	4013      	ands	r3, r2
 8001a32:	68f9      	ldr	r1, [r7, #12]
 8001a34:	68ba      	ldr	r2, [r7, #8]
 8001a36:	4311      	orrs	r1, r2
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	0192      	lsls	r2, r2, #6
 8001a3c:	430a      	orrs	r2, r1
 8001a3e:	4908      	ldr	r1, [pc, #32]	@ (8001a60 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8001a40:	4313      	orrs	r3, r2
 8001a42:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8001a44:	4b06      	ldr	r3, [pc, #24]	@ (8001a60 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001a4c:	4904      	ldr	r1, [pc, #16]	@ (8001a60 <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 8001a54:	bf00      	nop
 8001a56:	3714      	adds	r7, #20
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr
 8001a60:	40023800 	.word	0x40023800
 8001a64:	ffbf8000 	.word	0xffbf8000

08001a68 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001a70:	4b06      	ldr	r3, [pc, #24]	@ (8001a8c <LL_FLASH_SetLatency+0x24>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f023 0207 	bic.w	r2, r3, #7
 8001a78:	4904      	ldr	r1, [pc, #16]	@ (8001a8c <LL_FLASH_SetLatency+0x24>)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	600b      	str	r3, [r1, #0]
}
 8001a80:	bf00      	nop
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr
 8001a8c:	40023c00 	.word	0x40023c00

08001a90 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001a94:	4b04      	ldr	r3, [pc, #16]	@ (8001aa8 <LL_FLASH_GetLatency+0x18>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0307 	and.w	r3, r3, #7
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	40023c00 	.word	0x40023c00

08001aac <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8001ab4:	4b06      	ldr	r3, [pc, #24]	@ (8001ad0 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8001abc:	4904      	ldr	r1, [pc, #16]	@ (8001ad0 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	600b      	str	r3, [r1, #0]
}
 8001ac4:	bf00      	nop
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr
 8001ad0:	40007000 	.word	0x40007000

08001ad4 <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the Regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll CSR   VOS       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 8001ad8:	4b07      	ldr	r3, [pc, #28]	@ (8001af8 <LL_PWR_IsActiveFlag_VOS+0x24>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ae0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001ae4:	bf0c      	ite	eq
 8001ae6:	2301      	moveq	r3, #1
 8001ae8:	2300      	movne	r3, #0
 8001aea:	b2db      	uxtb	r3, r3
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	40007000 	.word	0x40007000

08001afc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b00:	f000 fcc2 	bl	8002488 <HAL_Init>

  /* USER CODE BEGIN Init */
  if (HEAP_API_Init() != 1) {
 8001b04:	f7ff fb0e 	bl	8001124 <HEAP_API_Init>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	f083 0301 	eor.w	r3, r3, #1
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <main+0x1c>
	  Error_Handler();
 8001b14:	f000 f89c 	bl	8001c50 <Error_Handler>
  }

  if (GPIO_Driver_Init() != 1) {
 8001b18:	f7ff f826 	bl	8000b68 <GPIO_Driver_Init>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	f083 0301 	eor.w	r3, r3, #1
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <main+0x30>
	  Error_Handler();
 8001b28:	f000 f892 	bl	8001c50 <Error_Handler>
  }

  if (I2C_Driver_Init(eI2cPort_Gps) != 1) {
 8001b2c:	2000      	movs	r0, #0
 8001b2e:	f7ff fc59 	bl	80013e4 <I2C_Driver_Init>
 8001b32:	4603      	mov	r3, r0
 8001b34:	f083 0301 	eor.w	r3, r3, #1
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <main+0x46>
	  Error_Handler();
 8001b3e:	f000 f887 	bl	8001c50 <Error_Handler>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b42:	f000 f81d 	bl	8001b80 <SystemClock_Config>
  if (GPS_APP_Init() != 1) {
 8001b46:	f7ff f943 	bl	8000dd0 <GPS_APP_Init>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	f083 0301 	eor.w	r3, r3, #1
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <main+0x5e>
	  Error_Handler();
 8001b56:	f000 f87b 	bl	8001c50 <Error_Handler>
  }

  if (MODEM_API_Init() != 1) {
 8001b5a:	f000 f8a5 	bl	8001ca8 <MODEM_API_Init>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	f083 0301 	eor.w	r3, r3, #1
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <main+0x72>
	  Error_Handler();
 8001b6a:	f000 f871 	bl	8001c50 <Error_Handler>
  }
  osKernelInitialize();
 8001b6e:	f001 fd03 	bl	8003578 <osKernelInitialize>
  /* creation of defaultTask */

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
//  UART_API_Init(eUartApiPort_Usart1, 0, (uint8_t*)"\r\n", 2);
  GPS_APP_Init();
 8001b72:	f7ff f92d 	bl	8000dd0 <GPS_APP_Init>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001b76:	f001 fd23 	bl	80035c0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001b7a:	bf00      	nop
 8001b7c:	e7fd      	b.n	8001b7a <main+0x7e>
	...

08001b80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8001b84:	2002      	movs	r0, #2
 8001b86:	f7ff ff6f 	bl	8001a68 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 8001b8a:	bf00      	nop
 8001b8c:	f7ff ff80 	bl	8001a90 <LL_FLASH_GetLatency>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d1fa      	bne.n	8001b8c <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE2);
 8001b96:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001b9a:	f7ff ff87 	bl	8001aac <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_SetCalibTrimming(16);
 8001b9e:	2010      	movs	r0, #16
 8001ba0:	f7ff fe8e 	bl	80018c0 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 8001ba4:	f7ff fe6a 	bl	800187c <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8001ba8:	bf00      	nop
 8001baa:	f7ff fe77 	bl	800189c <LL_RCC_HSI_IsReady>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d1fa      	bne.n	8001baa <SystemClock_Config+0x2a>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_16, 336, LL_RCC_PLLP_DIV_4);
 8001bb4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001bb8:	f44f 72a8 	mov.w	r2, #336	@ 0x150
 8001bbc:	2110      	movs	r1, #16
 8001bbe:	2000      	movs	r0, #0
 8001bc0:	f7ff ff2c 	bl	8001a1c <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8001bc4:	f7ff ff06 	bl	80019d4 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8001bc8:	bf00      	nop
 8001bca:	f7ff ff13 	bl	80019f4 <LL_RCC_PLL_IsReady>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d1fa      	bne.n	8001bca <SystemClock_Config+0x4a>
  {

  }
  while (LL_PWR_IsActiveFlag_VOS() == 0)
 8001bd4:	bf00      	nop
 8001bd6:	f7ff ff7d 	bl	8001ad4 <LL_PWR_IsActiveFlag_VOS>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d0fa      	beq.n	8001bd6 <SystemClock_Config+0x56>
  {
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001be0:	2000      	movs	r0, #0
 8001be2:	f7ff fea5 	bl	8001930 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8001be6:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001bea:	f7ff feb5 	bl	8001958 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8001bee:	2000      	movs	r0, #0
 8001bf0:	f7ff fec6 	bl	8001980 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001bf4:	2002      	movs	r0, #2
 8001bf6:	f7ff fe79 	bl	80018ec <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001bfa:	bf00      	nop
 8001bfc:	f7ff fe8a 	bl	8001914 <LL_RCC_GetSysClkSource>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b08      	cmp	r3, #8
 8001c04:	d1fa      	bne.n	8001bfc <SystemClock_Config+0x7c>
  {

  }
  LL_SetSystemCoreClock(84000000);
 8001c06:	4808      	ldr	r0, [pc, #32]	@ (8001c28 <SystemClock_Config+0xa8>)
 8001c08:	f001 fc62 	bl	80034d0 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8001c0c:	200f      	movs	r0, #15
 8001c0e:	f000 f9b5 	bl	8001f7c <HAL_InitTick>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001c18:	f000 f81a 	bl	8001c50 <Error_Handler>
  }
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
 8001c1c:	2000      	movs	r0, #0
 8001c1e:	f7ff fec3 	bl	80019a8 <LL_RCC_SetTIMPrescaler>
}
 8001c22:	bf00      	nop
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	0501bd00 	.word	0x0501bd00

08001c2c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a04      	ldr	r2, [pc, #16]	@ (8001c4c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d101      	bne.n	8001c42 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001c3e:	f000 fc45 	bl	80024cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001c42:	bf00      	nop
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	40010000 	.word	0x40010000

08001c50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c54:	b672      	cpsid	i
}
 8001c56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c58:	bf00      	nop
 8001c5a:	e7fd      	b.n	8001c58 <Error_Handler+0x8>

08001c5c <MODEM_API_Task>:
};

static bool MODEM_API_Check (void);
static bool MODEM_API_MakeCall (uint8_t *phone_number);

static void MODEM_API_Task (void *arguments) {
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
	sMessage_t message = {0};
 8001c64:	f107 0308 	add.w	r3, r7, #8
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	605a      	str	r2, [r3, #4]
	while (1) {
		if (g_dynamic_modem_api.isBusy) {
 8001c6e:	4b0d      	ldr	r3, [pc, #52]	@ (8001ca4 <MODEM_API_Task+0x48>)
 8001c70:	7a1b      	ldrb	r3, [r3, #8]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d113      	bne.n	8001c9e <MODEM_API_Task+0x42>
			continue;
		}

		if (osMessageQueueGet(g_dynamic_modem_api.message_queue_id, &message, MESSAGE_PRIORITY, osWaitForever) != osOK) {
 8001c76:	4b0b      	ldr	r3, [pc, #44]	@ (8001ca4 <MODEM_API_Task+0x48>)
 8001c78:	6818      	ldr	r0, [r3, #0]
 8001c7a:	f107 0108 	add.w	r1, r7, #8
 8001c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c82:	2200      	movs	r2, #0
 8001c84:	f001 ff50 	bl	8003b28 <osMessageQueueGet>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d0ef      	beq.n	8001c6e <MODEM_API_Task+0x12>
			g_dynamic_modem_api.isBusy = true;
 8001c8e:	4b05      	ldr	r3, [pc, #20]	@ (8001ca4 <MODEM_API_Task+0x48>)
 8001c90:	2201      	movs	r2, #1
 8001c92:	721a      	strb	r2, [r3, #8]
			MODEM_API_MakeCall(message.message);
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f000 f89e 	bl	8001dd8 <MODEM_API_MakeCall>
 8001c9c:	e7e7      	b.n	8001c6e <MODEM_API_Task+0x12>
			continue;
 8001c9e:	bf00      	nop
		if (g_dynamic_modem_api.isBusy) {
 8001ca0:	e7e5      	b.n	8001c6e <MODEM_API_Task+0x12>
 8001ca2:	bf00      	nop
 8001ca4:	200000a0 	.word	0x200000a0

08001ca8 <MODEM_API_Init>:

	HEAP_API_Free(message.message);

}

bool MODEM_API_Init (void) {
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
	if (!MODEM_API_Check()) {
 8001cac:	f000 f862 	bl	8001d74 <MODEM_API_Check>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	f083 0301 	eor.w	r3, r3, #1
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <MODEM_API_Init+0x18>
		return false;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	e02c      	b.n	8001d1a <MODEM_API_Init+0x72>
	}

	g_dynamic_modem_api.message_queue_id = osMessageQueueNew(MESSAGE_QUEUE_SIZE, sizeof(sMessage_t), &g_static_modem_api.queue_attributes);
 8001cc0:	4a17      	ldr	r2, [pc, #92]	@ (8001d20 <MODEM_API_Init+0x78>)
 8001cc2:	2108      	movs	r1, #8
 8001cc4:	2008      	movs	r0, #8
 8001cc6:	f001 fe5c 	bl	8003982 <osMessageQueueNew>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	4a15      	ldr	r2, [pc, #84]	@ (8001d24 <MODEM_API_Init+0x7c>)
 8001cce:	6013      	str	r3, [r2, #0]
    if (g_dynamic_modem_api.message_queue_id == NULL) {
 8001cd0:	4b14      	ldr	r3, [pc, #80]	@ (8001d24 <MODEM_API_Init+0x7c>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d101      	bne.n	8001cdc <MODEM_API_Init+0x34>
        return false;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	e01e      	b.n	8001d1a <MODEM_API_Init+0x72>
    }

    g_dynamic_modem_api.mutex_id = osMutexNew(&g_static_modem_api.mutex_attributes);
 8001cdc:	4812      	ldr	r0, [pc, #72]	@ (8001d28 <MODEM_API_Init+0x80>)
 8001cde:	f001 fd42 	bl	8003766 <osMutexNew>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	4a0f      	ldr	r2, [pc, #60]	@ (8001d24 <MODEM_API_Init+0x7c>)
 8001ce6:	6053      	str	r3, [r2, #4]
    if (g_dynamic_modem_api.mutex_id == NULL) {
 8001ce8:	4b0e      	ldr	r3, [pc, #56]	@ (8001d24 <MODEM_API_Init+0x7c>)
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d101      	bne.n	8001cf4 <MODEM_API_Init+0x4c>
        return false;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	e012      	b.n	8001d1a <MODEM_API_Init+0x72>
    }

    if (g_modem_api_task_handle == NULL) {
 8001cf4:	4b0d      	ldr	r3, [pc, #52]	@ (8001d2c <MODEM_API_Init+0x84>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d10d      	bne.n	8001d18 <MODEM_API_Init+0x70>
    	g_modem_api_task_handle = osThreadNew(MODEM_API_Task, NULL, &g_modem_api_task_attr);
 8001cfc:	4a0c      	ldr	r2, [pc, #48]	@ (8001d30 <MODEM_API_Init+0x88>)
 8001cfe:	2100      	movs	r1, #0
 8001d00:	480c      	ldr	r0, [pc, #48]	@ (8001d34 <MODEM_API_Init+0x8c>)
 8001d02:	f001 fc83 	bl	800360c <osThreadNew>
 8001d06:	4603      	mov	r3, r0
 8001d08:	4a08      	ldr	r2, [pc, #32]	@ (8001d2c <MODEM_API_Init+0x84>)
 8001d0a:	6013      	str	r3, [r2, #0]
        if (g_modem_api_task_handle == NULL) {
 8001d0c:	4b07      	ldr	r3, [pc, #28]	@ (8001d2c <MODEM_API_Init+0x84>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d101      	bne.n	8001d18 <MODEM_API_Init+0x70>
            return false;
 8001d14:	2300      	movs	r3, #0
 8001d16:	e000      	b.n	8001d1a <MODEM_API_Init+0x72>
        }
    }

    return true;
 8001d18:	2301      	movs	r3, #1
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	080086cc 	.word	0x080086cc
 8001d24:	200000a0 	.word	0x200000a0
 8001d28:	080086e4 	.word	0x080086e4
 8001d2c:	2000009c 	.word	0x2000009c
 8001d30:	080086a8 	.word	0x080086a8
 8001d34:	08001c5d 	.word	0x08001c5d

08001d38 <MODEM_API_AddCall>:

bool MODEM_API_AddCall (sMessage_t *phone_number) {
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
	if (phone_number == NULL) {
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d101      	bne.n	8001d4a <MODEM_API_AddCall+0x12>
		return false;
 8001d46:	2300      	movs	r3, #0
 8001d48:	e00d      	b.n	8001d66 <MODEM_API_AddCall+0x2e>
	}

	if (osMessageQueuePut(g_dynamic_modem_api.message_queue_id, phone_number, MESSAGE_PRIORITY, osWaitForever) != osOK) {
 8001d4a:	4b09      	ldr	r3, [pc, #36]	@ (8001d70 <MODEM_API_AddCall+0x38>)
 8001d4c:	6818      	ldr	r0, [r3, #0]
 8001d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d52:	2200      	movs	r2, #0
 8001d54:	6879      	ldr	r1, [r7, #4]
 8001d56:	f001 fe87 	bl	8003a68 <osMessageQueuePut>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <MODEM_API_AddCall+0x2c>
		return false;
 8001d60:	2300      	movs	r3, #0
 8001d62:	e000      	b.n	8001d66 <MODEM_API_AddCall+0x2e>
	}

	return true;
 8001d64:	2301      	movs	r3, #1
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	200000a0 	.word	0x200000a0

08001d74 <MODEM_API_Check>:

static bool MODEM_API_Check (void) {
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
	sMessage_t okMessage = {.message = (uint8_t*)"AT\r\n", .message_length = sizeof("AT\r\n")};
 8001d7a:	4a16      	ldr	r2, [pc, #88]	@ (8001dd4 <MODEM_API_Check+0x60>)
 8001d7c:	f107 0308 	add.w	r3, r7, #8
 8001d80:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d84:	e883 0003 	stmia.w	r3, {r0, r1}
	UART_API_Send(eUartApiPort_ModemUsart, &okMessage, osWaitForever);
 8001d88:	f107 0308 	add.w	r3, r7, #8
 8001d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d90:	4619      	mov	r1, r3
 8001d92:	2000      	movs	r0, #0
 8001d94:	f000 f9a4 	bl	80020e0 <UART_API_Send>
	osDelay(50);
 8001d98:	2032      	movs	r0, #50	@ 0x32
 8001d9a:	f001 fcc9 	bl	8003730 <osDelay>

	sMessage_t response = {0};
 8001d9e:	463b      	mov	r3, r7
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	605a      	str	r2, [r3, #4]
	UART_API_Receive(eUartApiPort_ModemUsart, &response, 250);
 8001da6:	463b      	mov	r3, r7
 8001da8:	22fa      	movs	r2, #250	@ 0xfa
 8001daa:	4619      	mov	r1, r3
 8001dac:	2000      	movs	r0, #0
 8001dae:	f000 f9f9 	bl	80021a4 <UART_API_Receive>
	if (strncmp((const char*)response.message, (const char*)okMessage.message, okMessage.message_length)) {
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	68b9      	ldr	r1, [r7, #8]
 8001db6:	68fa      	ldr	r2, [r7, #12]
 8001db8:	4618      	mov	r0, r3
 8001dba:	f004 ff68 	bl	8006c8e <strncmp>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <MODEM_API_Check+0x54>
		return false;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	e000      	b.n	8001dca <MODEM_API_Check+0x56>
	}

	return true;
 8001dc8:	2301      	movs	r3, #1
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3710      	adds	r7, #16
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	08008558 	.word	0x08008558

08001dd8 <MODEM_API_MakeCall>:

static bool MODEM_API_MakeCall (uint8_t *phone_number) {
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b08a      	sub	sp, #40	@ 0x28
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
	if (osMutexAcquire(g_dynamic_modem_api.mutex_id, CALL_MUTEX_WAIT_TIME) != osOK) {
 8001de0:	4b21      	ldr	r3, [pc, #132]	@ (8001e68 <MODEM_API_MakeCall+0x90>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f242 7110 	movw	r1, #10000	@ 0x2710
 8001de8:	4618      	mov	r0, r3
 8001dea:	f001 fd42 	bl	8003872 <osMutexAcquire>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <MODEM_API_MakeCall+0x20>
		return false;
 8001df4:	2300      	movs	r3, #0
 8001df6:	e033      	b.n	8001e60 <MODEM_API_MakeCall+0x88>
	}

	uint8_t callCommand[CALL_COMMAND_LENGTH] = "ATD";
 8001df8:	4b1c      	ldr	r3, [pc, #112]	@ (8001e6c <MODEM_API_MakeCall+0x94>)
 8001dfa:	613b      	str	r3, [r7, #16]
 8001dfc:	f107 0314 	add.w	r3, r7, #20
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	605a      	str	r2, [r3, #4]
 8001e06:	609a      	str	r2, [r3, #8]
 8001e08:	60da      	str	r2, [r3, #12]
 8001e0a:	821a      	strh	r2, [r3, #16]
	strncat((char*)callCommand, (char*)phone_number, PHONE_NUMBER_LENGTH);
 8001e0c:	f107 0310 	add.w	r3, r7, #16
 8001e10:	220c      	movs	r2, #12
 8001e12:	6879      	ldr	r1, [r7, #4]
 8001e14:	4618      	mov	r0, r3
 8001e16:	f004 ff27 	bl	8006c68 <strncat>
	strncat((char*)callCommand, (char*)";\r\n", 4);
 8001e1a:	f107 0310 	add.w	r3, r7, #16
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7fe f9de 	bl	80001e0 <strlen>
 8001e24:	4603      	mov	r3, r0
 8001e26:	461a      	mov	r2, r3
 8001e28:	f107 0310 	add.w	r3, r7, #16
 8001e2c:	4413      	add	r3, r2
 8001e2e:	4a10      	ldr	r2, [pc, #64]	@ (8001e70 <MODEM_API_MakeCall+0x98>)
 8001e30:	6810      	ldr	r0, [r2, #0]
 8001e32:	6018      	str	r0, [r3, #0]
	sMessage_t callMessage = {.message = callCommand, .message_length = sizeof(callCommand)};
 8001e34:	f107 0310 	add.w	r3, r7, #16
 8001e38:	60bb      	str	r3, [r7, #8]
 8001e3a:	2316      	movs	r3, #22
 8001e3c:	60fb      	str	r3, [r7, #12]
	UART_API_Send(eUartApiPort_ModemUsart, &callMessage, osWaitForever);
 8001e3e:	f107 0308 	add.w	r3, r7, #8
 8001e42:	f04f 32ff 	mov.w	r2, #4294967295
 8001e46:	4619      	mov	r1, r3
 8001e48:	2000      	movs	r0, #0
 8001e4a:	f000 f949 	bl	80020e0 <UART_API_Send>
	g_dynamic_modem_api.isBusy = false;
 8001e4e:	4b06      	ldr	r3, [pc, #24]	@ (8001e68 <MODEM_API_MakeCall+0x90>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	721a      	strb	r2, [r3, #8]

	osMutexRelease(g_dynamic_modem_api.mutex_id);
 8001e54:	4b04      	ldr	r3, [pc, #16]	@ (8001e68 <MODEM_API_MakeCall+0x90>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f001 fd55 	bl	8003908 <osMutexRelease>
	return true;
 8001e5e:	2301      	movs	r3, #1
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3728      	adds	r7, #40	@ 0x28
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	200000a0 	.word	0x200000a0
 8001e6c:	00445441 	.word	0x00445441
 8001e70:	08008560 	.word	0x08008560

08001e74 <RingBufferIsFull>:
    }

    return r_buffer->count == 0;
}

bool RingBufferIsFull (sRingBuffer_t *r_buffer) {
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
    if (r_buffer == NULL) {
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d101      	bne.n	8001e86 <RingBufferIsFull+0x12>
        return true;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e008      	b.n	8001e98 <RingBufferIsFull+0x24>
    }

    return r_buffer->count == r_buffer->capacity;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	691a      	ldr	r2, [r3, #16]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	bf0c      	ite	eq
 8001e92:	2301      	moveq	r3, #1
 8001e94:	2300      	movne	r3, #0
 8001e96:	b2db      	uxtb	r3, r3
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <RingBufferEnqueue>:


bool RingBufferEnqueue (sRingBuffer_t *r_buffer, uint8_t data) {
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	460b      	mov	r3, r1
 8001eae:	70fb      	strb	r3, [r7, #3]
    if (r_buffer == NULL) {
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d101      	bne.n	8001eba <RingBufferEnqueue+0x16>
        return false;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	e030      	b.n	8001f1c <RingBufferEnqueue+0x78>
    }

    if (RingBufferIsFull(r_buffer)) {
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f7ff ffda 	bl	8001e74 <RingBufferIsFull>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d00b      	beq.n	8001ede <RingBufferEnqueue+0x3a>
        r_buffer->tail = (r_buffer->tail + 1) % r_buffer->capacity;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	3301      	adds	r3, #1
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	6852      	ldr	r2, [r2, #4]
 8001ed0:	fbb3 f1f2 	udiv	r1, r3, r2
 8001ed4:	fb01 f202 	mul.w	r2, r1, r2
 8001ed8:	1a9a      	subs	r2, r3, r2
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	60da      	str	r2, [r3, #12]
    }

    r_buffer->buffer[r_buffer->head] = data;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	78fa      	ldrb	r2, [r7, #3]
 8001eea:	701a      	strb	r2, [r3, #0]
    r_buffer->head = (r_buffer->head + 1) % r_buffer->capacity;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	6852      	ldr	r2, [r2, #4]
 8001ef6:	fbb3 f1f2 	udiv	r1, r3, r2
 8001efa:	fb01 f202 	mul.w	r2, r1, r2
 8001efe:	1a9a      	subs	r2, r3, r2
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	609a      	str	r2, [r3, #8]

    if (r_buffer->count < r_buffer->capacity) {
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	691a      	ldr	r2, [r3, #16]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d204      	bcs.n	8001f1a <RingBufferEnqueue+0x76>
        r_buffer->count++;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	691b      	ldr	r3, [r3, #16]
 8001f14:	1c5a      	adds	r2, r3, #1
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	611a      	str	r2, [r3, #16]
    }

    return true;
 8001f1a:	2301      	movs	r3, #1
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3708      	adds	r7, #8
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	607b      	str	r3, [r7, #4]
 8001f2e:	4b12      	ldr	r3, [pc, #72]	@ (8001f78 <HAL_MspInit+0x54>)
 8001f30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f32:	4a11      	ldr	r2, [pc, #68]	@ (8001f78 <HAL_MspInit+0x54>)
 8001f34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f38:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f3a:	4b0f      	ldr	r3, [pc, #60]	@ (8001f78 <HAL_MspInit+0x54>)
 8001f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f42:	607b      	str	r3, [r7, #4]
 8001f44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f46:	2300      	movs	r3, #0
 8001f48:	603b      	str	r3, [r7, #0]
 8001f4a:	4b0b      	ldr	r3, [pc, #44]	@ (8001f78 <HAL_MspInit+0x54>)
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f4e:	4a0a      	ldr	r2, [pc, #40]	@ (8001f78 <HAL_MspInit+0x54>)
 8001f50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f54:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f56:	4b08      	ldr	r3, [pc, #32]	@ (8001f78 <HAL_MspInit+0x54>)
 8001f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f5e:	603b      	str	r3, [r7, #0]
 8001f60:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f62:	2200      	movs	r2, #0
 8001f64:	210f      	movs	r1, #15
 8001f66:	f06f 0001 	mvn.w	r0, #1
 8001f6a:	f000 fb7b 	bl	8002664 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f6e:	bf00      	nop
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	40023800 	.word	0x40023800

08001f7c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b08c      	sub	sp, #48	@ 0x30
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001f84:	2300      	movs	r3, #0
 8001f86:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	60bb      	str	r3, [r7, #8]
 8001f90:	4b2e      	ldr	r3, [pc, #184]	@ (800204c <HAL_InitTick+0xd0>)
 8001f92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f94:	4a2d      	ldr	r2, [pc, #180]	@ (800204c <HAL_InitTick+0xd0>)
 8001f96:	f043 0301 	orr.w	r3, r3, #1
 8001f9a:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f9c:	4b2b      	ldr	r3, [pc, #172]	@ (800204c <HAL_InitTick+0xd0>)
 8001f9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fa0:	f003 0301 	and.w	r3, r3, #1
 8001fa4:	60bb      	str	r3, [r7, #8]
 8001fa6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001fa8:	f107 020c 	add.w	r2, r7, #12
 8001fac:	f107 0310 	add.w	r3, r7, #16
 8001fb0:	4611      	mov	r1, r2
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f000 fba0 	bl	80026f8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001fb8:	f000 fb8a 	bl	80026d0 <HAL_RCC_GetPCLK2Freq>
 8001fbc:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001fbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fc0:	4a23      	ldr	r2, [pc, #140]	@ (8002050 <HAL_InitTick+0xd4>)
 8001fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc6:	0c9b      	lsrs	r3, r3, #18
 8001fc8:	3b01      	subs	r3, #1
 8001fca:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001fcc:	4b21      	ldr	r3, [pc, #132]	@ (8002054 <HAL_InitTick+0xd8>)
 8001fce:	4a22      	ldr	r2, [pc, #136]	@ (8002058 <HAL_InitTick+0xdc>)
 8001fd0:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001fd2:	4b20      	ldr	r3, [pc, #128]	@ (8002054 <HAL_InitTick+0xd8>)
 8001fd4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001fd8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001fda:	4a1e      	ldr	r2, [pc, #120]	@ (8002054 <HAL_InitTick+0xd8>)
 8001fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fde:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001fe0:	4b1c      	ldr	r3, [pc, #112]	@ (8002054 <HAL_InitTick+0xd8>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fe6:	4b1b      	ldr	r3, [pc, #108]	@ (8002054 <HAL_InitTick+0xd8>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fec:	4b19      	ldr	r3, [pc, #100]	@ (8002054 <HAL_InitTick+0xd8>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001ff2:	4818      	ldr	r0, [pc, #96]	@ (8002054 <HAL_InitTick+0xd8>)
 8001ff4:	f000 fbb2 	bl	800275c <HAL_TIM_Base_Init>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001ffe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002002:	2b00      	cmp	r3, #0
 8002004:	d11b      	bne.n	800203e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002006:	4813      	ldr	r0, [pc, #76]	@ (8002054 <HAL_InitTick+0xd8>)
 8002008:	f000 fc02 	bl	8002810 <HAL_TIM_Base_Start_IT>
 800200c:	4603      	mov	r3, r0
 800200e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8002012:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002016:	2b00      	cmp	r3, #0
 8002018:	d111      	bne.n	800203e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800201a:	2019      	movs	r0, #25
 800201c:	f000 fb3e 	bl	800269c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2b0f      	cmp	r3, #15
 8002024:	d808      	bhi.n	8002038 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8002026:	2200      	movs	r2, #0
 8002028:	6879      	ldr	r1, [r7, #4]
 800202a:	2019      	movs	r0, #25
 800202c:	f000 fb1a 	bl	8002664 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002030:	4a0a      	ldr	r2, [pc, #40]	@ (800205c <HAL_InitTick+0xe0>)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6013      	str	r3, [r2, #0]
 8002036:	e002      	b.n	800203e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800203e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002042:	4618      	mov	r0, r3
 8002044:	3730      	adds	r7, #48	@ 0x30
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	40023800 	.word	0x40023800
 8002050:	431bde83 	.word	0x431bde83
 8002054:	200000ac 	.word	0x200000ac
 8002058:	40010000 	.word	0x40010000
 800205c:	2000001c 	.word	0x2000001c

08002060 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002064:	bf00      	nop
 8002066:	e7fd      	b.n	8002064 <NMI_Handler+0x4>

08002068 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800206c:	bf00      	nop
 800206e:	e7fd      	b.n	800206c <HardFault_Handler+0x4>

08002070 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002074:	bf00      	nop
 8002076:	e7fd      	b.n	8002074 <MemManage_Handler+0x4>

08002078 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800207c:	bf00      	nop
 800207e:	e7fd      	b.n	800207c <BusFault_Handler+0x4>

08002080 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002084:	bf00      	nop
 8002086:	e7fd      	b.n	8002084 <UsageFault_Handler+0x4>

08002088 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800208c:	bf00      	nop
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
	...

08002098 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800209c:	4802      	ldr	r0, [pc, #8]	@ (80020a8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800209e:	f000 fc19 	bl	80028d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80020a2:	bf00      	nop
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	200000ac 	.word	0x200000ac

080020ac <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80020b0:	bf00      	nop
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
	...

080020bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020c0:	4b06      	ldr	r3, [pc, #24]	@ (80020dc <SystemInit+0x20>)
 80020c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020c6:	4a05      	ldr	r2, [pc, #20]	@ (80020dc <SystemInit+0x20>)
 80020c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80020cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020d0:	bf00      	nop
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	e000ed00 	.word	0xe000ed00

080020e0 <UART_API_Send>:

    g_dynamic_uart_api_lut[port].is_initialized = true;
    return true;
}

bool UART_API_Send (eUartApiPort_t port, sMessage_t *message, uint32_t wait_time) {
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	4603      	mov	r3, r0
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	607a      	str	r2, [r7, #4]
 80020ec:	73fb      	strb	r3, [r7, #15]
    if ((port < eUartApiPort_First) || (port >= eUartApiPort_Last) || (message == NULL)) {
 80020ee:	7bfb      	ldrb	r3, [r7, #15]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d102      	bne.n	80020fa <UART_API_Send+0x1a>
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d101      	bne.n	80020fe <UART_API_Send+0x1e>
        return false;
 80020fa:	2300      	movs	r3, #0
 80020fc:	e04c      	b.n	8002198 <UART_API_Send+0xb8>
    }

    if (g_dynamic_uart_api_lut[port].mutex_id == NULL) {
 80020fe:	7bfa      	ldrb	r2, [r7, #15]
 8002100:	4927      	ldr	r1, [pc, #156]	@ (80021a0 <UART_API_Send+0xc0>)
 8002102:	4613      	mov	r3, r2
 8002104:	00db      	lsls	r3, r3, #3
 8002106:	1a9b      	subs	r3, r3, r2
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	440b      	add	r3, r1
 800210c:	3318      	adds	r3, #24
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d101      	bne.n	8002118 <UART_API_Send+0x38>
    	return false;
 8002114:	2300      	movs	r3, #0
 8002116:	e03f      	b.n	8002198 <UART_API_Send+0xb8>
    }

    if (osMutexAcquire(g_dynamic_uart_api_lut[port].mutex_id, wait_time) != osOK) {
 8002118:	7bfa      	ldrb	r2, [r7, #15]
 800211a:	4921      	ldr	r1, [pc, #132]	@ (80021a0 <UART_API_Send+0xc0>)
 800211c:	4613      	mov	r3, r2
 800211e:	00db      	lsls	r3, r3, #3
 8002120:	1a9b      	subs	r3, r3, r2
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	440b      	add	r3, r1
 8002126:	3318      	adds	r3, #24
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	6879      	ldr	r1, [r7, #4]
 800212c:	4618      	mov	r0, r3
 800212e:	f001 fba0 	bl	8003872 <osMutexAcquire>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <UART_API_Send+0x5c>
    	return false;
 8002138:	2300      	movs	r3, #0
 800213a:	e02d      	b.n	8002198 <UART_API_Send+0xb8>
    }

    if (UART_Driver_TransmitMultipleBytes(port, message->message, message->message_length) == false) {
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	6819      	ldr	r1, [r3, #0]
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	685a      	ldr	r2, [r3, #4]
 8002144:	7bfb      	ldrb	r3, [r7, #15]
 8002146:	4618      	mov	r0, r3
 8002148:	f000 f94a 	bl	80023e0 <UART_Driver_TransmitMultipleBytes>
 800214c:	4603      	mov	r3, r0
 800214e:	f083 0301 	eor.w	r3, r3, #1
 8002152:	b2db      	uxtb	r3, r3
 8002154:	2b00      	cmp	r3, #0
 8002156:	d00d      	beq.n	8002174 <UART_API_Send+0x94>
        osMutexRelease(g_dynamic_uart_api_lut[port].mutex_id);
 8002158:	7bfa      	ldrb	r2, [r7, #15]
 800215a:	4911      	ldr	r1, [pc, #68]	@ (80021a0 <UART_API_Send+0xc0>)
 800215c:	4613      	mov	r3, r2
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	1a9b      	subs	r3, r3, r2
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	440b      	add	r3, r1
 8002166:	3318      	adds	r3, #24
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4618      	mov	r0, r3
 800216c:	f001 fbcc 	bl	8003908 <osMutexRelease>
    	return false;
 8002170:	2300      	movs	r3, #0
 8002172:	e011      	b.n	8002198 <UART_API_Send+0xb8>
    }

    if (osMutexRelease(g_dynamic_uart_api_lut[port].mutex_id) != osOK) {
 8002174:	7bfa      	ldrb	r2, [r7, #15]
 8002176:	490a      	ldr	r1, [pc, #40]	@ (80021a0 <UART_API_Send+0xc0>)
 8002178:	4613      	mov	r3, r2
 800217a:	00db      	lsls	r3, r3, #3
 800217c:	1a9b      	subs	r3, r3, r2
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	440b      	add	r3, r1
 8002182:	3318      	adds	r3, #24
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4618      	mov	r0, r3
 8002188:	f001 fbbe 	bl	8003908 <osMutexRelease>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d001      	beq.n	8002196 <UART_API_Send+0xb6>
    	return false;
 8002192:	2300      	movs	r3, #0
 8002194:	e000      	b.n	8002198 <UART_API_Send+0xb8>
    }

    return true;
 8002196:	2301      	movs	r3, #1
}
 8002198:	4618      	mov	r0, r3
 800219a:	3710      	adds	r7, #16
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	200000f4 	.word	0x200000f4

080021a4 <UART_API_Receive>:


bool UART_API_Receive (eUartApiPort_t port, sMessage_t *message, uint32_t wait_time) {
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b086      	sub	sp, #24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	4603      	mov	r3, r0
 80021ac:	60b9      	str	r1, [r7, #8]
 80021ae:	607a      	str	r2, [r7, #4]
 80021b0:	73fb      	strb	r3, [r7, #15]
    if ((port < eUartApiPort_First) || (port >= eUartApiPort_Last) || (message == NULL) || (wait_time <= 0)) {
 80021b2:	7bfb      	ldrb	r3, [r7, #15]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d105      	bne.n	80021c4 <UART_API_Receive+0x20>
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d002      	beq.n	80021c4 <UART_API_Receive+0x20>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d101      	bne.n	80021c8 <UART_API_Receive+0x24>
        return false;
 80021c4:	2300      	movs	r3, #0
 80021c6:	e013      	b.n	80021f0 <UART_API_Receive+0x4c>
    }

    osStatus_t status = osMessageQueueGet(g_dynamic_uart_api_lut[port].message_queue_id, message, MESSAGE_PRIORITY, wait_time);
 80021c8:	7bfa      	ldrb	r2, [r7, #15]
 80021ca:	490b      	ldr	r1, [pc, #44]	@ (80021f8 <UART_API_Receive+0x54>)
 80021cc:	4613      	mov	r3, r2
 80021ce:	00db      	lsls	r3, r3, #3
 80021d0:	1a9b      	subs	r3, r3, r2
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	440b      	add	r3, r1
 80021d6:	6818      	ldr	r0, [r3, #0]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	68b9      	ldr	r1, [r7, #8]
 80021de:	f001 fca3 	bl	8003b28 <osMessageQueueGet>
 80021e2:	6178      	str	r0, [r7, #20]
    if (status != osOK) {
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <UART_API_Receive+0x4a>
        return false;
 80021ea:	2300      	movs	r3, #0
 80021ec:	e000      	b.n	80021f0 <UART_API_Receive+0x4c>
    }

    return true;
 80021ee:	2301      	movs	r3, #1
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3718      	adds	r7, #24
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	200000f4 	.word	0x200000f4

080021fc <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(const USART_TypeDef *USARTx)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0320 	and.w	r3, r3, #32
 800220c:	2b20      	cmp	r3, #32
 800220e:	bf0c      	ite	eq
 8002210:	2301      	moveq	r3, #1
 8002212:	2300      	movne	r3, #0
 8002214:	b2db      	uxtb	r3, r3
}
 8002216:	4618      	mov	r0, r3
 8002218:	370c      	adds	r7, #12
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr

08002222 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 8002222:	b480      	push	{r7}
 8002224:	b083      	sub	sp, #12
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002232:	2b80      	cmp	r3, #128	@ 0x80
 8002234:	bf0c      	ite	eq
 8002236:	2301      	moveq	r3, #1
 8002238:	2300      	movne	r3, #0
 800223a:	b2db      	uxtb	r3, r3
}
 800223c:	4618      	mov	r0, r3
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <LL_USART_IsEnabledIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_IsEnabledIT_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE(const USART_TypeDef *USARTx)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	f003 0320 	and.w	r3, r3, #32
 8002258:	2b20      	cmp	r3, #32
 800225a:	bf0c      	ite	eq
 800225c:	2301      	moveq	r3, #1
 800225e:	2300      	movne	r3, #0
 8002260:	b2db      	uxtb	r3, r3
}
 8002262:	4618      	mov	r0, r3
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr

0800226e <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 800226e:	b480      	push	{r7}
 8002270:	b083      	sub	sp, #12
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	b2db      	uxtb	r3, r3
}
 800227c:	4618      	mov	r0, r3
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	460b      	mov	r3, r1
 8002292:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 8002294:	78fa      	ldrb	r2, [r7, #3]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	605a      	str	r2, [r3, #4]
}
 800229a:	bf00      	nop
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
	...

080022a8 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80022b0:	4b08      	ldr	r3, [pc, #32]	@ (80022d4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80022b2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80022b4:	4907      	ldr	r1, [pc, #28]	@ (80022d4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80022bc:	4b05      	ldr	r3, [pc, #20]	@ (80022d4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80022be:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	4013      	ands	r3, r2
 80022c4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80022c6:	68fb      	ldr	r3, [r7, #12]
}
 80022c8:	bf00      	nop
 80022ca:	3714      	adds	r7, #20
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr
 80022d4:	40023800 	.word	0x40023800

080022d8 <UART_Driver_IRQReceive>:
 *********************************************************************************************************************/
static void UART_Driver_IRQReceive (eUartPort_t port);
/**********************************************************************************************************************
 * Definitions of private functions
 *********************************************************************************************************************/
static void UART_Driver_IRQReceive (eUartPort_t port) {
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	4603      	mov	r3, r0
 80022e0:	71fb      	strb	r3, [r7, #7]
    if ((port < eUartPort_First) || (port >= eUartPort_Last)) {
 80022e2:	79fb      	ldrb	r3, [r7, #7]
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d838      	bhi.n	800235a <UART_Driver_IRQReceive+0x82>
        return;
    }

    if (g_static_uart_rb[port] != NULL) {
 80022e8:	79fb      	ldrb	r3, [r7, #7]
 80022ea:	4a1f      	ldr	r2, [pc, #124]	@ (8002368 <UART_Driver_IRQReceive+0x90>)
 80022ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d034      	beq.n	800235e <UART_Driver_IRQReceive+0x86>
        if ((LL_USART_IsActiveFlag_RXNE(g_static_uart_lut[port].port)) && (LL_USART_IsEnabledIT_RXNE(g_static_uart_lut[port].port))) {
 80022f4:	79fa      	ldrb	r2, [r7, #7]
 80022f6:	491d      	ldr	r1, [pc, #116]	@ (800236c <UART_Driver_IRQReceive+0x94>)
 80022f8:	4613      	mov	r3, r2
 80022fa:	005b      	lsls	r3, r3, #1
 80022fc:	4413      	add	r3, r2
 80022fe:	011b      	lsls	r3, r3, #4
 8002300:	440b      	add	r3, r1
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff ff79 	bl	80021fc <LL_USART_IsActiveFlag_RXNE>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d026      	beq.n	800235e <UART_Driver_IRQReceive+0x86>
 8002310:	79fa      	ldrb	r2, [r7, #7]
 8002312:	4916      	ldr	r1, [pc, #88]	@ (800236c <UART_Driver_IRQReceive+0x94>)
 8002314:	4613      	mov	r3, r2
 8002316:	005b      	lsls	r3, r3, #1
 8002318:	4413      	add	r3, r2
 800231a:	011b      	lsls	r3, r3, #4
 800231c:	440b      	add	r3, r1
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4618      	mov	r0, r3
 8002322:	f7ff ff91 	bl	8002248 <LL_USART_IsEnabledIT_RXNE>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d018      	beq.n	800235e <UART_Driver_IRQReceive+0x86>
            uint8_t data = LL_USART_ReceiveData8(g_static_uart_lut[port].port);
 800232c:	79fa      	ldrb	r2, [r7, #7]
 800232e:	490f      	ldr	r1, [pc, #60]	@ (800236c <UART_Driver_IRQReceive+0x94>)
 8002330:	4613      	mov	r3, r2
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	4413      	add	r3, r2
 8002336:	011b      	lsls	r3, r3, #4
 8002338:	440b      	add	r3, r1
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4618      	mov	r0, r3
 800233e:	f7ff ff96 	bl	800226e <LL_USART_ReceiveData8>
 8002342:	4603      	mov	r3, r0
 8002344:	73fb      	strb	r3, [r7, #15]
            RingBufferEnqueue(g_static_uart_rb[port], data);
 8002346:	79fb      	ldrb	r3, [r7, #7]
 8002348:	4a07      	ldr	r2, [pc, #28]	@ (8002368 <UART_Driver_IRQReceive+0x90>)
 800234a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800234e:	7bfa      	ldrb	r2, [r7, #15]
 8002350:	4611      	mov	r1, r2
 8002352:	4618      	mov	r0, r3
 8002354:	f7ff fda6 	bl	8001ea4 <RingBufferEnqueue>
        }
    }

    return;
 8002358:	e001      	b.n	800235e <UART_Driver_IRQReceive+0x86>
        return;
 800235a:	bf00      	nop
 800235c:	e000      	b.n	8002360 <UART_Driver_IRQReceive+0x88>
    return;
 800235e:	bf00      	nop
}
 8002360:	3710      	adds	r7, #16
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	20000110 	.word	0x20000110
 800236c:	0800870c 	.word	0x0800870c

08002370 <USART1_IRQHandler>:

void USART1_IRQHandler (void) {
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
    UART_Driver_IRQReceive(eUartPort_Usart1);
 8002374:	2000      	movs	r0, #0
 8002376:	f7ff ffaf 	bl	80022d8 <UART_Driver_IRQReceive>
}
 800237a:	bf00      	nop
 800237c:	bd80      	pop	{r7, pc}
	...

08002380 <UART_Driver_TransmitByte>:
    }

    return true;
}

bool UART_Driver_TransmitByte (eUartPort_t port, uint8_t data) {
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	4603      	mov	r3, r0
 8002388:	460a      	mov	r2, r1
 800238a:	71fb      	strb	r3, [r7, #7]
 800238c:	4613      	mov	r3, r2
 800238e:	71bb      	strb	r3, [r7, #6]
    if ((port < eUartPort_First) || (port >= eUartPort_Last)) {
 8002390:	79fb      	ldrb	r3, [r7, #7]
 8002392:	2b01      	cmp	r3, #1
 8002394:	d901      	bls.n	800239a <UART_Driver_TransmitByte+0x1a>
        return false;
 8002396:	2300      	movs	r3, #0
 8002398:	e01c      	b.n	80023d4 <UART_Driver_TransmitByte+0x54>
    }

    while (!LL_USART_IsActiveFlag_TXE(g_static_uart_lut[port].port)) {};
 800239a:	bf00      	nop
 800239c:	79fa      	ldrb	r2, [r7, #7]
 800239e:	490f      	ldr	r1, [pc, #60]	@ (80023dc <UART_Driver_TransmitByte+0x5c>)
 80023a0:	4613      	mov	r3, r2
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	4413      	add	r3, r2
 80023a6:	011b      	lsls	r3, r3, #4
 80023a8:	440b      	add	r3, r1
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7ff ff38 	bl	8002222 <LL_USART_IsActiveFlag_TXE>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d0f1      	beq.n	800239c <UART_Driver_TransmitByte+0x1c>
    LL_USART_TransmitData8(g_static_uart_lut[port].port, data);
 80023b8:	79fa      	ldrb	r2, [r7, #7]
 80023ba:	4908      	ldr	r1, [pc, #32]	@ (80023dc <UART_Driver_TransmitByte+0x5c>)
 80023bc:	4613      	mov	r3, r2
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	4413      	add	r3, r2
 80023c2:	011b      	lsls	r3, r3, #4
 80023c4:	440b      	add	r3, r1
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	79ba      	ldrb	r2, [r7, #6]
 80023ca:	4611      	mov	r1, r2
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7ff ff5b 	bl	8002288 <LL_USART_TransmitData8>

    return true;
 80023d2:	2301      	movs	r3, #1
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3708      	adds	r7, #8
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	0800870c 	.word	0x0800870c

080023e0 <UART_Driver_TransmitMultipleBytes>:

bool UART_Driver_TransmitMultipleBytes (eUartPort_t port, uint8_t *data, size_t size) {
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b086      	sub	sp, #24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	4603      	mov	r3, r0
 80023e8:	60b9      	str	r1, [r7, #8]
 80023ea:	607a      	str	r2, [r7, #4]
 80023ec:	73fb      	strb	r3, [r7, #15]
    if ((port < eUartPort_First) || (port >= eUartPort_Last) || (data == NULL) || (size == 0)) {
 80023ee:	7bfb      	ldrb	r3, [r7, #15]
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d805      	bhi.n	8002400 <UART_Driver_TransmitMultipleBytes+0x20>
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d002      	beq.n	8002400 <UART_Driver_TransmitMultipleBytes+0x20>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d101      	bne.n	8002404 <UART_Driver_TransmitMultipleBytes+0x24>
        return false;
 8002400:	2300      	movs	r3, #0
 8002402:	e013      	b.n	800242c <UART_Driver_TransmitMultipleBytes+0x4c>
    }

    for (size_t i = 0; i < size; i++) {
 8002404:	2300      	movs	r3, #0
 8002406:	617b      	str	r3, [r7, #20]
 8002408:	e00b      	b.n	8002422 <UART_Driver_TransmitMultipleBytes+0x42>
        UART_Driver_TransmitByte(port, data[i]);
 800240a:	68ba      	ldr	r2, [r7, #8]
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	4413      	add	r3, r2
 8002410:	781a      	ldrb	r2, [r3, #0]
 8002412:	7bfb      	ldrb	r3, [r7, #15]
 8002414:	4611      	mov	r1, r2
 8002416:	4618      	mov	r0, r3
 8002418:	f7ff ffb2 	bl	8002380 <UART_Driver_TransmitByte>
    for (size_t i = 0; i < size; i++) {
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	3301      	adds	r3, #1
 8002420:	617b      	str	r3, [r7, #20]
 8002422:	697a      	ldr	r2, [r7, #20]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	429a      	cmp	r2, r3
 8002428:	d3ef      	bcc.n	800240a <UART_Driver_TransmitMultipleBytes+0x2a>
    }

    return true;
 800242a:	2301      	movs	r3, #1
}
 800242c:	4618      	mov	r0, r3
 800242e:	3718      	adds	r7, #24
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}

08002434 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002434:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800246c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002438:	f7ff fe40 	bl	80020bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800243c:	480c      	ldr	r0, [pc, #48]	@ (8002470 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800243e:	490d      	ldr	r1, [pc, #52]	@ (8002474 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002440:	4a0d      	ldr	r2, [pc, #52]	@ (8002478 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002442:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002444:	e002      	b.n	800244c <LoopCopyDataInit>

08002446 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002446:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002448:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800244a:	3304      	adds	r3, #4

0800244c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800244c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800244e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002450:	d3f9      	bcc.n	8002446 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002452:	4a0a      	ldr	r2, [pc, #40]	@ (800247c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002454:	4c0a      	ldr	r4, [pc, #40]	@ (8002480 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002456:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002458:	e001      	b.n	800245e <LoopFillZerobss>

0800245a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800245a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800245c:	3204      	adds	r2, #4

0800245e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800245e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002460:	d3fb      	bcc.n	800245a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8002462:	f004 fc2d 	bl	8006cc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002466:	f7ff fb49 	bl	8001afc <main>
  bx  lr    
 800246a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800246c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002470:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002474:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002478:	080089d8 	.word	0x080089d8
  ldr r2, =_sbss
 800247c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002480:	20004ba4 	.word	0x20004ba4

08002484 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002484:	e7fe      	b.n	8002484 <ADC_IRQHandler>
	...

08002488 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800248c:	4b0e      	ldr	r3, [pc, #56]	@ (80024c8 <HAL_Init+0x40>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a0d      	ldr	r2, [pc, #52]	@ (80024c8 <HAL_Init+0x40>)
 8002492:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002496:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002498:	4b0b      	ldr	r3, [pc, #44]	@ (80024c8 <HAL_Init+0x40>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a0a      	ldr	r2, [pc, #40]	@ (80024c8 <HAL_Init+0x40>)
 800249e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80024a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024a4:	4b08      	ldr	r3, [pc, #32]	@ (80024c8 <HAL_Init+0x40>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a07      	ldr	r2, [pc, #28]	@ (80024c8 <HAL_Init+0x40>)
 80024aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024b0:	2003      	movs	r0, #3
 80024b2:	f000 f8cc 	bl	800264e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024b6:	200f      	movs	r0, #15
 80024b8:	f7ff fd60 	bl	8001f7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024bc:	f7ff fd32 	bl	8001f24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	40023c00 	.word	0x40023c00

080024cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024d0:	4b06      	ldr	r3, [pc, #24]	@ (80024ec <HAL_IncTick+0x20>)
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	461a      	mov	r2, r3
 80024d6:	4b06      	ldr	r3, [pc, #24]	@ (80024f0 <HAL_IncTick+0x24>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4413      	add	r3, r2
 80024dc:	4a04      	ldr	r2, [pc, #16]	@ (80024f0 <HAL_IncTick+0x24>)
 80024de:	6013      	str	r3, [r2, #0]
}
 80024e0:	bf00      	nop
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	20000020 	.word	0x20000020
 80024f0:	20000118 	.word	0x20000118

080024f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b085      	sub	sp, #20
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f003 0307 	and.w	r3, r3, #7
 8002502:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002504:	4b0c      	ldr	r3, [pc, #48]	@ (8002538 <__NVIC_SetPriorityGrouping+0x44>)
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800250a:	68ba      	ldr	r2, [r7, #8]
 800250c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002510:	4013      	ands	r3, r2
 8002512:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800251c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002520:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002524:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002526:	4a04      	ldr	r2, [pc, #16]	@ (8002538 <__NVIC_SetPriorityGrouping+0x44>)
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	60d3      	str	r3, [r2, #12]
}
 800252c:	bf00      	nop
 800252e:	3714      	adds	r7, #20
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr
 8002538:	e000ed00 	.word	0xe000ed00

0800253c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002540:	4b04      	ldr	r3, [pc, #16]	@ (8002554 <__NVIC_GetPriorityGrouping+0x18>)
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	0a1b      	lsrs	r3, r3, #8
 8002546:	f003 0307 	and.w	r3, r3, #7
}
 800254a:	4618      	mov	r0, r3
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr
 8002554:	e000ed00 	.word	0xe000ed00

08002558 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	4603      	mov	r3, r0
 8002560:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002566:	2b00      	cmp	r3, #0
 8002568:	db0b      	blt.n	8002582 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800256a:	79fb      	ldrb	r3, [r7, #7]
 800256c:	f003 021f 	and.w	r2, r3, #31
 8002570:	4907      	ldr	r1, [pc, #28]	@ (8002590 <__NVIC_EnableIRQ+0x38>)
 8002572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002576:	095b      	lsrs	r3, r3, #5
 8002578:	2001      	movs	r0, #1
 800257a:	fa00 f202 	lsl.w	r2, r0, r2
 800257e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002582:	bf00      	nop
 8002584:	370c      	adds	r7, #12
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	e000e100 	.word	0xe000e100

08002594 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	4603      	mov	r3, r0
 800259c:	6039      	str	r1, [r7, #0]
 800259e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	db0a      	blt.n	80025be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	b2da      	uxtb	r2, r3
 80025ac:	490c      	ldr	r1, [pc, #48]	@ (80025e0 <__NVIC_SetPriority+0x4c>)
 80025ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b2:	0112      	lsls	r2, r2, #4
 80025b4:	b2d2      	uxtb	r2, r2
 80025b6:	440b      	add	r3, r1
 80025b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025bc:	e00a      	b.n	80025d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	b2da      	uxtb	r2, r3
 80025c2:	4908      	ldr	r1, [pc, #32]	@ (80025e4 <__NVIC_SetPriority+0x50>)
 80025c4:	79fb      	ldrb	r3, [r7, #7]
 80025c6:	f003 030f 	and.w	r3, r3, #15
 80025ca:	3b04      	subs	r3, #4
 80025cc:	0112      	lsls	r2, r2, #4
 80025ce:	b2d2      	uxtb	r2, r2
 80025d0:	440b      	add	r3, r1
 80025d2:	761a      	strb	r2, [r3, #24]
}
 80025d4:	bf00      	nop
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr
 80025e0:	e000e100 	.word	0xe000e100
 80025e4:	e000ed00 	.word	0xe000ed00

080025e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b089      	sub	sp, #36	@ 0x24
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f003 0307 	and.w	r3, r3, #7
 80025fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	f1c3 0307 	rsb	r3, r3, #7
 8002602:	2b04      	cmp	r3, #4
 8002604:	bf28      	it	cs
 8002606:	2304      	movcs	r3, #4
 8002608:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	3304      	adds	r3, #4
 800260e:	2b06      	cmp	r3, #6
 8002610:	d902      	bls.n	8002618 <NVIC_EncodePriority+0x30>
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	3b03      	subs	r3, #3
 8002616:	e000      	b.n	800261a <NVIC_EncodePriority+0x32>
 8002618:	2300      	movs	r3, #0
 800261a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800261c:	f04f 32ff 	mov.w	r2, #4294967295
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	fa02 f303 	lsl.w	r3, r2, r3
 8002626:	43da      	mvns	r2, r3
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	401a      	ands	r2, r3
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002630:	f04f 31ff 	mov.w	r1, #4294967295
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	fa01 f303 	lsl.w	r3, r1, r3
 800263a:	43d9      	mvns	r1, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002640:	4313      	orrs	r3, r2
         );
}
 8002642:	4618      	mov	r0, r3
 8002644:	3724      	adds	r7, #36	@ 0x24
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr

0800264e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800264e:	b580      	push	{r7, lr}
 8002650:	b082      	sub	sp, #8
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f7ff ff4c 	bl	80024f4 <__NVIC_SetPriorityGrouping>
}
 800265c:	bf00      	nop
 800265e:	3708      	adds	r7, #8
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}

08002664 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002664:	b580      	push	{r7, lr}
 8002666:	b086      	sub	sp, #24
 8002668:	af00      	add	r7, sp, #0
 800266a:	4603      	mov	r3, r0
 800266c:	60b9      	str	r1, [r7, #8]
 800266e:	607a      	str	r2, [r7, #4]
 8002670:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002672:	2300      	movs	r3, #0
 8002674:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002676:	f7ff ff61 	bl	800253c <__NVIC_GetPriorityGrouping>
 800267a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	68b9      	ldr	r1, [r7, #8]
 8002680:	6978      	ldr	r0, [r7, #20]
 8002682:	f7ff ffb1 	bl	80025e8 <NVIC_EncodePriority>
 8002686:	4602      	mov	r2, r0
 8002688:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800268c:	4611      	mov	r1, r2
 800268e:	4618      	mov	r0, r3
 8002690:	f7ff ff80 	bl	8002594 <__NVIC_SetPriority>
}
 8002694:	bf00      	nop
 8002696:	3718      	adds	r7, #24
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}

0800269c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	4603      	mov	r3, r0
 80026a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7ff ff54 	bl	8002558 <__NVIC_EnableIRQ>
}
 80026b0:	bf00      	nop
 80026b2:	3708      	adds	r7, #8
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026bc:	4b03      	ldr	r3, [pc, #12]	@ (80026cc <HAL_RCC_GetHCLKFreq+0x14>)
 80026be:	681b      	ldr	r3, [r3, #0]
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	20000018 	.word	0x20000018

080026d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80026d4:	f7ff fff0 	bl	80026b8 <HAL_RCC_GetHCLKFreq>
 80026d8:	4602      	mov	r2, r0
 80026da:	4b05      	ldr	r3, [pc, #20]	@ (80026f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	0b5b      	lsrs	r3, r3, #13
 80026e0:	f003 0307 	and.w	r3, r3, #7
 80026e4:	4903      	ldr	r1, [pc, #12]	@ (80026f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026e6:	5ccb      	ldrb	r3, [r1, r3]
 80026e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	40023800 	.word	0x40023800
 80026f4:	08008704 	.word	0x08008704

080026f8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	220f      	movs	r2, #15
 8002706:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002708:	4b12      	ldr	r3, [pc, #72]	@ (8002754 <HAL_RCC_GetClockConfig+0x5c>)
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f003 0203 	and.w	r2, r3, #3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002714:	4b0f      	ldr	r3, [pc, #60]	@ (8002754 <HAL_RCC_GetClockConfig+0x5c>)
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002720:	4b0c      	ldr	r3, [pc, #48]	@ (8002754 <HAL_RCC_GetClockConfig+0x5c>)
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800272c:	4b09      	ldr	r3, [pc, #36]	@ (8002754 <HAL_RCC_GetClockConfig+0x5c>)
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	08db      	lsrs	r3, r3, #3
 8002732:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800273a:	4b07      	ldr	r3, [pc, #28]	@ (8002758 <HAL_RCC_GetClockConfig+0x60>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0207 	and.w	r2, r3, #7
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	601a      	str	r2, [r3, #0]
}
 8002746:	bf00      	nop
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	40023800 	.word	0x40023800
 8002758:	40023c00 	.word	0x40023c00

0800275c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d101      	bne.n	800276e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e041      	b.n	80027f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002774:	b2db      	uxtb	r3, r3
 8002776:	2b00      	cmp	r3, #0
 8002778:	d106      	bne.n	8002788 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f000 f839 	bl	80027fa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2202      	movs	r2, #2
 800278c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	3304      	adds	r3, #4
 8002798:	4619      	mov	r1, r3
 800279a:	4610      	mov	r0, r2
 800279c:	f000 f9b2 	bl	8002b04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2201      	movs	r2, #1
 80027b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2201      	movs	r2, #1
 80027c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3708      	adds	r7, #8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}

080027fa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80027fa:	b480      	push	{r7}
 80027fc:	b083      	sub	sp, #12
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002802:	bf00      	nop
 8002804:	370c      	adds	r7, #12
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
	...

08002810 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002810:	b480      	push	{r7}
 8002812:	b085      	sub	sp, #20
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800281e:	b2db      	uxtb	r3, r3
 8002820:	2b01      	cmp	r3, #1
 8002822:	d001      	beq.n	8002828 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e044      	b.n	80028b2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2202      	movs	r2, #2
 800282c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	68da      	ldr	r2, [r3, #12]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f042 0201 	orr.w	r2, r2, #1
 800283e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a1e      	ldr	r2, [pc, #120]	@ (80028c0 <HAL_TIM_Base_Start_IT+0xb0>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d018      	beq.n	800287c <HAL_TIM_Base_Start_IT+0x6c>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002852:	d013      	beq.n	800287c <HAL_TIM_Base_Start_IT+0x6c>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a1a      	ldr	r2, [pc, #104]	@ (80028c4 <HAL_TIM_Base_Start_IT+0xb4>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d00e      	beq.n	800287c <HAL_TIM_Base_Start_IT+0x6c>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a19      	ldr	r2, [pc, #100]	@ (80028c8 <HAL_TIM_Base_Start_IT+0xb8>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d009      	beq.n	800287c <HAL_TIM_Base_Start_IT+0x6c>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a17      	ldr	r2, [pc, #92]	@ (80028cc <HAL_TIM_Base_Start_IT+0xbc>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d004      	beq.n	800287c <HAL_TIM_Base_Start_IT+0x6c>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a16      	ldr	r2, [pc, #88]	@ (80028d0 <HAL_TIM_Base_Start_IT+0xc0>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d111      	bne.n	80028a0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f003 0307 	and.w	r3, r3, #7
 8002886:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2b06      	cmp	r3, #6
 800288c:	d010      	beq.n	80028b0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f042 0201 	orr.w	r2, r2, #1
 800289c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800289e:	e007      	b.n	80028b0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f042 0201 	orr.w	r2, r2, #1
 80028ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3714      	adds	r7, #20
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	40010000 	.word	0x40010000
 80028c4:	40000400 	.word	0x40000400
 80028c8:	40000800 	.word	0x40000800
 80028cc:	40000c00 	.word	0x40000c00
 80028d0:	40014000 	.word	0x40014000

080028d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	691b      	ldr	r3, [r3, #16]
 80028ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	f003 0302 	and.w	r3, r3, #2
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d020      	beq.n	8002938 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f003 0302 	and.w	r3, r3, #2
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d01b      	beq.n	8002938 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f06f 0202 	mvn.w	r2, #2
 8002908:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2201      	movs	r2, #1
 800290e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	f003 0303 	and.w	r3, r3, #3
 800291a:	2b00      	cmp	r3, #0
 800291c:	d003      	beq.n	8002926 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f000 f8d2 	bl	8002ac8 <HAL_TIM_IC_CaptureCallback>
 8002924:	e005      	b.n	8002932 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f000 f8c4 	bl	8002ab4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f000 f8d5 	bl	8002adc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	f003 0304 	and.w	r3, r3, #4
 800293e:	2b00      	cmp	r3, #0
 8002940:	d020      	beq.n	8002984 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	f003 0304 	and.w	r3, r3, #4
 8002948:	2b00      	cmp	r3, #0
 800294a:	d01b      	beq.n	8002984 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f06f 0204 	mvn.w	r2, #4
 8002954:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2202      	movs	r2, #2
 800295a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	699b      	ldr	r3, [r3, #24]
 8002962:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002966:	2b00      	cmp	r3, #0
 8002968:	d003      	beq.n	8002972 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f000 f8ac 	bl	8002ac8 <HAL_TIM_IC_CaptureCallback>
 8002970:	e005      	b.n	800297e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f000 f89e 	bl	8002ab4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f000 f8af 	bl	8002adc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	f003 0308 	and.w	r3, r3, #8
 800298a:	2b00      	cmp	r3, #0
 800298c:	d020      	beq.n	80029d0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f003 0308 	and.w	r3, r3, #8
 8002994:	2b00      	cmp	r3, #0
 8002996:	d01b      	beq.n	80029d0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f06f 0208 	mvn.w	r2, #8
 80029a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2204      	movs	r2, #4
 80029a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	69db      	ldr	r3, [r3, #28]
 80029ae:	f003 0303 	and.w	r3, r3, #3
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d003      	beq.n	80029be <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f000 f886 	bl	8002ac8 <HAL_TIM_IC_CaptureCallback>
 80029bc:	e005      	b.n	80029ca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f000 f878 	bl	8002ab4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f000 f889 	bl	8002adc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	f003 0310 	and.w	r3, r3, #16
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d020      	beq.n	8002a1c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	f003 0310 	and.w	r3, r3, #16
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d01b      	beq.n	8002a1c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f06f 0210 	mvn.w	r2, #16
 80029ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2208      	movs	r2, #8
 80029f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	69db      	ldr	r3, [r3, #28]
 80029fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d003      	beq.n	8002a0a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f000 f860 	bl	8002ac8 <HAL_TIM_IC_CaptureCallback>
 8002a08:	e005      	b.n	8002a16 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f000 f852 	bl	8002ab4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f000 f863 	bl	8002adc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d00c      	beq.n	8002a40 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f003 0301 	and.w	r3, r3, #1
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d007      	beq.n	8002a40 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f06f 0201 	mvn.w	r2, #1
 8002a38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f7ff f8f6 	bl	8001c2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00c      	beq.n	8002a64 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d007      	beq.n	8002a64 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002a5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f000 f8e0 	bl	8002c24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d00c      	beq.n	8002a88 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d007      	beq.n	8002a88 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002a80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 f834 	bl	8002af0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	f003 0320 	and.w	r3, r3, #32
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d00c      	beq.n	8002aac <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	f003 0320 	and.w	r3, r3, #32
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d007      	beq.n	8002aac <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f06f 0220 	mvn.w	r2, #32
 8002aa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f000 f8b2 	bl	8002c10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002aac:	bf00      	nop
 8002aae:	3710      	adds	r7, #16
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002abc:	bf00      	nop
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ad0:	bf00      	nop
 8002ad2:	370c      	adds	r7, #12
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ae4:	bf00      	nop
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002af8:	bf00      	nop
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	4a37      	ldr	r2, [pc, #220]	@ (8002bf4 <TIM_Base_SetConfig+0xf0>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d00f      	beq.n	8002b3c <TIM_Base_SetConfig+0x38>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b22:	d00b      	beq.n	8002b3c <TIM_Base_SetConfig+0x38>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	4a34      	ldr	r2, [pc, #208]	@ (8002bf8 <TIM_Base_SetConfig+0xf4>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d007      	beq.n	8002b3c <TIM_Base_SetConfig+0x38>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	4a33      	ldr	r2, [pc, #204]	@ (8002bfc <TIM_Base_SetConfig+0xf8>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d003      	beq.n	8002b3c <TIM_Base_SetConfig+0x38>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	4a32      	ldr	r2, [pc, #200]	@ (8002c00 <TIM_Base_SetConfig+0xfc>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d108      	bne.n	8002b4e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	68fa      	ldr	r2, [r7, #12]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a28      	ldr	r2, [pc, #160]	@ (8002bf4 <TIM_Base_SetConfig+0xf0>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d01b      	beq.n	8002b8e <TIM_Base_SetConfig+0x8a>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b5c:	d017      	beq.n	8002b8e <TIM_Base_SetConfig+0x8a>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a25      	ldr	r2, [pc, #148]	@ (8002bf8 <TIM_Base_SetConfig+0xf4>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d013      	beq.n	8002b8e <TIM_Base_SetConfig+0x8a>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a24      	ldr	r2, [pc, #144]	@ (8002bfc <TIM_Base_SetConfig+0xf8>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d00f      	beq.n	8002b8e <TIM_Base_SetConfig+0x8a>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a23      	ldr	r2, [pc, #140]	@ (8002c00 <TIM_Base_SetConfig+0xfc>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d00b      	beq.n	8002b8e <TIM_Base_SetConfig+0x8a>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a22      	ldr	r2, [pc, #136]	@ (8002c04 <TIM_Base_SetConfig+0x100>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d007      	beq.n	8002b8e <TIM_Base_SetConfig+0x8a>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a21      	ldr	r2, [pc, #132]	@ (8002c08 <TIM_Base_SetConfig+0x104>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d003      	beq.n	8002b8e <TIM_Base_SetConfig+0x8a>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a20      	ldr	r2, [pc, #128]	@ (8002c0c <TIM_Base_SetConfig+0x108>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d108      	bne.n	8002ba0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	68fa      	ldr	r2, [r7, #12]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	695b      	ldr	r3, [r3, #20]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	689a      	ldr	r2, [r3, #8]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a0c      	ldr	r2, [pc, #48]	@ (8002bf4 <TIM_Base_SetConfig+0xf0>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d103      	bne.n	8002bce <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	691a      	ldr	r2, [r3, #16]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f043 0204 	orr.w	r2, r3, #4
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	68fa      	ldr	r2, [r7, #12]
 8002be4:	601a      	str	r2, [r3, #0]
}
 8002be6:	bf00      	nop
 8002be8:	3714      	adds	r7, #20
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	40010000 	.word	0x40010000
 8002bf8:	40000400 	.word	0x40000400
 8002bfc:	40000800 	.word	0x40000800
 8002c00:	40000c00 	.word	0x40000c00
 8002c04:	40014000 	.word	0x40014000
 8002c08:	40014400 	.word	0x40014400
 8002c0c:	40014800 	.word	0x40014800

08002c10 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c18:	bf00      	nop
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c2c:	bf00      	nop
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <LL_GPIO_SetPinMode>:
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b08b      	sub	sp, #44	@ 0x2c
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	60b9      	str	r1, [r7, #8]
 8002c42:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	fa93 f3a3 	rbit	r3, r3
 8002c52:	613b      	str	r3, [r7, #16]
  return result;
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d101      	bne.n	8002c62 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8002c5e:	2320      	movs	r3, #32
 8002c60:	e003      	b.n	8002c6a <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	fab3 f383 	clz	r3, r3
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	005b      	lsls	r3, r3, #1
 8002c6c:	2103      	movs	r1, #3
 8002c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c72:	43db      	mvns	r3, r3
 8002c74:	401a      	ands	r2, r3
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c7a:	6a3b      	ldr	r3, [r7, #32]
 8002c7c:	fa93 f3a3 	rbit	r3, r3
 8002c80:	61fb      	str	r3, [r7, #28]
  return result;
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d101      	bne.n	8002c90 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8002c8c:	2320      	movs	r3, #32
 8002c8e:	e003      	b.n	8002c98 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8002c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c92:	fab3 f383 	clz	r3, r3
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	005b      	lsls	r3, r3, #1
 8002c9a:	6879      	ldr	r1, [r7, #4]
 8002c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002ca0:	431a      	orrs	r2, r3
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	601a      	str	r2, [r3, #0]
}
 8002ca6:	bf00      	nop
 8002ca8:	372c      	adds	r7, #44	@ 0x2c
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr

08002cb2 <LL_GPIO_SetPinOutputType>:
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	b085      	sub	sp, #20
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	60f8      	str	r0, [r7, #12]
 8002cba:	60b9      	str	r1, [r7, #8]
 8002cbc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	685a      	ldr	r2, [r3, #4]
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	401a      	ands	r2, r3
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	6879      	ldr	r1, [r7, #4]
 8002ccc:	fb01 f303 	mul.w	r3, r1, r3
 8002cd0:	431a      	orrs	r2, r3
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	605a      	str	r2, [r3, #4]
}
 8002cd6:	bf00      	nop
 8002cd8:	3714      	adds	r7, #20
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr

08002ce2 <LL_GPIO_SetPinSpeed>:
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	b08b      	sub	sp, #44	@ 0x2c
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	60f8      	str	r0, [r7, #12]
 8002cea:	60b9      	str	r1, [r7, #8]
 8002cec:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	689a      	ldr	r2, [r3, #8]
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	fa93 f3a3 	rbit	r3, r3
 8002cfc:	613b      	str	r3, [r7, #16]
  return result;
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d101      	bne.n	8002d0c <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8002d08:	2320      	movs	r3, #32
 8002d0a:	e003      	b.n	8002d14 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	fab3 f383 	clz	r3, r3
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	005b      	lsls	r3, r3, #1
 8002d16:	2103      	movs	r1, #3
 8002d18:	fa01 f303 	lsl.w	r3, r1, r3
 8002d1c:	43db      	mvns	r3, r3
 8002d1e:	401a      	ands	r2, r3
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d24:	6a3b      	ldr	r3, [r7, #32]
 8002d26:	fa93 f3a3 	rbit	r3, r3
 8002d2a:	61fb      	str	r3, [r7, #28]
  return result;
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d101      	bne.n	8002d3a <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8002d36:	2320      	movs	r3, #32
 8002d38:	e003      	b.n	8002d42 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8002d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d3c:	fab3 f383 	clz	r3, r3
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	005b      	lsls	r3, r3, #1
 8002d44:	6879      	ldr	r1, [r7, #4]
 8002d46:	fa01 f303 	lsl.w	r3, r1, r3
 8002d4a:	431a      	orrs	r2, r3
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	609a      	str	r2, [r3, #8]
}
 8002d50:	bf00      	nop
 8002d52:	372c      	adds	r7, #44	@ 0x2c
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <LL_GPIO_SetPinPull>:
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b08b      	sub	sp, #44	@ 0x2c
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	68da      	ldr	r2, [r3, #12]
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	fa93 f3a3 	rbit	r3, r3
 8002d76:	613b      	str	r3, [r7, #16]
  return result;
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d101      	bne.n	8002d86 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8002d82:	2320      	movs	r3, #32
 8002d84:	e003      	b.n	8002d8e <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8002d86:	69bb      	ldr	r3, [r7, #24]
 8002d88:	fab3 f383 	clz	r3, r3
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	005b      	lsls	r3, r3, #1
 8002d90:	2103      	movs	r1, #3
 8002d92:	fa01 f303 	lsl.w	r3, r1, r3
 8002d96:	43db      	mvns	r3, r3
 8002d98:	401a      	ands	r2, r3
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d9e:	6a3b      	ldr	r3, [r7, #32]
 8002da0:	fa93 f3a3 	rbit	r3, r3
 8002da4:	61fb      	str	r3, [r7, #28]
  return result;
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d101      	bne.n	8002db4 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8002db0:	2320      	movs	r3, #32
 8002db2:	e003      	b.n	8002dbc <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8002db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db6:	fab3 f383 	clz	r3, r3
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	005b      	lsls	r3, r3, #1
 8002dbe:	6879      	ldr	r1, [r7, #4]
 8002dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8002dc4:	431a      	orrs	r2, r3
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	60da      	str	r2, [r3, #12]
}
 8002dca:	bf00      	nop
 8002dcc:	372c      	adds	r7, #44	@ 0x2c
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr

08002dd6 <LL_GPIO_SetAFPin_0_7>:
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	b08b      	sub	sp, #44	@ 0x2c
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	60f8      	str	r0, [r7, #12]
 8002dde:	60b9      	str	r1, [r7, #8]
 8002de0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	6a1a      	ldr	r2, [r3, #32]
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	fa93 f3a3 	rbit	r3, r3
 8002df0:	613b      	str	r3, [r7, #16]
  return result;
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d101      	bne.n	8002e00 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8002dfc:	2320      	movs	r3, #32
 8002dfe:	e003      	b.n	8002e08 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	fab3 f383 	clz	r3, r3
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	210f      	movs	r1, #15
 8002e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e10:	43db      	mvns	r3, r3
 8002e12:	401a      	ands	r2, r3
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e18:	6a3b      	ldr	r3, [r7, #32]
 8002e1a:	fa93 f3a3 	rbit	r3, r3
 8002e1e:	61fb      	str	r3, [r7, #28]
  return result;
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d101      	bne.n	8002e2e <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8002e2a:	2320      	movs	r3, #32
 8002e2c:	e003      	b.n	8002e36 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8002e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e30:	fab3 f383 	clz	r3, r3
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	6879      	ldr	r1, [r7, #4]
 8002e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e3e:	431a      	orrs	r2, r3
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	621a      	str	r2, [r3, #32]
}
 8002e44:	bf00      	nop
 8002e46:	372c      	adds	r7, #44	@ 0x2c
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr

08002e50 <LL_GPIO_SetAFPin_8_15>:
{
 8002e50:	b480      	push	{r7}
 8002e52:	b08b      	sub	sp, #44	@ 0x2c
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	0a1b      	lsrs	r3, r3, #8
 8002e64:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	fa93 f3a3 	rbit	r3, r3
 8002e6c:	613b      	str	r3, [r7, #16]
  return result;
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d101      	bne.n	8002e7c <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8002e78:	2320      	movs	r3, #32
 8002e7a:	e003      	b.n	8002e84 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	fab3 f383 	clz	r3, r3
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	210f      	movs	r1, #15
 8002e88:	fa01 f303 	lsl.w	r3, r1, r3
 8002e8c:	43db      	mvns	r3, r3
 8002e8e:	401a      	ands	r2, r3
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	0a1b      	lsrs	r3, r3, #8
 8002e94:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e96:	6a3b      	ldr	r3, [r7, #32]
 8002e98:	fa93 f3a3 	rbit	r3, r3
 8002e9c:	61fb      	str	r3, [r7, #28]
  return result;
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d101      	bne.n	8002eac <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8002ea8:	2320      	movs	r3, #32
 8002eaa:	e003      	b.n	8002eb4 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8002eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eae:	fab3 f383 	clz	r3, r3
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	6879      	ldr	r1, [r7, #4]
 8002eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8002ebc:	431a      	orrs	r2, r3
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8002ec2:	bf00      	nop
 8002ec4:	372c      	adds	r7, #44	@ 0x2c
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr

08002ece <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b08a      	sub	sp, #40	@ 0x28
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
 8002ed6:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 8002edc:	2300      	movs	r3, #0
 8002ede:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	fa93 f3a3 	rbit	r3, r3
 8002eec:	617b      	str	r3, [r7, #20]
  return result;
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d101      	bne.n	8002efc <LL_GPIO_Init+0x2e>
    return 32U;
 8002ef8:	2320      	movs	r3, #32
 8002efa:	e003      	b.n	8002f04 <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	fab3 f383 	clz	r3, r3
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002f06:	e057      	b.n	8002fb8 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	2101      	movs	r1, #1
 8002f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f10:	fa01 f303 	lsl.w	r3, r1, r3
 8002f14:	4013      	ands	r3, r2
 8002f16:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 8002f18:	6a3b      	ldr	r3, [r7, #32]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d049      	beq.n	8002fb2 <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d003      	beq.n	8002f2e <LL_GPIO_Init+0x60>
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d10d      	bne.n	8002f4a <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	461a      	mov	r2, r3
 8002f34:	6a39      	ldr	r1, [r7, #32]
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f7ff fed3 	bl	8002ce2 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	461a      	mov	r2, r3
 8002f42:	6a39      	ldr	r1, [r7, #32]
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f7ff feb4 	bl	8002cb2 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	461a      	mov	r2, r3
 8002f50:	6a39      	ldr	r1, [r7, #32]
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f7ff ff02 	bl	8002d5c <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d121      	bne.n	8002fa4 <LL_GPIO_Init+0xd6>
 8002f60:	6a3b      	ldr	r3, [r7, #32]
 8002f62:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	fa93 f3a3 	rbit	r3, r3
 8002f6a:	60bb      	str	r3, [r7, #8]
  return result;
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d101      	bne.n	8002f7a <LL_GPIO_Init+0xac>
    return 32U;
 8002f76:	2320      	movs	r3, #32
 8002f78:	e003      	b.n	8002f82 <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	fab3 f383 	clz	r3, r3
 8002f80:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8002f82:	2b07      	cmp	r3, #7
 8002f84:	d807      	bhi.n	8002f96 <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	695b      	ldr	r3, [r3, #20]
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	6a39      	ldr	r1, [r7, #32]
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f7ff ff21 	bl	8002dd6 <LL_GPIO_SetAFPin_0_7>
 8002f94:	e006      	b.n	8002fa4 <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	695b      	ldr	r3, [r3, #20]
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	6a39      	ldr	r1, [r7, #32]
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f7ff ff56 	bl	8002e50 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	461a      	mov	r2, r3
 8002faa:	6a39      	ldr	r1, [r7, #32]
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f7ff fe43 	bl	8002c38 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fbe:	fa22 f303 	lsr.w	r3, r2, r3
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1a0      	bne.n	8002f08 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 8002fc6:	2300      	movs	r3, #0
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3728      	adds	r7, #40	@ 0x28
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <LL_I2C_Enable>:
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f043 0201 	orr.w	r2, r3, #1
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	601a      	str	r2, [r3, #0]
}
 8002fe4:	bf00      	nop
 8002fe6:	370c      	adds	r7, #12
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr

08002ff0 <LL_I2C_Disable>:
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f023 0201 	bic.w	r2, r3, #1
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	601a      	str	r2, [r3, #0]
}
 8003004:	bf00      	nop
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr

08003010 <LL_I2C_ConfigFilters>:
{
 8003010:	b480      	push	{r7}
 8003012:	b085      	sub	sp, #20
 8003014:	af00      	add	r7, sp, #0
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->FLTR, I2C_FLTR_ANOFF | I2C_FLTR_DNF, AnalogFilter | DigitalFilter);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003020:	f023 021f 	bic.w	r2, r3, #31
 8003024:	68b9      	ldr	r1, [r7, #8]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	430b      	orrs	r3, r1
 800302a:	431a      	orrs	r2, r3
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8003030:	bf00      	nop
 8003032:	3714      	adds	r7, #20
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <LL_I2C_SetOwnAddress1>:
{
 800303c:	b480      	push	{r7}
 800303e:	b085      	sub	sp, #20
 8003040:	af00      	add	r7, sp, #0
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	60b9      	str	r1, [r7, #8]
 8003046:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003050:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003054:	68b9      	ldr	r1, [r7, #8]
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	430a      	orrs	r2, r1
 800305a:	431a      	orrs	r2, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	609a      	str	r2, [r3, #8]
}
 8003060:	bf00      	nop
 8003062:	3714      	adds	r7, #20
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <LL_I2C_ConfigSpeed>:
{
 800306c:	b480      	push	{r7}
 800306e:	b087      	sub	sp, #28
 8003070:	af00      	add	r7, sp, #0
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	607a      	str	r2, [r7, #4]
 8003078:	603b      	str	r3, [r7, #0]
  uint32_t freqrange = 0x0U;
 800307a:	2300      	movs	r3, #0
 800307c:	613b      	str	r3, [r7, #16]
  uint32_t clockconfig = 0x0U;
 800307e:	2300      	movs	r3, #0
 8003080:	617b      	str	r3, [r7, #20]
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	4a42      	ldr	r2, [pc, #264]	@ (8003190 <LL_I2C_ConfigSpeed+0x124>)
 8003086:	fba2 2303 	umull	r2, r3, r2, r3
 800308a:	0c9b      	lsrs	r3, r3, #18
 800308c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	431a      	orrs	r2, r3
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	605a      	str	r2, [r3, #4]
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6a1b      	ldr	r3, [r3, #32]
 80030a2:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	493a      	ldr	r1, [pc, #232]	@ (8003194 <LL_I2C_ConfigSpeed+0x128>)
 80030aa:	428b      	cmp	r3, r1
 80030ac:	d802      	bhi.n	80030b4 <LL_I2C_ConfigSpeed+0x48>
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	3301      	adds	r3, #1
 80030b2:	e009      	b.n	80030c8 <LL_I2C_ConfigSpeed+0x5c>
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 80030ba:	fb01 f303 	mul.w	r3, r1, r3
 80030be:	4936      	ldr	r1, [pc, #216]	@ (8003198 <LL_I2C_ConfigSpeed+0x12c>)
 80030c0:	fba1 1303 	umull	r1, r3, r1, r3
 80030c4:	099b      	lsrs	r3, r3, #6
 80030c6:	3301      	adds	r3, #1
 80030c8:	431a      	orrs	r2, r3
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	621a      	str	r2, [r3, #32]
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a30      	ldr	r2, [pc, #192]	@ (8003194 <LL_I2C_ConfigSpeed+0x128>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d939      	bls.n	800314a <LL_I2C_ConfigSpeed+0xde>
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d117      	bne.n	800310c <LL_I2C_ConfigSpeed+0xa0>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	4613      	mov	r3, r2
 80030e0:	005b      	lsls	r3, r3, #1
 80030e2:	4413      	add	r3, r2
 80030e4:	68ba      	ldr	r2, [r7, #8]
 80030e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d009      	beq.n	8003106 <LL_I2C_ConfigSpeed+0x9a>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	4613      	mov	r3, r2
 80030f6:	005b      	lsls	r3, r3, #1
 80030f8:	4413      	add	r3, r2
 80030fa:	68ba      	ldr	r2, [r7, #8]
 80030fc:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003100:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003104:	e01d      	b.n	8003142 <LL_I2C_ConfigSpeed+0xd6>
 8003106:	f248 0301 	movw	r3, #32769	@ 0x8001
 800310a:	e01a      	b.n	8003142 <LL_I2C_ConfigSpeed+0xd6>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	4613      	mov	r3, r2
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	4413      	add	r3, r2
 8003114:	009a      	lsls	r2, r3, #2
 8003116:	4413      	add	r3, r2
 8003118:	68ba      	ldr	r2, [r7, #8]
 800311a:	fbb2 f3f3 	udiv	r3, r2, r3
 800311e:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003122:	2b00      	cmp	r3, #0
 8003124:	d00b      	beq.n	800313e <LL_I2C_ConfigSpeed+0xd2>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	4613      	mov	r3, r2
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	4413      	add	r3, r2
 800312e:	009a      	lsls	r2, r3, #2
 8003130:	4413      	add	r3, r2
 8003132:	68ba      	ldr	r2, [r7, #8]
 8003134:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003138:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800313c:	e001      	b.n	8003142 <LL_I2C_ConfigSpeed+0xd6>
 800313e:	f248 0301 	movw	r3, #32769	@ 0x8001
 8003142:	683a      	ldr	r2, [r7, #0]
 8003144:	4313      	orrs	r3, r2
 8003146:	617b      	str	r3, [r7, #20]
 8003148:	e011      	b.n	800316e <LL_I2C_ConfigSpeed+0x102>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	005b      	lsls	r3, r3, #1
 800314e:	68ba      	ldr	r2, [r7, #8]
 8003150:	fbb2 f2f3 	udiv	r2, r2, r3
 8003154:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003158:	4013      	ands	r3, r2
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 800315a:	2b00      	cmp	r3, #0
 800315c:	d005      	beq.n	800316a <LL_I2C_ConfigSpeed+0xfe>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8003162:	68ba      	ldr	r2, [r7, #8]
 8003164:	fbb2 f3f3 	udiv	r3, r2, r3
 8003168:	e000      	b.n	800316c <LL_I2C_ConfigSpeed+0x100>
 800316a:	2304      	movs	r3, #4
 800316c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	69db      	ldr	r3, [r3, #28]
 8003172:	f423 434f 	bic.w	r3, r3, #52992	@ 0xcf00
 8003176:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800317a:	697a      	ldr	r2, [r7, #20]
 800317c:	431a      	orrs	r2, r3
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	61da      	str	r2, [r3, #28]
}
 8003182:	bf00      	nop
 8003184:	371c      	adds	r7, #28
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	431bde83 	.word	0x431bde83
 8003194:	000186a0 	.word	0x000186a0
 8003198:	10624dd3 	.word	0x10624dd3

0800319c <LL_I2C_SetMode>:
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f023 021a 	bic.w	r2, r3, #26
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	431a      	orrs	r2, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	601a      	str	r2, [r3, #0]
}
 80031b6:	bf00      	nop
 80031b8:	370c      	adds	r7, #12
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr

080031c2 <LL_I2C_AcknowledgeNextData>:
{
 80031c2:	b480      	push	{r7}
 80031c4:	b083      	sub	sp, #12
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
 80031ca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	431a      	orrs	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	601a      	str	r2, [r3, #0]
}
 80031dc:	bf00      	nop
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b086      	sub	sp, #24
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f7ff fefc 	bl	8002ff0 <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80031f8:	f107 0308 	add.w	r3, r7, #8
 80031fc:	4618      	mov	r0, r3
 80031fe:	f000 f89d 	bl	800333c <LL_RCC_GetSystemClocksFreq>
  /*---------------------------- I2Cx FLTR Configuration -----------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_FLTR_ANFOFF bit
   * - DigitalFilter: I2C_FLTR_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	68d9      	ldr	r1, [r3, #12]
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	691b      	ldr	r3, [r3, #16]
 800320a:	461a      	mov	r2, r3
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f7ff feff 	bl	8003010 <LL_I2C_ConfigFilters>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 8003212:	6939      	ldr	r1, [r7, #16]
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	685a      	ldr	r2, [r3, #4]
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f7ff ff25 	bl	800306c <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	6959      	ldr	r1, [r3, #20]
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	69db      	ldr	r3, [r3, #28]
 800322a:	461a      	mov	r2, r3
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f7ff ff05 	bl	800303c <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4619      	mov	r1, r3
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f7ff ffaf 	bl	800319c <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f7ff fec6 	bl	8002fd0 <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	699b      	ldr	r3, [r3, #24]
 8003248:	4619      	mov	r1, r3
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f7ff ffb9 	bl	80031c2 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3718      	adds	r7, #24
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
	...

0800325c <LL_RCC_GetSysClkSource>:
{
 800325c:	b480      	push	{r7}
 800325e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003260:	4b04      	ldr	r3, [pc, #16]	@ (8003274 <LL_RCC_GetSysClkSource+0x18>)
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	f003 030c 	and.w	r3, r3, #12
}
 8003268:	4618      	mov	r0, r3
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop
 8003274:	40023800 	.word	0x40023800

08003278 <LL_RCC_GetAHBPrescaler>:
{
 8003278:	b480      	push	{r7}
 800327a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800327c:	4b04      	ldr	r3, [pc, #16]	@ (8003290 <LL_RCC_GetAHBPrescaler+0x18>)
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8003284:	4618      	mov	r0, r3
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	40023800 	.word	0x40023800

08003294 <LL_RCC_GetAPB1Prescaler>:
{
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003298:	4b04      	ldr	r3, [pc, #16]	@ (80032ac <LL_RCC_GetAPB1Prescaler+0x18>)
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	40023800 	.word	0x40023800

080032b0 <LL_RCC_GetAPB2Prescaler>:
{
 80032b0:	b480      	push	{r7}
 80032b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80032b4:	4b04      	ldr	r3, [pc, #16]	@ (80032c8 <LL_RCC_GetAPB2Prescaler+0x18>)
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80032bc:	4618      	mov	r0, r3
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop
 80032c8:	40023800 	.word	0x40023800

080032cc <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80032cc:	b480      	push	{r7}
 80032ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80032d0:	4b04      	ldr	r3, [pc, #16]	@ (80032e4 <LL_RCC_PLL_GetMainSource+0x18>)
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 80032d8:	4618      	mov	r0, r3
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	40023800 	.word	0x40023800

080032e8 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80032e8:	b480      	push	{r7}
 80032ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80032ec:	4b04      	ldr	r3, [pc, #16]	@ (8003300 <LL_RCC_PLL_GetN+0x18>)
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	099b      	lsrs	r3, r3, #6
 80032f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr
 8003300:	40023800 	.word	0x40023800

08003304 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8003304:	b480      	push	{r7}
 8003306:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8003308:	4b04      	ldr	r3, [pc, #16]	@ (800331c <LL_RCC_PLL_GetP+0x18>)
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8003310:	4618      	mov	r0, r3
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	40023800 	.word	0x40023800

08003320 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003320:	b480      	push	{r7}
 8003322:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003324:	4b04      	ldr	r3, [pc, #16]	@ (8003338 <LL_RCC_PLL_GetDivider+0x18>)
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 800332c:	4618      	mov	r0, r3
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	40023800 	.word	0x40023800

0800333c <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8003344:	f000 f820 	bl	8003388 <RCC_GetSystemClockFreq>
 8003348:	4602      	mov	r2, r0
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4618      	mov	r0, r3
 8003354:	f000 f840 	bl	80033d8 <RCC_GetHCLKClockFreq>
 8003358:	4602      	mov	r2, r0
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	4618      	mov	r0, r3
 8003364:	f000 f84e 	bl	8003404 <RCC_GetPCLK1ClockFreq>
 8003368:	4602      	mov	r2, r0
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	4618      	mov	r0, r3
 8003374:	f000 f85a 	bl	800342c <RCC_GetPCLK2ClockFreq>
 8003378:	4602      	mov	r2, r0
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	60da      	str	r2, [r3, #12]
}
 800337e:	bf00      	nop
 8003380:	3708      	adds	r7, #8
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
	...

08003388 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800338e:	2300      	movs	r3, #0
 8003390:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8003392:	f7ff ff63 	bl	800325c <LL_RCC_GetSysClkSource>
 8003396:	4603      	mov	r3, r0
 8003398:	2b08      	cmp	r3, #8
 800339a:	d00c      	beq.n	80033b6 <RCC_GetSystemClockFreq+0x2e>
 800339c:	2b08      	cmp	r3, #8
 800339e:	d80f      	bhi.n	80033c0 <RCC_GetSystemClockFreq+0x38>
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d002      	beq.n	80033aa <RCC_GetSystemClockFreq+0x22>
 80033a4:	2b04      	cmp	r3, #4
 80033a6:	d003      	beq.n	80033b0 <RCC_GetSystemClockFreq+0x28>
 80033a8:	e00a      	b.n	80033c0 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80033aa:	4b09      	ldr	r3, [pc, #36]	@ (80033d0 <RCC_GetSystemClockFreq+0x48>)
 80033ac:	607b      	str	r3, [r7, #4]
      break;
 80033ae:	e00a      	b.n	80033c6 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80033b0:	4b08      	ldr	r3, [pc, #32]	@ (80033d4 <RCC_GetSystemClockFreq+0x4c>)
 80033b2:	607b      	str	r3, [r7, #4]
      break;
 80033b4:	e007      	b.n	80033c6 <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 80033b6:	2008      	movs	r0, #8
 80033b8:	f000 f84c 	bl	8003454 <RCC_PLL_GetFreqDomain_SYS>
 80033bc:	6078      	str	r0, [r7, #4]
      break;
 80033be:	e002      	b.n	80033c6 <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 80033c0:	4b03      	ldr	r3, [pc, #12]	@ (80033d0 <RCC_GetSystemClockFreq+0x48>)
 80033c2:	607b      	str	r3, [r7, #4]
      break;
 80033c4:	bf00      	nop
  }

  return frequency;
 80033c6:	687b      	ldr	r3, [r7, #4]
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3708      	adds	r7, #8
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	00f42400 	.word	0x00f42400
 80033d4:	007a1200 	.word	0x007a1200

080033d8 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80033e0:	f7ff ff4a 	bl	8003278 <LL_RCC_GetAHBPrescaler>
 80033e4:	4603      	mov	r3, r0
 80033e6:	091b      	lsrs	r3, r3, #4
 80033e8:	f003 030f 	and.w	r3, r3, #15
 80033ec:	4a04      	ldr	r2, [pc, #16]	@ (8003400 <RCC_GetHCLKClockFreq+0x28>)
 80033ee:	5cd3      	ldrb	r3, [r2, r3]
 80033f0:	461a      	mov	r2, r3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	40d3      	lsrs	r3, r2
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3708      	adds	r7, #8
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	080086f4 	.word	0x080086f4

08003404 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800340c:	f7ff ff42 	bl	8003294 <LL_RCC_GetAPB1Prescaler>
 8003410:	4603      	mov	r3, r0
 8003412:	0a9b      	lsrs	r3, r3, #10
 8003414:	4a04      	ldr	r2, [pc, #16]	@ (8003428 <RCC_GetPCLK1ClockFreq+0x24>)
 8003416:	5cd3      	ldrb	r3, [r2, r3]
 8003418:	461a      	mov	r2, r3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	40d3      	lsrs	r3, r2
}
 800341e:	4618      	mov	r0, r3
 8003420:	3708      	adds	r7, #8
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	08008704 	.word	0x08008704

0800342c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8003434:	f7ff ff3c 	bl	80032b0 <LL_RCC_GetAPB2Prescaler>
 8003438:	4603      	mov	r3, r0
 800343a:	0b5b      	lsrs	r3, r3, #13
 800343c:	4a04      	ldr	r2, [pc, #16]	@ (8003450 <RCC_GetPCLK2ClockFreq+0x24>)
 800343e:	5cd3      	ldrb	r3, [r2, r3]
 8003440:	461a      	mov	r2, r3
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	40d3      	lsrs	r3, r2
}
 8003446:	4618      	mov	r0, r3
 8003448:	3708      	adds	r7, #8
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	08008704 	.word	0x08008704

08003454 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8003454:	b590      	push	{r4, r7, lr}
 8003456:	b087      	sub	sp, #28
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U;
 800345c:	2300      	movs	r3, #0
 800345e:	617b      	str	r3, [r7, #20]
  uint32_t pllsource = 0U;
 8003460:	2300      	movs	r3, #0
 8003462:	60fb      	str	r3, [r7, #12]
  uint32_t plloutputfreq = 0U;
 8003464:	2300      	movs	r3, #0
 8003466:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8003468:	f7ff ff30 	bl	80032cc <LL_RCC_PLL_GetMainSource>
 800346c:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d004      	beq.n	800347e <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800347a:	d003      	beq.n	8003484 <RCC_PLL_GetFreqDomain_SYS+0x30>
 800347c:	e005      	b.n	800348a <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800347e:	4b12      	ldr	r3, [pc, #72]	@ (80034c8 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8003480:	617b      	str	r3, [r7, #20]
      break;
 8003482:	e005      	b.n	8003490 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8003484:	4b11      	ldr	r3, [pc, #68]	@ (80034cc <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8003486:	617b      	str	r3, [r7, #20]
      break;
 8003488:	e002      	b.n	8003490 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 800348a:	4b0f      	ldr	r3, [pc, #60]	@ (80034c8 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800348c:	617b      	str	r3, [r7, #20]
      break;
 800348e:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2b08      	cmp	r3, #8
 8003494:	d113      	bne.n	80034be <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003496:	f7ff ff43 	bl	8003320 <LL_RCC_PLL_GetDivider>
 800349a:	4602      	mov	r2, r0
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	fbb3 f4f2 	udiv	r4, r3, r2
 80034a2:	f7ff ff21 	bl	80032e8 <LL_RCC_PLL_GetN>
 80034a6:	4603      	mov	r3, r0
 80034a8:	fb03 f404 	mul.w	r4, r3, r4
 80034ac:	f7ff ff2a 	bl	8003304 <LL_RCC_PLL_GetP>
 80034b0:	4603      	mov	r3, r0
 80034b2:	0c1b      	lsrs	r3, r3, #16
 80034b4:	3301      	adds	r3, #1
 80034b6:	005b      	lsls	r3, r3, #1
 80034b8:	fbb4 f3f3 	udiv	r3, r4, r3
 80034bc:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                               LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 80034be:	693b      	ldr	r3, [r7, #16]
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	371c      	adds	r7, #28
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd90      	pop	{r4, r7, pc}
 80034c8:	00f42400 	.word	0x00f42400
 80034cc:	007a1200 	.word	0x007a1200

080034d0 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80034d8:	4a04      	ldr	r2, [pc, #16]	@ (80034ec <LL_SetSystemCoreClock+0x1c>)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6013      	str	r3, [r2, #0]
}
 80034de:	bf00      	nop
 80034e0:	370c      	adds	r7, #12
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr
 80034ea:	bf00      	nop
 80034ec:	20000018 	.word	0x20000018

080034f0 <__NVIC_SetPriority>:
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	4603      	mov	r3, r0
 80034f8:	6039      	str	r1, [r7, #0]
 80034fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003500:	2b00      	cmp	r3, #0
 8003502:	db0a      	blt.n	800351a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	b2da      	uxtb	r2, r3
 8003508:	490c      	ldr	r1, [pc, #48]	@ (800353c <__NVIC_SetPriority+0x4c>)
 800350a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800350e:	0112      	lsls	r2, r2, #4
 8003510:	b2d2      	uxtb	r2, r2
 8003512:	440b      	add	r3, r1
 8003514:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003518:	e00a      	b.n	8003530 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	b2da      	uxtb	r2, r3
 800351e:	4908      	ldr	r1, [pc, #32]	@ (8003540 <__NVIC_SetPriority+0x50>)
 8003520:	79fb      	ldrb	r3, [r7, #7]
 8003522:	f003 030f 	and.w	r3, r3, #15
 8003526:	3b04      	subs	r3, #4
 8003528:	0112      	lsls	r2, r2, #4
 800352a:	b2d2      	uxtb	r2, r2
 800352c:	440b      	add	r3, r1
 800352e:	761a      	strb	r2, [r3, #24]
}
 8003530:	bf00      	nop
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr
 800353c:	e000e100 	.word	0xe000e100
 8003540:	e000ed00 	.word	0xe000ed00

08003544 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003544:	b580      	push	{r7, lr}
 8003546:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003548:	4b05      	ldr	r3, [pc, #20]	@ (8003560 <SysTick_Handler+0x1c>)
 800354a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800354c:	f002 fa04 	bl	8005958 <xTaskGetSchedulerState>
 8003550:	4603      	mov	r3, r0
 8003552:	2b01      	cmp	r3, #1
 8003554:	d001      	beq.n	800355a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003556:	f003 f8ff 	bl	8006758 <xPortSysTickHandler>
  }
}
 800355a:	bf00      	nop
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	e000e010 	.word	0xe000e010

08003564 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003564:	b580      	push	{r7, lr}
 8003566:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003568:	2100      	movs	r1, #0
 800356a:	f06f 0004 	mvn.w	r0, #4
 800356e:	f7ff ffbf 	bl	80034f0 <__NVIC_SetPriority>
#endif
}
 8003572:	bf00      	nop
 8003574:	bd80      	pop	{r7, pc}
	...

08003578 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800357e:	f3ef 8305 	mrs	r3, IPSR
 8003582:	603b      	str	r3, [r7, #0]
  return(result);
 8003584:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003586:	2b00      	cmp	r3, #0
 8003588:	d003      	beq.n	8003592 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800358a:	f06f 0305 	mvn.w	r3, #5
 800358e:	607b      	str	r3, [r7, #4]
 8003590:	e00c      	b.n	80035ac <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003592:	4b0a      	ldr	r3, [pc, #40]	@ (80035bc <osKernelInitialize+0x44>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d105      	bne.n	80035a6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800359a:	4b08      	ldr	r3, [pc, #32]	@ (80035bc <osKernelInitialize+0x44>)
 800359c:	2201      	movs	r2, #1
 800359e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80035a0:	2300      	movs	r3, #0
 80035a2:	607b      	str	r3, [r7, #4]
 80035a4:	e002      	b.n	80035ac <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80035a6:	f04f 33ff 	mov.w	r3, #4294967295
 80035aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80035ac:	687b      	ldr	r3, [r7, #4]
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	370c      	adds	r7, #12
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop
 80035bc:	2000011c 	.word	0x2000011c

080035c0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80035c6:	f3ef 8305 	mrs	r3, IPSR
 80035ca:	603b      	str	r3, [r7, #0]
  return(result);
 80035cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d003      	beq.n	80035da <osKernelStart+0x1a>
    stat = osErrorISR;
 80035d2:	f06f 0305 	mvn.w	r3, #5
 80035d6:	607b      	str	r3, [r7, #4]
 80035d8:	e010      	b.n	80035fc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80035da:	4b0b      	ldr	r3, [pc, #44]	@ (8003608 <osKernelStart+0x48>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d109      	bne.n	80035f6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80035e2:	f7ff ffbf 	bl	8003564 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80035e6:	4b08      	ldr	r3, [pc, #32]	@ (8003608 <osKernelStart+0x48>)
 80035e8:	2202      	movs	r2, #2
 80035ea:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80035ec:	f001 fd56 	bl	800509c <vTaskStartScheduler>
      stat = osOK;
 80035f0:	2300      	movs	r3, #0
 80035f2:	607b      	str	r3, [r7, #4]
 80035f4:	e002      	b.n	80035fc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80035f6:	f04f 33ff 	mov.w	r3, #4294967295
 80035fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80035fc:	687b      	ldr	r3, [r7, #4]
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3708      	adds	r7, #8
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	2000011c 	.word	0x2000011c

0800360c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800360c:	b580      	push	{r7, lr}
 800360e:	b08e      	sub	sp, #56	@ 0x38
 8003610:	af04      	add	r7, sp, #16
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003618:	2300      	movs	r3, #0
 800361a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800361c:	f3ef 8305 	mrs	r3, IPSR
 8003620:	617b      	str	r3, [r7, #20]
  return(result);
 8003622:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003624:	2b00      	cmp	r3, #0
 8003626:	d17e      	bne.n	8003726 <osThreadNew+0x11a>
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d07b      	beq.n	8003726 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800362e:	2380      	movs	r3, #128	@ 0x80
 8003630:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003632:	2318      	movs	r3, #24
 8003634:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003636:	2300      	movs	r3, #0
 8003638:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800363a:	f04f 33ff 	mov.w	r3, #4294967295
 800363e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d045      	beq.n	80036d2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d002      	beq.n	8003654 <osThreadNew+0x48>
        name = attr->name;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	699b      	ldr	r3, [r3, #24]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d002      	beq.n	8003662 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	699b      	ldr	r3, [r3, #24]
 8003660:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d008      	beq.n	800367a <osThreadNew+0x6e>
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	2b38      	cmp	r3, #56	@ 0x38
 800366c:	d805      	bhi.n	800367a <osThreadNew+0x6e>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f003 0301 	and.w	r3, r3, #1
 8003676:	2b00      	cmp	r3, #0
 8003678:	d001      	beq.n	800367e <osThreadNew+0x72>
        return (NULL);
 800367a:	2300      	movs	r3, #0
 800367c:	e054      	b.n	8003728 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	695b      	ldr	r3, [r3, #20]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d003      	beq.n	800368e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	695b      	ldr	r3, [r3, #20]
 800368a:	089b      	lsrs	r3, r3, #2
 800368c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00e      	beq.n	80036b4 <osThreadNew+0xa8>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	2b5b      	cmp	r3, #91	@ 0x5b
 800369c:	d90a      	bls.n	80036b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d006      	beq.n	80036b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d002      	beq.n	80036b4 <osThreadNew+0xa8>
        mem = 1;
 80036ae:	2301      	movs	r3, #1
 80036b0:	61bb      	str	r3, [r7, #24]
 80036b2:	e010      	b.n	80036d6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d10c      	bne.n	80036d6 <osThreadNew+0xca>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d108      	bne.n	80036d6 <osThreadNew+0xca>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	691b      	ldr	r3, [r3, #16]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d104      	bne.n	80036d6 <osThreadNew+0xca>
          mem = 0;
 80036cc:	2300      	movs	r3, #0
 80036ce:	61bb      	str	r3, [r7, #24]
 80036d0:	e001      	b.n	80036d6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80036d2:	2300      	movs	r3, #0
 80036d4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d110      	bne.n	80036fe <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80036e4:	9202      	str	r2, [sp, #8]
 80036e6:	9301      	str	r3, [sp, #4]
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	9300      	str	r3, [sp, #0]
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	6a3a      	ldr	r2, [r7, #32]
 80036f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80036f2:	68f8      	ldr	r0, [r7, #12]
 80036f4:	f001 faf6 	bl	8004ce4 <xTaskCreateStatic>
 80036f8:	4603      	mov	r3, r0
 80036fa:	613b      	str	r3, [r7, #16]
 80036fc:	e013      	b.n	8003726 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d110      	bne.n	8003726 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003704:	6a3b      	ldr	r3, [r7, #32]
 8003706:	b29a      	uxth	r2, r3
 8003708:	f107 0310 	add.w	r3, r7, #16
 800370c:	9301      	str	r3, [sp, #4]
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	9300      	str	r3, [sp, #0]
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003716:	68f8      	ldr	r0, [r7, #12]
 8003718:	f001 fb44 	bl	8004da4 <xTaskCreate>
 800371c:	4603      	mov	r3, r0
 800371e:	2b01      	cmp	r3, #1
 8003720:	d001      	beq.n	8003726 <osThreadNew+0x11a>
            hTask = NULL;
 8003722:	2300      	movs	r3, #0
 8003724:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003726:	693b      	ldr	r3, [r7, #16]
}
 8003728:	4618      	mov	r0, r3
 800372a:	3728      	adds	r7, #40	@ 0x28
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003738:	f3ef 8305 	mrs	r3, IPSR
 800373c:	60bb      	str	r3, [r7, #8]
  return(result);
 800373e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003740:	2b00      	cmp	r3, #0
 8003742:	d003      	beq.n	800374c <osDelay+0x1c>
    stat = osErrorISR;
 8003744:	f06f 0305 	mvn.w	r3, #5
 8003748:	60fb      	str	r3, [r7, #12]
 800374a:	e007      	b.n	800375c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800374c:	2300      	movs	r3, #0
 800374e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d002      	beq.n	800375c <osDelay+0x2c>
      vTaskDelay(ticks);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f001 fc6a 	bl	8005030 <vTaskDelay>
    }
  }

  return (stat);
 800375c:	68fb      	ldr	r3, [r7, #12]
}
 800375e:	4618      	mov	r0, r3
 8003760:	3710      	adds	r7, #16
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}

08003766 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8003766:	b580      	push	{r7, lr}
 8003768:	b088      	sub	sp, #32
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800376e:	2300      	movs	r3, #0
 8003770:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003772:	f3ef 8305 	mrs	r3, IPSR
 8003776:	60bb      	str	r3, [r7, #8]
  return(result);
 8003778:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800377a:	2b00      	cmp	r3, #0
 800377c:	d174      	bne.n	8003868 <osMutexNew+0x102>
    if (attr != NULL) {
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d003      	beq.n	800378c <osMutexNew+0x26>
      type = attr->attr_bits;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	61bb      	str	r3, [r7, #24]
 800378a:	e001      	b.n	8003790 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800378c:	2300      	movs	r3, #0
 800378e:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	f003 0301 	and.w	r3, r3, #1
 8003796:	2b00      	cmp	r3, #0
 8003798:	d002      	beq.n	80037a0 <osMutexNew+0x3a>
      rmtx = 1U;
 800379a:	2301      	movs	r3, #1
 800379c:	617b      	str	r3, [r7, #20]
 800379e:	e001      	b.n	80037a4 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80037a0:	2300      	movs	r3, #0
 80037a2:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	f003 0308 	and.w	r3, r3, #8
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d15c      	bne.n	8003868 <osMutexNew+0x102>
      mem = -1;
 80037ae:	f04f 33ff 	mov.w	r3, #4294967295
 80037b2:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d015      	beq.n	80037e6 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d006      	beq.n	80037d0 <osMutexNew+0x6a>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	2b4f      	cmp	r3, #79	@ 0x4f
 80037c8:	d902      	bls.n	80037d0 <osMutexNew+0x6a>
          mem = 1;
 80037ca:	2301      	movs	r3, #1
 80037cc:	613b      	str	r3, [r7, #16]
 80037ce:	e00c      	b.n	80037ea <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d108      	bne.n	80037ea <osMutexNew+0x84>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d104      	bne.n	80037ea <osMutexNew+0x84>
            mem = 0;
 80037e0:	2300      	movs	r3, #0
 80037e2:	613b      	str	r3, [r7, #16]
 80037e4:	e001      	b.n	80037ea <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80037e6:	2300      	movs	r3, #0
 80037e8:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d112      	bne.n	8003816 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d007      	beq.n	8003806 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	4619      	mov	r1, r3
 80037fc:	2004      	movs	r0, #4
 80037fe:	f000 fc50 	bl	80040a2 <xQueueCreateMutexStatic>
 8003802:	61f8      	str	r0, [r7, #28]
 8003804:	e016      	b.n	8003834 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	4619      	mov	r1, r3
 800380c:	2001      	movs	r0, #1
 800380e:	f000 fc48 	bl	80040a2 <xQueueCreateMutexStatic>
 8003812:	61f8      	str	r0, [r7, #28]
 8003814:	e00e      	b.n	8003834 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d10b      	bne.n	8003834 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d004      	beq.n	800382c <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8003822:	2004      	movs	r0, #4
 8003824:	f000 fc25 	bl	8004072 <xQueueCreateMutex>
 8003828:	61f8      	str	r0, [r7, #28]
 800382a:	e003      	b.n	8003834 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800382c:	2001      	movs	r0, #1
 800382e:	f000 fc20 	bl	8004072 <xQueueCreateMutex>
 8003832:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d00c      	beq.n	8003854 <osMutexNew+0xee>
        if (attr != NULL) {
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d003      	beq.n	8003848 <osMutexNew+0xe2>
          name = attr->name;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	60fb      	str	r3, [r7, #12]
 8003846:	e001      	b.n	800384c <osMutexNew+0xe6>
        } else {
          name = NULL;
 8003848:	2300      	movs	r3, #0
 800384a:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800384c:	68f9      	ldr	r1, [r7, #12]
 800384e:	69f8      	ldr	r0, [r7, #28]
 8003850:	f001 f9ea 	bl	8004c28 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d006      	beq.n	8003868 <osMutexNew+0x102>
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d003      	beq.n	8003868 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	f043 0301 	orr.w	r3, r3, #1
 8003866:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8003868:	69fb      	ldr	r3, [r7, #28]
}
 800386a:	4618      	mov	r0, r3
 800386c:	3720      	adds	r7, #32
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}

08003872 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8003872:	b580      	push	{r7, lr}
 8003874:	b086      	sub	sp, #24
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
 800387a:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f023 0301 	bic.w	r3, r3, #1
 8003882:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f003 0301 	and.w	r3, r3, #1
 800388a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800388c:	2300      	movs	r3, #0
 800388e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003890:	f3ef 8305 	mrs	r3, IPSR
 8003894:	60bb      	str	r3, [r7, #8]
  return(result);
 8003896:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8003898:	2b00      	cmp	r3, #0
 800389a:	d003      	beq.n	80038a4 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800389c:	f06f 0305 	mvn.w	r3, #5
 80038a0:	617b      	str	r3, [r7, #20]
 80038a2:	e02c      	b.n	80038fe <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d103      	bne.n	80038b2 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80038aa:	f06f 0303 	mvn.w	r3, #3
 80038ae:	617b      	str	r3, [r7, #20]
 80038b0:	e025      	b.n	80038fe <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d011      	beq.n	80038dc <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80038b8:	6839      	ldr	r1, [r7, #0]
 80038ba:	6938      	ldr	r0, [r7, #16]
 80038bc:	f000 fc41 	bl	8004142 <xQueueTakeMutexRecursive>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d01b      	beq.n	80038fe <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d003      	beq.n	80038d4 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80038cc:	f06f 0301 	mvn.w	r3, #1
 80038d0:	617b      	str	r3, [r7, #20]
 80038d2:	e014      	b.n	80038fe <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80038d4:	f06f 0302 	mvn.w	r3, #2
 80038d8:	617b      	str	r3, [r7, #20]
 80038da:	e010      	b.n	80038fe <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80038dc:	6839      	ldr	r1, [r7, #0]
 80038de:	6938      	ldr	r0, [r7, #16]
 80038e0:	f000 fee8 	bl	80046b4 <xQueueSemaphoreTake>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d009      	beq.n	80038fe <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d003      	beq.n	80038f8 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80038f0:	f06f 0301 	mvn.w	r3, #1
 80038f4:	617b      	str	r3, [r7, #20]
 80038f6:	e002      	b.n	80038fe <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80038f8:	f06f 0302 	mvn.w	r3, #2
 80038fc:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80038fe:	697b      	ldr	r3, [r7, #20]
}
 8003900:	4618      	mov	r0, r3
 8003902:	3718      	adds	r7, #24
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}

08003908 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8003908:	b580      	push	{r7, lr}
 800390a:	b086      	sub	sp, #24
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f023 0301 	bic.w	r3, r3, #1
 8003916:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8003920:	2300      	movs	r3, #0
 8003922:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003924:	f3ef 8305 	mrs	r3, IPSR
 8003928:	60bb      	str	r3, [r7, #8]
  return(result);
 800392a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800392c:	2b00      	cmp	r3, #0
 800392e:	d003      	beq.n	8003938 <osMutexRelease+0x30>
    stat = osErrorISR;
 8003930:	f06f 0305 	mvn.w	r3, #5
 8003934:	617b      	str	r3, [r7, #20]
 8003936:	e01f      	b.n	8003978 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d103      	bne.n	8003946 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800393e:	f06f 0303 	mvn.w	r3, #3
 8003942:	617b      	str	r3, [r7, #20]
 8003944:	e018      	b.n	8003978 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d009      	beq.n	8003960 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800394c:	6938      	ldr	r0, [r7, #16]
 800394e:	f000 fbc3 	bl	80040d8 <xQueueGiveMutexRecursive>
 8003952:	4603      	mov	r3, r0
 8003954:	2b01      	cmp	r3, #1
 8003956:	d00f      	beq.n	8003978 <osMutexRelease+0x70>
        stat = osErrorResource;
 8003958:	f06f 0302 	mvn.w	r3, #2
 800395c:	617b      	str	r3, [r7, #20]
 800395e:	e00b      	b.n	8003978 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8003960:	2300      	movs	r3, #0
 8003962:	2200      	movs	r2, #0
 8003964:	2100      	movs	r1, #0
 8003966:	6938      	ldr	r0, [r7, #16]
 8003968:	f000 fc22 	bl	80041b0 <xQueueGenericSend>
 800396c:	4603      	mov	r3, r0
 800396e:	2b01      	cmp	r3, #1
 8003970:	d002      	beq.n	8003978 <osMutexRelease+0x70>
        stat = osErrorResource;
 8003972:	f06f 0302 	mvn.w	r3, #2
 8003976:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8003978:	697b      	ldr	r3, [r7, #20]
}
 800397a:	4618      	mov	r0, r3
 800397c:	3718      	adds	r7, #24
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}

08003982 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8003982:	b580      	push	{r7, lr}
 8003984:	b08a      	sub	sp, #40	@ 0x28
 8003986:	af02      	add	r7, sp, #8
 8003988:	60f8      	str	r0, [r7, #12]
 800398a:	60b9      	str	r1, [r7, #8]
 800398c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800398e:	2300      	movs	r3, #0
 8003990:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003992:	f3ef 8305 	mrs	r3, IPSR
 8003996:	613b      	str	r3, [r7, #16]
  return(result);
 8003998:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800399a:	2b00      	cmp	r3, #0
 800399c:	d15f      	bne.n	8003a5e <osMessageQueueNew+0xdc>
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d05c      	beq.n	8003a5e <osMessageQueueNew+0xdc>
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d059      	beq.n	8003a5e <osMessageQueueNew+0xdc>
    mem = -1;
 80039aa:	f04f 33ff 	mov.w	r3, #4294967295
 80039ae:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d029      	beq.n	8003a0a <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d012      	beq.n	80039e4 <osMessageQueueNew+0x62>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	2b4f      	cmp	r3, #79	@ 0x4f
 80039c4:	d90e      	bls.n	80039e4 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d00a      	beq.n	80039e4 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	695a      	ldr	r2, [r3, #20]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	68b9      	ldr	r1, [r7, #8]
 80039d6:	fb01 f303 	mul.w	r3, r1, r3
 80039da:	429a      	cmp	r2, r3
 80039dc:	d302      	bcc.n	80039e4 <osMessageQueueNew+0x62>
        mem = 1;
 80039de:	2301      	movs	r3, #1
 80039e0:	61bb      	str	r3, [r7, #24]
 80039e2:	e014      	b.n	8003a0e <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d110      	bne.n	8003a0e <osMessageQueueNew+0x8c>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d10c      	bne.n	8003a0e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d108      	bne.n	8003a0e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	695b      	ldr	r3, [r3, #20]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d104      	bne.n	8003a0e <osMessageQueueNew+0x8c>
          mem = 0;
 8003a04:	2300      	movs	r3, #0
 8003a06:	61bb      	str	r3, [r7, #24]
 8003a08:	e001      	b.n	8003a0e <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003a0e:	69bb      	ldr	r3, [r7, #24]
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d10b      	bne.n	8003a2c <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	691a      	ldr	r2, [r3, #16]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	2100      	movs	r1, #0
 8003a1e:	9100      	str	r1, [sp, #0]
 8003a20:	68b9      	ldr	r1, [r7, #8]
 8003a22:	68f8      	ldr	r0, [r7, #12]
 8003a24:	f000 fa30 	bl	8003e88 <xQueueGenericCreateStatic>
 8003a28:	61f8      	str	r0, [r7, #28]
 8003a2a:	e008      	b.n	8003a3e <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d105      	bne.n	8003a3e <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8003a32:	2200      	movs	r2, #0
 8003a34:	68b9      	ldr	r1, [r7, #8]
 8003a36:	68f8      	ldr	r0, [r7, #12]
 8003a38:	f000 faa3 	bl	8003f82 <xQueueGenericCreate>
 8003a3c:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d00c      	beq.n	8003a5e <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d003      	beq.n	8003a52 <osMessageQueueNew+0xd0>
        name = attr->name;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	617b      	str	r3, [r7, #20]
 8003a50:	e001      	b.n	8003a56 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8003a52:	2300      	movs	r3, #0
 8003a54:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8003a56:	6979      	ldr	r1, [r7, #20]
 8003a58:	69f8      	ldr	r0, [r7, #28]
 8003a5a:	f001 f8e5 	bl	8004c28 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8003a5e:	69fb      	ldr	r3, [r7, #28]
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3720      	adds	r7, #32
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b088      	sub	sp, #32
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	603b      	str	r3, [r7, #0]
 8003a74:	4613      	mov	r3, r2
 8003a76:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a80:	f3ef 8305 	mrs	r3, IPSR
 8003a84:	617b      	str	r3, [r7, #20]
  return(result);
 8003a86:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d028      	beq.n	8003ade <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003a8c:	69bb      	ldr	r3, [r7, #24]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d005      	beq.n	8003a9e <osMessageQueuePut+0x36>
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d002      	beq.n	8003a9e <osMessageQueuePut+0x36>
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d003      	beq.n	8003aa6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8003a9e:	f06f 0303 	mvn.w	r3, #3
 8003aa2:	61fb      	str	r3, [r7, #28]
 8003aa4:	e038      	b.n	8003b18 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8003aaa:	f107 0210 	add.w	r2, r7, #16
 8003aae:	2300      	movs	r3, #0
 8003ab0:	68b9      	ldr	r1, [r7, #8]
 8003ab2:	69b8      	ldr	r0, [r7, #24]
 8003ab4:	f000 fc7e 	bl	80043b4 <xQueueGenericSendFromISR>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d003      	beq.n	8003ac6 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8003abe:	f06f 0302 	mvn.w	r3, #2
 8003ac2:	61fb      	str	r3, [r7, #28]
 8003ac4:	e028      	b.n	8003b18 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d025      	beq.n	8003b18 <osMessageQueuePut+0xb0>
 8003acc:	4b15      	ldr	r3, [pc, #84]	@ (8003b24 <osMessageQueuePut+0xbc>)
 8003ace:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ad2:	601a      	str	r2, [r3, #0]
 8003ad4:	f3bf 8f4f 	dsb	sy
 8003ad8:	f3bf 8f6f 	isb	sy
 8003adc:	e01c      	b.n	8003b18 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d002      	beq.n	8003aea <osMessageQueuePut+0x82>
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d103      	bne.n	8003af2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8003aea:	f06f 0303 	mvn.w	r3, #3
 8003aee:	61fb      	str	r3, [r7, #28]
 8003af0:	e012      	b.n	8003b18 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003af2:	2300      	movs	r3, #0
 8003af4:	683a      	ldr	r2, [r7, #0]
 8003af6:	68b9      	ldr	r1, [r7, #8]
 8003af8:	69b8      	ldr	r0, [r7, #24]
 8003afa:	f000 fb59 	bl	80041b0 <xQueueGenericSend>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d009      	beq.n	8003b18 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d003      	beq.n	8003b12 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8003b0a:	f06f 0301 	mvn.w	r3, #1
 8003b0e:	61fb      	str	r3, [r7, #28]
 8003b10:	e002      	b.n	8003b18 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8003b12:	f06f 0302 	mvn.w	r3, #2
 8003b16:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8003b18:	69fb      	ldr	r3, [r7, #28]
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3720      	adds	r7, #32
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	e000ed04 	.word	0xe000ed04

08003b28 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b088      	sub	sp, #32
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	60f8      	str	r0, [r7, #12]
 8003b30:	60b9      	str	r1, [r7, #8]
 8003b32:	607a      	str	r2, [r7, #4]
 8003b34:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b3e:	f3ef 8305 	mrs	r3, IPSR
 8003b42:	617b      	str	r3, [r7, #20]
  return(result);
 8003b44:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d028      	beq.n	8003b9c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d005      	beq.n	8003b5c <osMessageQueueGet+0x34>
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d002      	beq.n	8003b5c <osMessageQueueGet+0x34>
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d003      	beq.n	8003b64 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8003b5c:	f06f 0303 	mvn.w	r3, #3
 8003b60:	61fb      	str	r3, [r7, #28]
 8003b62:	e037      	b.n	8003bd4 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8003b64:	2300      	movs	r3, #0
 8003b66:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8003b68:	f107 0310 	add.w	r3, r7, #16
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	68b9      	ldr	r1, [r7, #8]
 8003b70:	69b8      	ldr	r0, [r7, #24]
 8003b72:	f000 feaf 	bl	80048d4 <xQueueReceiveFromISR>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d003      	beq.n	8003b84 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8003b7c:	f06f 0302 	mvn.w	r3, #2
 8003b80:	61fb      	str	r3, [r7, #28]
 8003b82:	e027      	b.n	8003bd4 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d024      	beq.n	8003bd4 <osMessageQueueGet+0xac>
 8003b8a:	4b15      	ldr	r3, [pc, #84]	@ (8003be0 <osMessageQueueGet+0xb8>)
 8003b8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b90:	601a      	str	r2, [r3, #0]
 8003b92:	f3bf 8f4f 	dsb	sy
 8003b96:	f3bf 8f6f 	isb	sy
 8003b9a:	e01b      	b.n	8003bd4 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003b9c:	69bb      	ldr	r3, [r7, #24]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d002      	beq.n	8003ba8 <osMessageQueueGet+0x80>
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d103      	bne.n	8003bb0 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8003ba8:	f06f 0303 	mvn.w	r3, #3
 8003bac:	61fb      	str	r3, [r7, #28]
 8003bae:	e011      	b.n	8003bd4 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003bb0:	683a      	ldr	r2, [r7, #0]
 8003bb2:	68b9      	ldr	r1, [r7, #8]
 8003bb4:	69b8      	ldr	r0, [r7, #24]
 8003bb6:	f000 fc9b 	bl	80044f0 <xQueueReceive>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d009      	beq.n	8003bd4 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d003      	beq.n	8003bce <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8003bc6:	f06f 0301 	mvn.w	r3, #1
 8003bca:	61fb      	str	r3, [r7, #28]
 8003bcc:	e002      	b.n	8003bd4 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8003bce:	f06f 0302 	mvn.w	r3, #2
 8003bd2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8003bd4:	69fb      	ldr	r3, [r7, #28]
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3720      	adds	r7, #32
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	e000ed04 	.word	0xe000ed04

08003be4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003be4:	b480      	push	{r7}
 8003be6:	b085      	sub	sp, #20
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	4a07      	ldr	r2, [pc, #28]	@ (8003c10 <vApplicationGetIdleTaskMemory+0x2c>)
 8003bf4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	4a06      	ldr	r2, [pc, #24]	@ (8003c14 <vApplicationGetIdleTaskMemory+0x30>)
 8003bfa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2280      	movs	r2, #128	@ 0x80
 8003c00:	601a      	str	r2, [r3, #0]
}
 8003c02:	bf00      	nop
 8003c04:	3714      	adds	r7, #20
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	20000120 	.word	0x20000120
 8003c14:	2000017c 	.word	0x2000017c

08003c18 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003c18:	b480      	push	{r7}
 8003c1a:	b085      	sub	sp, #20
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	60b9      	str	r1, [r7, #8]
 8003c22:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	4a07      	ldr	r2, [pc, #28]	@ (8003c44 <vApplicationGetTimerTaskMemory+0x2c>)
 8003c28:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	4a06      	ldr	r2, [pc, #24]	@ (8003c48 <vApplicationGetTimerTaskMemory+0x30>)
 8003c2e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003c36:	601a      	str	r2, [r3, #0]
}
 8003c38:	bf00      	nop
 8003c3a:	3714      	adds	r7, #20
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr
 8003c44:	2000037c 	.word	0x2000037c
 8003c48:	200003d8 	.word	0x200003d8

08003c4c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f103 0208 	add.w	r2, r3, #8
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f04f 32ff 	mov.w	r2, #4294967295
 8003c64:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f103 0208 	add.w	r2, r3, #8
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f103 0208 	add.w	r2, r3, #8
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003c80:	bf00      	nop
 8003c82:	370c      	adds	r7, #12
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr

08003c8c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003c9a:	bf00      	nop
 8003c9c:	370c      	adds	r7, #12
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr

08003ca6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003ca6:	b480      	push	{r7}
 8003ca8:	b085      	sub	sp, #20
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
 8003cae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	68fa      	ldr	r2, [r7, #12]
 8003cba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	689a      	ldr	r2, [r3, #8]
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	683a      	ldr	r2, [r7, #0]
 8003cca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	683a      	ldr	r2, [r7, #0]
 8003cd0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	1c5a      	adds	r2, r3, #1
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	601a      	str	r2, [r3, #0]
}
 8003ce2:	bf00      	nop
 8003ce4:	3714      	adds	r7, #20
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr

08003cee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003cee:	b480      	push	{r7}
 8003cf0:	b085      	sub	sp, #20
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
 8003cf6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d04:	d103      	bne.n	8003d0e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	60fb      	str	r3, [r7, #12]
 8003d0c:	e00c      	b.n	8003d28 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	3308      	adds	r3, #8
 8003d12:	60fb      	str	r3, [r7, #12]
 8003d14:	e002      	b.n	8003d1c <vListInsert+0x2e>
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	60fb      	str	r3, [r7, #12]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68ba      	ldr	r2, [r7, #8]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d2f6      	bcs.n	8003d16 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	685a      	ldr	r2, [r3, #4]
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	683a      	ldr	r2, [r7, #0]
 8003d36:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	68fa      	ldr	r2, [r7, #12]
 8003d3c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	683a      	ldr	r2, [r7, #0]
 8003d42:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	1c5a      	adds	r2, r3, #1
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	601a      	str	r2, [r3, #0]
}
 8003d54:	bf00      	nop
 8003d56:	3714      	adds	r7, #20
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr

08003d60 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003d60:	b480      	push	{r7}
 8003d62:	b085      	sub	sp, #20
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	691b      	ldr	r3, [r3, #16]
 8003d6c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	6892      	ldr	r2, [r2, #8]
 8003d76:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	6852      	ldr	r2, [r2, #4]
 8003d80:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d103      	bne.n	8003d94 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	689a      	ldr	r2, [r3, #8]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	1e5a      	subs	r2, r3, #1
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3714      	adds	r7, #20
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d10b      	bne.n	8003de0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003dc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dcc:	f383 8811 	msr	BASEPRI, r3
 8003dd0:	f3bf 8f6f 	isb	sy
 8003dd4:	f3bf 8f4f 	dsb	sy
 8003dd8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003dda:	bf00      	nop
 8003ddc:	bf00      	nop
 8003dde:	e7fd      	b.n	8003ddc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003de0:	f002 fc2a 	bl	8006638 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dec:	68f9      	ldr	r1, [r7, #12]
 8003dee:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003df0:	fb01 f303 	mul.w	r3, r1, r3
 8003df4:	441a      	add	r2, r3
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e10:	3b01      	subs	r3, #1
 8003e12:	68f9      	ldr	r1, [r7, #12]
 8003e14:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003e16:	fb01 f303 	mul.w	r3, r1, r3
 8003e1a:	441a      	add	r2, r3
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	22ff      	movs	r2, #255	@ 0xff
 8003e24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	22ff      	movs	r2, #255	@ 0xff
 8003e2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d114      	bne.n	8003e60 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d01a      	beq.n	8003e74 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	3310      	adds	r3, #16
 8003e42:	4618      	mov	r0, r3
 8003e44:	f001 fbb8 	bl	80055b8 <xTaskRemoveFromEventList>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d012      	beq.n	8003e74 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003e4e:	4b0d      	ldr	r3, [pc, #52]	@ (8003e84 <xQueueGenericReset+0xd0>)
 8003e50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e54:	601a      	str	r2, [r3, #0]
 8003e56:	f3bf 8f4f 	dsb	sy
 8003e5a:	f3bf 8f6f 	isb	sy
 8003e5e:	e009      	b.n	8003e74 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	3310      	adds	r3, #16
 8003e64:	4618      	mov	r0, r3
 8003e66:	f7ff fef1 	bl	8003c4c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	3324      	adds	r3, #36	@ 0x24
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f7ff feec 	bl	8003c4c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003e74:	f002 fc12 	bl	800669c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003e78:	2301      	movs	r3, #1
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3710      	adds	r7, #16
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	e000ed04 	.word	0xe000ed04

08003e88 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b08e      	sub	sp, #56	@ 0x38
 8003e8c:	af02      	add	r7, sp, #8
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	60b9      	str	r1, [r7, #8]
 8003e92:	607a      	str	r2, [r7, #4]
 8003e94:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d10b      	bne.n	8003eb4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003e9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ea0:	f383 8811 	msr	BASEPRI, r3
 8003ea4:	f3bf 8f6f 	isb	sy
 8003ea8:	f3bf 8f4f 	dsb	sy
 8003eac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003eae:	bf00      	nop
 8003eb0:	bf00      	nop
 8003eb2:	e7fd      	b.n	8003eb0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d10b      	bne.n	8003ed2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003eba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ebe:	f383 8811 	msr	BASEPRI, r3
 8003ec2:	f3bf 8f6f 	isb	sy
 8003ec6:	f3bf 8f4f 	dsb	sy
 8003eca:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003ecc:	bf00      	nop
 8003ece:	bf00      	nop
 8003ed0:	e7fd      	b.n	8003ece <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d002      	beq.n	8003ede <xQueueGenericCreateStatic+0x56>
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d001      	beq.n	8003ee2 <xQueueGenericCreateStatic+0x5a>
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e000      	b.n	8003ee4 <xQueueGenericCreateStatic+0x5c>
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d10b      	bne.n	8003f00 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003ee8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eec:	f383 8811 	msr	BASEPRI, r3
 8003ef0:	f3bf 8f6f 	isb	sy
 8003ef4:	f3bf 8f4f 	dsb	sy
 8003ef8:	623b      	str	r3, [r7, #32]
}
 8003efa:	bf00      	nop
 8003efc:	bf00      	nop
 8003efe:	e7fd      	b.n	8003efc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d102      	bne.n	8003f0c <xQueueGenericCreateStatic+0x84>
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d101      	bne.n	8003f10 <xQueueGenericCreateStatic+0x88>
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e000      	b.n	8003f12 <xQueueGenericCreateStatic+0x8a>
 8003f10:	2300      	movs	r3, #0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d10b      	bne.n	8003f2e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003f16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f1a:	f383 8811 	msr	BASEPRI, r3
 8003f1e:	f3bf 8f6f 	isb	sy
 8003f22:	f3bf 8f4f 	dsb	sy
 8003f26:	61fb      	str	r3, [r7, #28]
}
 8003f28:	bf00      	nop
 8003f2a:	bf00      	nop
 8003f2c:	e7fd      	b.n	8003f2a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003f2e:	2350      	movs	r3, #80	@ 0x50
 8003f30:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	2b50      	cmp	r3, #80	@ 0x50
 8003f36:	d00b      	beq.n	8003f50 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003f38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f3c:	f383 8811 	msr	BASEPRI, r3
 8003f40:	f3bf 8f6f 	isb	sy
 8003f44:	f3bf 8f4f 	dsb	sy
 8003f48:	61bb      	str	r3, [r7, #24]
}
 8003f4a:	bf00      	nop
 8003f4c:	bf00      	nop
 8003f4e:	e7fd      	b.n	8003f4c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003f50:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003f56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d00d      	beq.n	8003f78 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003f5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003f64:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003f68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f6a:	9300      	str	r3, [sp, #0]
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	68b9      	ldr	r1, [r7, #8]
 8003f72:	68f8      	ldr	r0, [r7, #12]
 8003f74:	f000 f840 	bl	8003ff8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003f78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3730      	adds	r7, #48	@ 0x30
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}

08003f82 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003f82:	b580      	push	{r7, lr}
 8003f84:	b08a      	sub	sp, #40	@ 0x28
 8003f86:	af02      	add	r7, sp, #8
 8003f88:	60f8      	str	r0, [r7, #12]
 8003f8a:	60b9      	str	r1, [r7, #8]
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d10b      	bne.n	8003fae <xQueueGenericCreate+0x2c>
	__asm volatile
 8003f96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f9a:	f383 8811 	msr	BASEPRI, r3
 8003f9e:	f3bf 8f6f 	isb	sy
 8003fa2:	f3bf 8f4f 	dsb	sy
 8003fa6:	613b      	str	r3, [r7, #16]
}
 8003fa8:	bf00      	nop
 8003faa:	bf00      	nop
 8003fac:	e7fd      	b.n	8003faa <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	68ba      	ldr	r2, [r7, #8]
 8003fb2:	fb02 f303 	mul.w	r3, r2, r3
 8003fb6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	3350      	adds	r3, #80	@ 0x50
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f002 fc5d 	bl	800687c <pvPortMalloc>
 8003fc2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003fc4:	69bb      	ldr	r3, [r7, #24]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d011      	beq.n	8003fee <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003fca:	69bb      	ldr	r3, [r7, #24]
 8003fcc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	3350      	adds	r3, #80	@ 0x50
 8003fd2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003fdc:	79fa      	ldrb	r2, [r7, #7]
 8003fde:	69bb      	ldr	r3, [r7, #24]
 8003fe0:	9300      	str	r3, [sp, #0]
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	697a      	ldr	r2, [r7, #20]
 8003fe6:	68b9      	ldr	r1, [r7, #8]
 8003fe8:	68f8      	ldr	r0, [r7, #12]
 8003fea:	f000 f805 	bl	8003ff8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003fee:	69bb      	ldr	r3, [r7, #24]
	}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3720      	adds	r7, #32
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	60b9      	str	r1, [r7, #8]
 8004002:	607a      	str	r2, [r7, #4]
 8004004:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d103      	bne.n	8004014 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800400c:	69bb      	ldr	r3, [r7, #24]
 800400e:	69ba      	ldr	r2, [r7, #24]
 8004010:	601a      	str	r2, [r3, #0]
 8004012:	e002      	b.n	800401a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800401a:	69bb      	ldr	r3, [r7, #24]
 800401c:	68fa      	ldr	r2, [r7, #12]
 800401e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004020:	69bb      	ldr	r3, [r7, #24]
 8004022:	68ba      	ldr	r2, [r7, #8]
 8004024:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004026:	2101      	movs	r1, #1
 8004028:	69b8      	ldr	r0, [r7, #24]
 800402a:	f7ff fec3 	bl	8003db4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	78fa      	ldrb	r2, [r7, #3]
 8004032:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004036:	bf00      	nop
 8004038:	3710      	adds	r7, #16
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}

0800403e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800403e:	b580      	push	{r7, lr}
 8004040:	b082      	sub	sp, #8
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d00e      	beq.n	800406a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2200      	movs	r2, #0
 800405c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800405e:	2300      	movs	r3, #0
 8004060:	2200      	movs	r2, #0
 8004062:	2100      	movs	r1, #0
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f000 f8a3 	bl	80041b0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800406a:	bf00      	nop
 800406c:	3708      	adds	r7, #8
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}

08004072 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004072:	b580      	push	{r7, lr}
 8004074:	b086      	sub	sp, #24
 8004076:	af00      	add	r7, sp, #0
 8004078:	4603      	mov	r3, r0
 800407a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800407c:	2301      	movs	r3, #1
 800407e:	617b      	str	r3, [r7, #20]
 8004080:	2300      	movs	r3, #0
 8004082:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004084:	79fb      	ldrb	r3, [r7, #7]
 8004086:	461a      	mov	r2, r3
 8004088:	6939      	ldr	r1, [r7, #16]
 800408a:	6978      	ldr	r0, [r7, #20]
 800408c:	f7ff ff79 	bl	8003f82 <xQueueGenericCreate>
 8004090:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004092:	68f8      	ldr	r0, [r7, #12]
 8004094:	f7ff ffd3 	bl	800403e <prvInitialiseMutex>

		return xNewQueue;
 8004098:	68fb      	ldr	r3, [r7, #12]
	}
 800409a:	4618      	mov	r0, r3
 800409c:	3718      	adds	r7, #24
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}

080040a2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80040a2:	b580      	push	{r7, lr}
 80040a4:	b088      	sub	sp, #32
 80040a6:	af02      	add	r7, sp, #8
 80040a8:	4603      	mov	r3, r0
 80040aa:	6039      	str	r1, [r7, #0]
 80040ac:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80040ae:	2301      	movs	r3, #1
 80040b0:	617b      	str	r3, [r7, #20]
 80040b2:	2300      	movs	r3, #0
 80040b4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80040b6:	79fb      	ldrb	r3, [r7, #7]
 80040b8:	9300      	str	r3, [sp, #0]
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	2200      	movs	r2, #0
 80040be:	6939      	ldr	r1, [r7, #16]
 80040c0:	6978      	ldr	r0, [r7, #20]
 80040c2:	f7ff fee1 	bl	8003e88 <xQueueGenericCreateStatic>
 80040c6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80040c8:	68f8      	ldr	r0, [r7, #12]
 80040ca:	f7ff ffb8 	bl	800403e <prvInitialiseMutex>

		return xNewQueue;
 80040ce:	68fb      	ldr	r3, [r7, #12]
	}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3718      	adds	r7, #24
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}

080040d8 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80040d8:	b590      	push	{r4, r7, lr}
 80040da:	b087      	sub	sp, #28
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d10b      	bne.n	8004102 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 80040ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040ee:	f383 8811 	msr	BASEPRI, r3
 80040f2:	f3bf 8f6f 	isb	sy
 80040f6:	f3bf 8f4f 	dsb	sy
 80040fa:	60fb      	str	r3, [r7, #12]
}
 80040fc:	bf00      	nop
 80040fe:	bf00      	nop
 8004100:	e7fd      	b.n	80040fe <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	689c      	ldr	r4, [r3, #8]
 8004106:	f001 fc17 	bl	8005938 <xTaskGetCurrentTaskHandle>
 800410a:	4603      	mov	r3, r0
 800410c:	429c      	cmp	r4, r3
 800410e:	d111      	bne.n	8004134 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	1e5a      	subs	r2, r3, #1
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d105      	bne.n	800412e <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8004122:	2300      	movs	r3, #0
 8004124:	2200      	movs	r2, #0
 8004126:	2100      	movs	r1, #0
 8004128:	6938      	ldr	r0, [r7, #16]
 800412a:	f000 f841 	bl	80041b0 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800412e:	2301      	movs	r3, #1
 8004130:	617b      	str	r3, [r7, #20]
 8004132:	e001      	b.n	8004138 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8004134:	2300      	movs	r3, #0
 8004136:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8004138:	697b      	ldr	r3, [r7, #20]
	}
 800413a:	4618      	mov	r0, r3
 800413c:	371c      	adds	r7, #28
 800413e:	46bd      	mov	sp, r7
 8004140:	bd90      	pop	{r4, r7, pc}

08004142 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8004142:	b590      	push	{r4, r7, lr}
 8004144:	b087      	sub	sp, #28
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
 800414a:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d10b      	bne.n	800416e <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8004156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800415a:	f383 8811 	msr	BASEPRI, r3
 800415e:	f3bf 8f6f 	isb	sy
 8004162:	f3bf 8f4f 	dsb	sy
 8004166:	60fb      	str	r3, [r7, #12]
}
 8004168:	bf00      	nop
 800416a:	bf00      	nop
 800416c:	e7fd      	b.n	800416a <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	689c      	ldr	r4, [r3, #8]
 8004172:	f001 fbe1 	bl	8005938 <xTaskGetCurrentTaskHandle>
 8004176:	4603      	mov	r3, r0
 8004178:	429c      	cmp	r4, r3
 800417a:	d107      	bne.n	800418c <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	1c5a      	adds	r2, r3, #1
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8004186:	2301      	movs	r3, #1
 8004188:	617b      	str	r3, [r7, #20]
 800418a:	e00c      	b.n	80041a6 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800418c:	6839      	ldr	r1, [r7, #0]
 800418e:	6938      	ldr	r0, [r7, #16]
 8004190:	f000 fa90 	bl	80046b4 <xQueueSemaphoreTake>
 8004194:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d004      	beq.n	80041a6 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	1c5a      	adds	r2, r3, #1
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80041a6:	697b      	ldr	r3, [r7, #20]
	}
 80041a8:	4618      	mov	r0, r3
 80041aa:	371c      	adds	r7, #28
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd90      	pop	{r4, r7, pc}

080041b0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b08e      	sub	sp, #56	@ 0x38
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	60f8      	str	r0, [r7, #12]
 80041b8:	60b9      	str	r1, [r7, #8]
 80041ba:	607a      	str	r2, [r7, #4]
 80041bc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80041be:	2300      	movs	r3, #0
 80041c0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80041c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d10b      	bne.n	80041e4 <xQueueGenericSend+0x34>
	__asm volatile
 80041cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041d0:	f383 8811 	msr	BASEPRI, r3
 80041d4:	f3bf 8f6f 	isb	sy
 80041d8:	f3bf 8f4f 	dsb	sy
 80041dc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80041de:	bf00      	nop
 80041e0:	bf00      	nop
 80041e2:	e7fd      	b.n	80041e0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d103      	bne.n	80041f2 <xQueueGenericSend+0x42>
 80041ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d101      	bne.n	80041f6 <xQueueGenericSend+0x46>
 80041f2:	2301      	movs	r3, #1
 80041f4:	e000      	b.n	80041f8 <xQueueGenericSend+0x48>
 80041f6:	2300      	movs	r3, #0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d10b      	bne.n	8004214 <xQueueGenericSend+0x64>
	__asm volatile
 80041fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004200:	f383 8811 	msr	BASEPRI, r3
 8004204:	f3bf 8f6f 	isb	sy
 8004208:	f3bf 8f4f 	dsb	sy
 800420c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800420e:	bf00      	nop
 8004210:	bf00      	nop
 8004212:	e7fd      	b.n	8004210 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	2b02      	cmp	r3, #2
 8004218:	d103      	bne.n	8004222 <xQueueGenericSend+0x72>
 800421a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800421c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800421e:	2b01      	cmp	r3, #1
 8004220:	d101      	bne.n	8004226 <xQueueGenericSend+0x76>
 8004222:	2301      	movs	r3, #1
 8004224:	e000      	b.n	8004228 <xQueueGenericSend+0x78>
 8004226:	2300      	movs	r3, #0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d10b      	bne.n	8004244 <xQueueGenericSend+0x94>
	__asm volatile
 800422c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004230:	f383 8811 	msr	BASEPRI, r3
 8004234:	f3bf 8f6f 	isb	sy
 8004238:	f3bf 8f4f 	dsb	sy
 800423c:	623b      	str	r3, [r7, #32]
}
 800423e:	bf00      	nop
 8004240:	bf00      	nop
 8004242:	e7fd      	b.n	8004240 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004244:	f001 fb88 	bl	8005958 <xTaskGetSchedulerState>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d102      	bne.n	8004254 <xQueueGenericSend+0xa4>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d101      	bne.n	8004258 <xQueueGenericSend+0xa8>
 8004254:	2301      	movs	r3, #1
 8004256:	e000      	b.n	800425a <xQueueGenericSend+0xaa>
 8004258:	2300      	movs	r3, #0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d10b      	bne.n	8004276 <xQueueGenericSend+0xc6>
	__asm volatile
 800425e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004262:	f383 8811 	msr	BASEPRI, r3
 8004266:	f3bf 8f6f 	isb	sy
 800426a:	f3bf 8f4f 	dsb	sy
 800426e:	61fb      	str	r3, [r7, #28]
}
 8004270:	bf00      	nop
 8004272:	bf00      	nop
 8004274:	e7fd      	b.n	8004272 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004276:	f002 f9df 	bl	8006638 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800427a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800427c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800427e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004280:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004282:	429a      	cmp	r2, r3
 8004284:	d302      	bcc.n	800428c <xQueueGenericSend+0xdc>
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	2b02      	cmp	r3, #2
 800428a:	d129      	bne.n	80042e0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800428c:	683a      	ldr	r2, [r7, #0]
 800428e:	68b9      	ldr	r1, [r7, #8]
 8004290:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004292:	f000 fbb9 	bl	8004a08 <prvCopyDataToQueue>
 8004296:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800429a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800429c:	2b00      	cmp	r3, #0
 800429e:	d010      	beq.n	80042c2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80042a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042a2:	3324      	adds	r3, #36	@ 0x24
 80042a4:	4618      	mov	r0, r3
 80042a6:	f001 f987 	bl	80055b8 <xTaskRemoveFromEventList>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d013      	beq.n	80042d8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80042b0:	4b3f      	ldr	r3, [pc, #252]	@ (80043b0 <xQueueGenericSend+0x200>)
 80042b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80042b6:	601a      	str	r2, [r3, #0]
 80042b8:	f3bf 8f4f 	dsb	sy
 80042bc:	f3bf 8f6f 	isb	sy
 80042c0:	e00a      	b.n	80042d8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80042c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d007      	beq.n	80042d8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80042c8:	4b39      	ldr	r3, [pc, #228]	@ (80043b0 <xQueueGenericSend+0x200>)
 80042ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80042ce:	601a      	str	r2, [r3, #0]
 80042d0:	f3bf 8f4f 	dsb	sy
 80042d4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80042d8:	f002 f9e0 	bl	800669c <vPortExitCritical>
				return pdPASS;
 80042dc:	2301      	movs	r3, #1
 80042de:	e063      	b.n	80043a8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d103      	bne.n	80042ee <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80042e6:	f002 f9d9 	bl	800669c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80042ea:	2300      	movs	r3, #0
 80042ec:	e05c      	b.n	80043a8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80042ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d106      	bne.n	8004302 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80042f4:	f107 0314 	add.w	r3, r7, #20
 80042f8:	4618      	mov	r0, r3
 80042fa:	f001 f9c1 	bl	8005680 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80042fe:	2301      	movs	r3, #1
 8004300:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004302:	f002 f9cb 	bl	800669c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004306:	f000 ff31 	bl	800516c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800430a:	f002 f995 	bl	8006638 <vPortEnterCritical>
 800430e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004310:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004314:	b25b      	sxtb	r3, r3
 8004316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800431a:	d103      	bne.n	8004324 <xQueueGenericSend+0x174>
 800431c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800431e:	2200      	movs	r2, #0
 8004320:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004326:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800432a:	b25b      	sxtb	r3, r3
 800432c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004330:	d103      	bne.n	800433a <xQueueGenericSend+0x18a>
 8004332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004334:	2200      	movs	r2, #0
 8004336:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800433a:	f002 f9af 	bl	800669c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800433e:	1d3a      	adds	r2, r7, #4
 8004340:	f107 0314 	add.w	r3, r7, #20
 8004344:	4611      	mov	r1, r2
 8004346:	4618      	mov	r0, r3
 8004348:	f001 f9b0 	bl	80056ac <xTaskCheckForTimeOut>
 800434c:	4603      	mov	r3, r0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d124      	bne.n	800439c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004352:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004354:	f000 fc50 	bl	8004bf8 <prvIsQueueFull>
 8004358:	4603      	mov	r3, r0
 800435a:	2b00      	cmp	r3, #0
 800435c:	d018      	beq.n	8004390 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800435e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004360:	3310      	adds	r3, #16
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	4611      	mov	r1, r2
 8004366:	4618      	mov	r0, r3
 8004368:	f001 f8d4 	bl	8005514 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800436c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800436e:	f000 fbdb 	bl	8004b28 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004372:	f000 ff09 	bl	8005188 <xTaskResumeAll>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	f47f af7c 	bne.w	8004276 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800437e:	4b0c      	ldr	r3, [pc, #48]	@ (80043b0 <xQueueGenericSend+0x200>)
 8004380:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004384:	601a      	str	r2, [r3, #0]
 8004386:	f3bf 8f4f 	dsb	sy
 800438a:	f3bf 8f6f 	isb	sy
 800438e:	e772      	b.n	8004276 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004390:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004392:	f000 fbc9 	bl	8004b28 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004396:	f000 fef7 	bl	8005188 <xTaskResumeAll>
 800439a:	e76c      	b.n	8004276 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800439c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800439e:	f000 fbc3 	bl	8004b28 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80043a2:	f000 fef1 	bl	8005188 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80043a6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3738      	adds	r7, #56	@ 0x38
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	e000ed04 	.word	0xe000ed04

080043b4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b090      	sub	sp, #64	@ 0x40
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	60f8      	str	r0, [r7, #12]
 80043bc:	60b9      	str	r1, [r7, #8]
 80043be:	607a      	str	r2, [r7, #4]
 80043c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80043c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d10b      	bne.n	80043e4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80043cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043d0:	f383 8811 	msr	BASEPRI, r3
 80043d4:	f3bf 8f6f 	isb	sy
 80043d8:	f3bf 8f4f 	dsb	sy
 80043dc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80043de:	bf00      	nop
 80043e0:	bf00      	nop
 80043e2:	e7fd      	b.n	80043e0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d103      	bne.n	80043f2 <xQueueGenericSendFromISR+0x3e>
 80043ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d101      	bne.n	80043f6 <xQueueGenericSendFromISR+0x42>
 80043f2:	2301      	movs	r3, #1
 80043f4:	e000      	b.n	80043f8 <xQueueGenericSendFromISR+0x44>
 80043f6:	2300      	movs	r3, #0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d10b      	bne.n	8004414 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80043fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004400:	f383 8811 	msr	BASEPRI, r3
 8004404:	f3bf 8f6f 	isb	sy
 8004408:	f3bf 8f4f 	dsb	sy
 800440c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800440e:	bf00      	nop
 8004410:	bf00      	nop
 8004412:	e7fd      	b.n	8004410 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	2b02      	cmp	r3, #2
 8004418:	d103      	bne.n	8004422 <xQueueGenericSendFromISR+0x6e>
 800441a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800441c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800441e:	2b01      	cmp	r3, #1
 8004420:	d101      	bne.n	8004426 <xQueueGenericSendFromISR+0x72>
 8004422:	2301      	movs	r3, #1
 8004424:	e000      	b.n	8004428 <xQueueGenericSendFromISR+0x74>
 8004426:	2300      	movs	r3, #0
 8004428:	2b00      	cmp	r3, #0
 800442a:	d10b      	bne.n	8004444 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800442c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004430:	f383 8811 	msr	BASEPRI, r3
 8004434:	f3bf 8f6f 	isb	sy
 8004438:	f3bf 8f4f 	dsb	sy
 800443c:	623b      	str	r3, [r7, #32]
}
 800443e:	bf00      	nop
 8004440:	bf00      	nop
 8004442:	e7fd      	b.n	8004440 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004444:	f002 f9d8 	bl	80067f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004448:	f3ef 8211 	mrs	r2, BASEPRI
 800444c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004450:	f383 8811 	msr	BASEPRI, r3
 8004454:	f3bf 8f6f 	isb	sy
 8004458:	f3bf 8f4f 	dsb	sy
 800445c:	61fa      	str	r2, [r7, #28]
 800445e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004460:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004462:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004466:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004468:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800446a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800446c:	429a      	cmp	r2, r3
 800446e:	d302      	bcc.n	8004476 <xQueueGenericSendFromISR+0xc2>
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	2b02      	cmp	r3, #2
 8004474:	d12f      	bne.n	80044d6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004476:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004478:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800447c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004482:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004484:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004486:	683a      	ldr	r2, [r7, #0]
 8004488:	68b9      	ldr	r1, [r7, #8]
 800448a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800448c:	f000 fabc 	bl	8004a08 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004490:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004498:	d112      	bne.n	80044c0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800449a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800449c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d016      	beq.n	80044d0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80044a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044a4:	3324      	adds	r3, #36	@ 0x24
 80044a6:	4618      	mov	r0, r3
 80044a8:	f001 f886 	bl	80055b8 <xTaskRemoveFromEventList>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d00e      	beq.n	80044d0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d00b      	beq.n	80044d0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	601a      	str	r2, [r3, #0]
 80044be:	e007      	b.n	80044d0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80044c0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80044c4:	3301      	adds	r3, #1
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	b25a      	sxtb	r2, r3
 80044ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80044d0:	2301      	movs	r3, #1
 80044d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80044d4:	e001      	b.n	80044da <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80044d6:	2300      	movs	r3, #0
 80044d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80044da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044dc:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80044e4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80044e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3740      	adds	r7, #64	@ 0x40
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b08c      	sub	sp, #48	@ 0x30
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	60f8      	str	r0, [r7, #12]
 80044f8:	60b9      	str	r1, [r7, #8]
 80044fa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80044fc:	2300      	movs	r3, #0
 80044fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004506:	2b00      	cmp	r3, #0
 8004508:	d10b      	bne.n	8004522 <xQueueReceive+0x32>
	__asm volatile
 800450a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800450e:	f383 8811 	msr	BASEPRI, r3
 8004512:	f3bf 8f6f 	isb	sy
 8004516:	f3bf 8f4f 	dsb	sy
 800451a:	623b      	str	r3, [r7, #32]
}
 800451c:	bf00      	nop
 800451e:	bf00      	nop
 8004520:	e7fd      	b.n	800451e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d103      	bne.n	8004530 <xQueueReceive+0x40>
 8004528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800452a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800452c:	2b00      	cmp	r3, #0
 800452e:	d101      	bne.n	8004534 <xQueueReceive+0x44>
 8004530:	2301      	movs	r3, #1
 8004532:	e000      	b.n	8004536 <xQueueReceive+0x46>
 8004534:	2300      	movs	r3, #0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d10b      	bne.n	8004552 <xQueueReceive+0x62>
	__asm volatile
 800453a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800453e:	f383 8811 	msr	BASEPRI, r3
 8004542:	f3bf 8f6f 	isb	sy
 8004546:	f3bf 8f4f 	dsb	sy
 800454a:	61fb      	str	r3, [r7, #28]
}
 800454c:	bf00      	nop
 800454e:	bf00      	nop
 8004550:	e7fd      	b.n	800454e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004552:	f001 fa01 	bl	8005958 <xTaskGetSchedulerState>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d102      	bne.n	8004562 <xQueueReceive+0x72>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d101      	bne.n	8004566 <xQueueReceive+0x76>
 8004562:	2301      	movs	r3, #1
 8004564:	e000      	b.n	8004568 <xQueueReceive+0x78>
 8004566:	2300      	movs	r3, #0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d10b      	bne.n	8004584 <xQueueReceive+0x94>
	__asm volatile
 800456c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004570:	f383 8811 	msr	BASEPRI, r3
 8004574:	f3bf 8f6f 	isb	sy
 8004578:	f3bf 8f4f 	dsb	sy
 800457c:	61bb      	str	r3, [r7, #24]
}
 800457e:	bf00      	nop
 8004580:	bf00      	nop
 8004582:	e7fd      	b.n	8004580 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004584:	f002 f858 	bl	8006638 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800458a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800458c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800458e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004590:	2b00      	cmp	r3, #0
 8004592:	d01f      	beq.n	80045d4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004594:	68b9      	ldr	r1, [r7, #8]
 8004596:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004598:	f000 faa0 	bl	8004adc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800459c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800459e:	1e5a      	subs	r2, r3, #1
 80045a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045a2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80045a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045a6:	691b      	ldr	r3, [r3, #16]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d00f      	beq.n	80045cc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80045ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045ae:	3310      	adds	r3, #16
 80045b0:	4618      	mov	r0, r3
 80045b2:	f001 f801 	bl	80055b8 <xTaskRemoveFromEventList>
 80045b6:	4603      	mov	r3, r0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d007      	beq.n	80045cc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80045bc:	4b3c      	ldr	r3, [pc, #240]	@ (80046b0 <xQueueReceive+0x1c0>)
 80045be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80045c2:	601a      	str	r2, [r3, #0]
 80045c4:	f3bf 8f4f 	dsb	sy
 80045c8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80045cc:	f002 f866 	bl	800669c <vPortExitCritical>
				return pdPASS;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e069      	b.n	80046a8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d103      	bne.n	80045e2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80045da:	f002 f85f 	bl	800669c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80045de:	2300      	movs	r3, #0
 80045e0:	e062      	b.n	80046a8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80045e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d106      	bne.n	80045f6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80045e8:	f107 0310 	add.w	r3, r7, #16
 80045ec:	4618      	mov	r0, r3
 80045ee:	f001 f847 	bl	8005680 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80045f2:	2301      	movs	r3, #1
 80045f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80045f6:	f002 f851 	bl	800669c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80045fa:	f000 fdb7 	bl	800516c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80045fe:	f002 f81b 	bl	8006638 <vPortEnterCritical>
 8004602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004604:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004608:	b25b      	sxtb	r3, r3
 800460a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800460e:	d103      	bne.n	8004618 <xQueueReceive+0x128>
 8004610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004612:	2200      	movs	r2, #0
 8004614:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800461a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800461e:	b25b      	sxtb	r3, r3
 8004620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004624:	d103      	bne.n	800462e <xQueueReceive+0x13e>
 8004626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004628:	2200      	movs	r2, #0
 800462a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800462e:	f002 f835 	bl	800669c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004632:	1d3a      	adds	r2, r7, #4
 8004634:	f107 0310 	add.w	r3, r7, #16
 8004638:	4611      	mov	r1, r2
 800463a:	4618      	mov	r0, r3
 800463c:	f001 f836 	bl	80056ac <xTaskCheckForTimeOut>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	d123      	bne.n	800468e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004646:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004648:	f000 fac0 	bl	8004bcc <prvIsQueueEmpty>
 800464c:	4603      	mov	r3, r0
 800464e:	2b00      	cmp	r3, #0
 8004650:	d017      	beq.n	8004682 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004654:	3324      	adds	r3, #36	@ 0x24
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	4611      	mov	r1, r2
 800465a:	4618      	mov	r0, r3
 800465c:	f000 ff5a 	bl	8005514 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004660:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004662:	f000 fa61 	bl	8004b28 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004666:	f000 fd8f 	bl	8005188 <xTaskResumeAll>
 800466a:	4603      	mov	r3, r0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d189      	bne.n	8004584 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004670:	4b0f      	ldr	r3, [pc, #60]	@ (80046b0 <xQueueReceive+0x1c0>)
 8004672:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004676:	601a      	str	r2, [r3, #0]
 8004678:	f3bf 8f4f 	dsb	sy
 800467c:	f3bf 8f6f 	isb	sy
 8004680:	e780      	b.n	8004584 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004682:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004684:	f000 fa50 	bl	8004b28 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004688:	f000 fd7e 	bl	8005188 <xTaskResumeAll>
 800468c:	e77a      	b.n	8004584 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800468e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004690:	f000 fa4a 	bl	8004b28 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004694:	f000 fd78 	bl	8005188 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004698:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800469a:	f000 fa97 	bl	8004bcc <prvIsQueueEmpty>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	f43f af6f 	beq.w	8004584 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80046a6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3730      	adds	r7, #48	@ 0x30
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	e000ed04 	.word	0xe000ed04

080046b4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b08e      	sub	sp, #56	@ 0x38
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80046be:	2300      	movs	r3, #0
 80046c0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80046c6:	2300      	movs	r3, #0
 80046c8:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80046ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d10b      	bne.n	80046e8 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80046d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046d4:	f383 8811 	msr	BASEPRI, r3
 80046d8:	f3bf 8f6f 	isb	sy
 80046dc:	f3bf 8f4f 	dsb	sy
 80046e0:	623b      	str	r3, [r7, #32]
}
 80046e2:	bf00      	nop
 80046e4:	bf00      	nop
 80046e6:	e7fd      	b.n	80046e4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80046e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d00b      	beq.n	8004708 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80046f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046f4:	f383 8811 	msr	BASEPRI, r3
 80046f8:	f3bf 8f6f 	isb	sy
 80046fc:	f3bf 8f4f 	dsb	sy
 8004700:	61fb      	str	r3, [r7, #28]
}
 8004702:	bf00      	nop
 8004704:	bf00      	nop
 8004706:	e7fd      	b.n	8004704 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004708:	f001 f926 	bl	8005958 <xTaskGetSchedulerState>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d102      	bne.n	8004718 <xQueueSemaphoreTake+0x64>
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d101      	bne.n	800471c <xQueueSemaphoreTake+0x68>
 8004718:	2301      	movs	r3, #1
 800471a:	e000      	b.n	800471e <xQueueSemaphoreTake+0x6a>
 800471c:	2300      	movs	r3, #0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d10b      	bne.n	800473a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8004722:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004726:	f383 8811 	msr	BASEPRI, r3
 800472a:	f3bf 8f6f 	isb	sy
 800472e:	f3bf 8f4f 	dsb	sy
 8004732:	61bb      	str	r3, [r7, #24]
}
 8004734:	bf00      	nop
 8004736:	bf00      	nop
 8004738:	e7fd      	b.n	8004736 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800473a:	f001 ff7d 	bl	8006638 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800473e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004740:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004742:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004746:	2b00      	cmp	r3, #0
 8004748:	d024      	beq.n	8004794 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800474a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800474c:	1e5a      	subs	r2, r3, #1
 800474e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004750:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004752:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d104      	bne.n	8004764 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800475a:	f001 fa77 	bl	8005c4c <pvTaskIncrementMutexHeldCount>
 800475e:	4602      	mov	r2, r0
 8004760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004762:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004764:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004766:	691b      	ldr	r3, [r3, #16]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d00f      	beq.n	800478c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800476c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800476e:	3310      	adds	r3, #16
 8004770:	4618      	mov	r0, r3
 8004772:	f000 ff21 	bl	80055b8 <xTaskRemoveFromEventList>
 8004776:	4603      	mov	r3, r0
 8004778:	2b00      	cmp	r3, #0
 800477a:	d007      	beq.n	800478c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800477c:	4b54      	ldr	r3, [pc, #336]	@ (80048d0 <xQueueSemaphoreTake+0x21c>)
 800477e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004782:	601a      	str	r2, [r3, #0]
 8004784:	f3bf 8f4f 	dsb	sy
 8004788:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800478c:	f001 ff86 	bl	800669c <vPortExitCritical>
				return pdPASS;
 8004790:	2301      	movs	r3, #1
 8004792:	e098      	b.n	80048c6 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d112      	bne.n	80047c0 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800479a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800479c:	2b00      	cmp	r3, #0
 800479e:	d00b      	beq.n	80047b8 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80047a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047a4:	f383 8811 	msr	BASEPRI, r3
 80047a8:	f3bf 8f6f 	isb	sy
 80047ac:	f3bf 8f4f 	dsb	sy
 80047b0:	617b      	str	r3, [r7, #20]
}
 80047b2:	bf00      	nop
 80047b4:	bf00      	nop
 80047b6:	e7fd      	b.n	80047b4 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80047b8:	f001 ff70 	bl	800669c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80047bc:	2300      	movs	r3, #0
 80047be:	e082      	b.n	80048c6 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80047c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d106      	bne.n	80047d4 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80047c6:	f107 030c 	add.w	r3, r7, #12
 80047ca:	4618      	mov	r0, r3
 80047cc:	f000 ff58 	bl	8005680 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80047d0:	2301      	movs	r3, #1
 80047d2:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80047d4:	f001 ff62 	bl	800669c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80047d8:	f000 fcc8 	bl	800516c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80047dc:	f001 ff2c 	bl	8006638 <vPortEnterCritical>
 80047e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047e2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80047e6:	b25b      	sxtb	r3, r3
 80047e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ec:	d103      	bne.n	80047f6 <xQueueSemaphoreTake+0x142>
 80047ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047f0:	2200      	movs	r2, #0
 80047f2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80047f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047f8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80047fc:	b25b      	sxtb	r3, r3
 80047fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004802:	d103      	bne.n	800480c <xQueueSemaphoreTake+0x158>
 8004804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004806:	2200      	movs	r2, #0
 8004808:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800480c:	f001 ff46 	bl	800669c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004810:	463a      	mov	r2, r7
 8004812:	f107 030c 	add.w	r3, r7, #12
 8004816:	4611      	mov	r1, r2
 8004818:	4618      	mov	r0, r3
 800481a:	f000 ff47 	bl	80056ac <xTaskCheckForTimeOut>
 800481e:	4603      	mov	r3, r0
 8004820:	2b00      	cmp	r3, #0
 8004822:	d132      	bne.n	800488a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004824:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004826:	f000 f9d1 	bl	8004bcc <prvIsQueueEmpty>
 800482a:	4603      	mov	r3, r0
 800482c:	2b00      	cmp	r3, #0
 800482e:	d026      	beq.n	800487e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d109      	bne.n	800484c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8004838:	f001 fefe 	bl	8006638 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800483c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	4618      	mov	r0, r3
 8004842:	f001 f8a7 	bl	8005994 <xTaskPriorityInherit>
 8004846:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8004848:	f001 ff28 	bl	800669c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800484c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800484e:	3324      	adds	r3, #36	@ 0x24
 8004850:	683a      	ldr	r2, [r7, #0]
 8004852:	4611      	mov	r1, r2
 8004854:	4618      	mov	r0, r3
 8004856:	f000 fe5d 	bl	8005514 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800485a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800485c:	f000 f964 	bl	8004b28 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004860:	f000 fc92 	bl	8005188 <xTaskResumeAll>
 8004864:	4603      	mov	r3, r0
 8004866:	2b00      	cmp	r3, #0
 8004868:	f47f af67 	bne.w	800473a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800486c:	4b18      	ldr	r3, [pc, #96]	@ (80048d0 <xQueueSemaphoreTake+0x21c>)
 800486e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004872:	601a      	str	r2, [r3, #0]
 8004874:	f3bf 8f4f 	dsb	sy
 8004878:	f3bf 8f6f 	isb	sy
 800487c:	e75d      	b.n	800473a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800487e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004880:	f000 f952 	bl	8004b28 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004884:	f000 fc80 	bl	8005188 <xTaskResumeAll>
 8004888:	e757      	b.n	800473a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800488a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800488c:	f000 f94c 	bl	8004b28 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004890:	f000 fc7a 	bl	8005188 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004894:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004896:	f000 f999 	bl	8004bcc <prvIsQueueEmpty>
 800489a:	4603      	mov	r3, r0
 800489c:	2b00      	cmp	r3, #0
 800489e:	f43f af4c 	beq.w	800473a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80048a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d00d      	beq.n	80048c4 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80048a8:	f001 fec6 	bl	8006638 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80048ac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80048ae:	f000 f893 	bl	80049d8 <prvGetDisinheritPriorityAfterTimeout>
 80048b2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80048b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80048ba:	4618      	mov	r0, r3
 80048bc:	f001 f942 	bl	8005b44 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80048c0:	f001 feec 	bl	800669c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80048c4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3738      	adds	r7, #56	@ 0x38
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	e000ed04 	.word	0xe000ed04

080048d4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b08e      	sub	sp, #56	@ 0x38
 80048d8:	af00      	add	r7, sp, #0
 80048da:	60f8      	str	r0, [r7, #12]
 80048dc:	60b9      	str	r1, [r7, #8]
 80048de:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80048e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d10b      	bne.n	8004902 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80048ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048ee:	f383 8811 	msr	BASEPRI, r3
 80048f2:	f3bf 8f6f 	isb	sy
 80048f6:	f3bf 8f4f 	dsb	sy
 80048fa:	623b      	str	r3, [r7, #32]
}
 80048fc:	bf00      	nop
 80048fe:	bf00      	nop
 8004900:	e7fd      	b.n	80048fe <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d103      	bne.n	8004910 <xQueueReceiveFromISR+0x3c>
 8004908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800490a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800490c:	2b00      	cmp	r3, #0
 800490e:	d101      	bne.n	8004914 <xQueueReceiveFromISR+0x40>
 8004910:	2301      	movs	r3, #1
 8004912:	e000      	b.n	8004916 <xQueueReceiveFromISR+0x42>
 8004914:	2300      	movs	r3, #0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d10b      	bne.n	8004932 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800491a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800491e:	f383 8811 	msr	BASEPRI, r3
 8004922:	f3bf 8f6f 	isb	sy
 8004926:	f3bf 8f4f 	dsb	sy
 800492a:	61fb      	str	r3, [r7, #28]
}
 800492c:	bf00      	nop
 800492e:	bf00      	nop
 8004930:	e7fd      	b.n	800492e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004932:	f001 ff61 	bl	80067f8 <vPortValidateInterruptPriority>
	__asm volatile
 8004936:	f3ef 8211 	mrs	r2, BASEPRI
 800493a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800493e:	f383 8811 	msr	BASEPRI, r3
 8004942:	f3bf 8f6f 	isb	sy
 8004946:	f3bf 8f4f 	dsb	sy
 800494a:	61ba      	str	r2, [r7, #24]
 800494c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800494e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004950:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004954:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004956:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800495a:	2b00      	cmp	r3, #0
 800495c:	d02f      	beq.n	80049be <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800495e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004960:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004964:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004968:	68b9      	ldr	r1, [r7, #8]
 800496a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800496c:	f000 f8b6 	bl	8004adc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004972:	1e5a      	subs	r2, r3, #1
 8004974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004976:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004978:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800497c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004980:	d112      	bne.n	80049a8 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004984:	691b      	ldr	r3, [r3, #16]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d016      	beq.n	80049b8 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800498a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800498c:	3310      	adds	r3, #16
 800498e:	4618      	mov	r0, r3
 8004990:	f000 fe12 	bl	80055b8 <xTaskRemoveFromEventList>
 8004994:	4603      	mov	r3, r0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d00e      	beq.n	80049b8 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d00b      	beq.n	80049b8 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	601a      	str	r2, [r3, #0]
 80049a6:	e007      	b.n	80049b8 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80049a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80049ac:	3301      	adds	r3, #1
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	b25a      	sxtb	r2, r3
 80049b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80049b8:	2301      	movs	r3, #1
 80049ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80049bc:	e001      	b.n	80049c2 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80049be:	2300      	movs	r3, #0
 80049c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80049c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049c4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	f383 8811 	msr	BASEPRI, r3
}
 80049cc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80049ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3738      	adds	r7, #56	@ 0x38
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80049d8:	b480      	push	{r7}
 80049da:	b085      	sub	sp, #20
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d006      	beq.n	80049f6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80049f2:	60fb      	str	r3, [r7, #12]
 80049f4:	e001      	b.n	80049fa <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80049f6:	2300      	movs	r3, #0
 80049f8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80049fa:	68fb      	ldr	r3, [r7, #12]
	}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3714      	adds	r7, #20
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr

08004a08 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b086      	sub	sp, #24
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004a14:	2300      	movs	r3, #0
 8004a16:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a1c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d10d      	bne.n	8004a42 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d14d      	bne.n	8004aca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	4618      	mov	r0, r3
 8004a34:	f001 f816 	bl	8005a64 <xTaskPriorityDisinherit>
 8004a38:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	609a      	str	r2, [r3, #8]
 8004a40:	e043      	b.n	8004aca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d119      	bne.n	8004a7c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6858      	ldr	r0, [r3, #4]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a50:	461a      	mov	r2, r3
 8004a52:	68b9      	ldr	r1, [r7, #8]
 8004a54:	f002 f958 	bl	8006d08 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	685a      	ldr	r2, [r3, #4]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a60:	441a      	add	r2, r3
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	685a      	ldr	r2, [r3, #4]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d32b      	bcc.n	8004aca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	605a      	str	r2, [r3, #4]
 8004a7a:	e026      	b.n	8004aca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	68d8      	ldr	r0, [r3, #12]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a84:	461a      	mov	r2, r3
 8004a86:	68b9      	ldr	r1, [r7, #8]
 8004a88:	f002 f93e 	bl	8006d08 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	68da      	ldr	r2, [r3, #12]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a94:	425b      	negs	r3, r3
 8004a96:	441a      	add	r2, r3
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	68da      	ldr	r2, [r3, #12]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d207      	bcs.n	8004ab8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	689a      	ldr	r2, [r3, #8]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ab0:	425b      	negs	r3, r3
 8004ab2:	441a      	add	r2, r3
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d105      	bne.n	8004aca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d002      	beq.n	8004aca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	3b01      	subs	r3, #1
 8004ac8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	1c5a      	adds	r2, r3, #1
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004ad2:	697b      	ldr	r3, [r7, #20]
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3718      	adds	r7, #24
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}

08004adc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b082      	sub	sp, #8
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d018      	beq.n	8004b20 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	68da      	ldr	r2, [r3, #12]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004af6:	441a      	add	r2, r3
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	68da      	ldr	r2, [r3, #12]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d303      	bcc.n	8004b10 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	68d9      	ldr	r1, [r3, #12]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b18:	461a      	mov	r2, r3
 8004b1a:	6838      	ldr	r0, [r7, #0]
 8004b1c:	f002 f8f4 	bl	8006d08 <memcpy>
	}
}
 8004b20:	bf00      	nop
 8004b22:	3708      	adds	r7, #8
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}

08004b28 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b084      	sub	sp, #16
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004b30:	f001 fd82 	bl	8006638 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004b3a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004b3c:	e011      	b.n	8004b62 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d012      	beq.n	8004b6c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	3324      	adds	r3, #36	@ 0x24
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f000 fd34 	bl	80055b8 <xTaskRemoveFromEventList>
 8004b50:	4603      	mov	r3, r0
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d001      	beq.n	8004b5a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004b56:	f000 fe0d 	bl	8005774 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004b5a:	7bfb      	ldrb	r3, [r7, #15]
 8004b5c:	3b01      	subs	r3, #1
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004b62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	dce9      	bgt.n	8004b3e <prvUnlockQueue+0x16>
 8004b6a:	e000      	b.n	8004b6e <prvUnlockQueue+0x46>
					break;
 8004b6c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	22ff      	movs	r2, #255	@ 0xff
 8004b72:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004b76:	f001 fd91 	bl	800669c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004b7a:	f001 fd5d 	bl	8006638 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004b84:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004b86:	e011      	b.n	8004bac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	691b      	ldr	r3, [r3, #16]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d012      	beq.n	8004bb6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	3310      	adds	r3, #16
 8004b94:	4618      	mov	r0, r3
 8004b96:	f000 fd0f 	bl	80055b8 <xTaskRemoveFromEventList>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d001      	beq.n	8004ba4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004ba0:	f000 fde8 	bl	8005774 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004ba4:	7bbb      	ldrb	r3, [r7, #14]
 8004ba6:	3b01      	subs	r3, #1
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004bac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	dce9      	bgt.n	8004b88 <prvUnlockQueue+0x60>
 8004bb4:	e000      	b.n	8004bb8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004bb6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	22ff      	movs	r2, #255	@ 0xff
 8004bbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004bc0:	f001 fd6c 	bl	800669c <vPortExitCritical>
}
 8004bc4:	bf00      	nop
 8004bc6:	3710      	adds	r7, #16
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004bd4:	f001 fd30 	bl	8006638 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d102      	bne.n	8004be6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004be0:	2301      	movs	r3, #1
 8004be2:	60fb      	str	r3, [r7, #12]
 8004be4:	e001      	b.n	8004bea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004be6:	2300      	movs	r3, #0
 8004be8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004bea:	f001 fd57 	bl	800669c <vPortExitCritical>

	return xReturn;
 8004bee:	68fb      	ldr	r3, [r7, #12]
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3710      	adds	r7, #16
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004c00:	f001 fd1a 	bl	8006638 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d102      	bne.n	8004c16 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004c10:	2301      	movs	r3, #1
 8004c12:	60fb      	str	r3, [r7, #12]
 8004c14:	e001      	b.n	8004c1a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004c16:	2300      	movs	r3, #0
 8004c18:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004c1a:	f001 fd3f 	bl	800669c <vPortExitCritical>

	return xReturn;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3710      	adds	r7, #16
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004c28:	b480      	push	{r7}
 8004c2a:	b085      	sub	sp, #20
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004c32:	2300      	movs	r3, #0
 8004c34:	60fb      	str	r3, [r7, #12]
 8004c36:	e014      	b.n	8004c62 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004c38:	4a0f      	ldr	r2, [pc, #60]	@ (8004c78 <vQueueAddToRegistry+0x50>)
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d10b      	bne.n	8004c5c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004c44:	490c      	ldr	r1, [pc, #48]	@ (8004c78 <vQueueAddToRegistry+0x50>)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	683a      	ldr	r2, [r7, #0]
 8004c4a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004c4e:	4a0a      	ldr	r2, [pc, #40]	@ (8004c78 <vQueueAddToRegistry+0x50>)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	00db      	lsls	r3, r3, #3
 8004c54:	4413      	add	r3, r2
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004c5a:	e006      	b.n	8004c6a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	3301      	adds	r3, #1
 8004c60:	60fb      	str	r3, [r7, #12]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2b07      	cmp	r3, #7
 8004c66:	d9e7      	bls.n	8004c38 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004c68:	bf00      	nop
 8004c6a:	bf00      	nop
 8004c6c:	3714      	adds	r7, #20
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop
 8004c78:	200007d8 	.word	0x200007d8

08004c7c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b086      	sub	sp, #24
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	60b9      	str	r1, [r7, #8]
 8004c86:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004c8c:	f001 fcd4 	bl	8006638 <vPortEnterCritical>
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004c96:	b25b      	sxtb	r3, r3
 8004c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c9c:	d103      	bne.n	8004ca6 <vQueueWaitForMessageRestricted+0x2a>
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004cac:	b25b      	sxtb	r3, r3
 8004cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cb2:	d103      	bne.n	8004cbc <vQueueWaitForMessageRestricted+0x40>
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004cbc:	f001 fcee 	bl	800669c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d106      	bne.n	8004cd6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	3324      	adds	r3, #36	@ 0x24
 8004ccc:	687a      	ldr	r2, [r7, #4]
 8004cce:	68b9      	ldr	r1, [r7, #8]
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f000 fc45 	bl	8005560 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004cd6:	6978      	ldr	r0, [r7, #20]
 8004cd8:	f7ff ff26 	bl	8004b28 <prvUnlockQueue>
	}
 8004cdc:	bf00      	nop
 8004cde:	3718      	adds	r7, #24
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}

08004ce4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b08e      	sub	sp, #56	@ 0x38
 8004ce8:	af04      	add	r7, sp, #16
 8004cea:	60f8      	str	r0, [r7, #12]
 8004cec:	60b9      	str	r1, [r7, #8]
 8004cee:	607a      	str	r2, [r7, #4]
 8004cf0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004cf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d10b      	bne.n	8004d10 <xTaskCreateStatic+0x2c>
	__asm volatile
 8004cf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cfc:	f383 8811 	msr	BASEPRI, r3
 8004d00:	f3bf 8f6f 	isb	sy
 8004d04:	f3bf 8f4f 	dsb	sy
 8004d08:	623b      	str	r3, [r7, #32]
}
 8004d0a:	bf00      	nop
 8004d0c:	bf00      	nop
 8004d0e:	e7fd      	b.n	8004d0c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004d10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d10b      	bne.n	8004d2e <xTaskCreateStatic+0x4a>
	__asm volatile
 8004d16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d1a:	f383 8811 	msr	BASEPRI, r3
 8004d1e:	f3bf 8f6f 	isb	sy
 8004d22:	f3bf 8f4f 	dsb	sy
 8004d26:	61fb      	str	r3, [r7, #28]
}
 8004d28:	bf00      	nop
 8004d2a:	bf00      	nop
 8004d2c:	e7fd      	b.n	8004d2a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004d2e:	235c      	movs	r3, #92	@ 0x5c
 8004d30:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	2b5c      	cmp	r3, #92	@ 0x5c
 8004d36:	d00b      	beq.n	8004d50 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004d38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d3c:	f383 8811 	msr	BASEPRI, r3
 8004d40:	f3bf 8f6f 	isb	sy
 8004d44:	f3bf 8f4f 	dsb	sy
 8004d48:	61bb      	str	r3, [r7, #24]
}
 8004d4a:	bf00      	nop
 8004d4c:	bf00      	nop
 8004d4e:	e7fd      	b.n	8004d4c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004d50:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004d52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d01e      	beq.n	8004d96 <xTaskCreateStatic+0xb2>
 8004d58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d01b      	beq.n	8004d96 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004d5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d60:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d64:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004d66:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d6a:	2202      	movs	r2, #2
 8004d6c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004d70:	2300      	movs	r3, #0
 8004d72:	9303      	str	r3, [sp, #12]
 8004d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d76:	9302      	str	r3, [sp, #8]
 8004d78:	f107 0314 	add.w	r3, r7, #20
 8004d7c:	9301      	str	r3, [sp, #4]
 8004d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d80:	9300      	str	r3, [sp, #0]
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	68b9      	ldr	r1, [r7, #8]
 8004d88:	68f8      	ldr	r0, [r7, #12]
 8004d8a:	f000 f850 	bl	8004e2e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004d8e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004d90:	f000 f8de 	bl	8004f50 <prvAddNewTaskToReadyList>
 8004d94:	e001      	b.n	8004d9a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004d96:	2300      	movs	r3, #0
 8004d98:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004d9a:	697b      	ldr	r3, [r7, #20]
	}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3728      	adds	r7, #40	@ 0x28
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}

08004da4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b08c      	sub	sp, #48	@ 0x30
 8004da8:	af04      	add	r7, sp, #16
 8004daa:	60f8      	str	r0, [r7, #12]
 8004dac:	60b9      	str	r1, [r7, #8]
 8004dae:	603b      	str	r3, [r7, #0]
 8004db0:	4613      	mov	r3, r2
 8004db2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004db4:	88fb      	ldrh	r3, [r7, #6]
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	4618      	mov	r0, r3
 8004dba:	f001 fd5f 	bl	800687c <pvPortMalloc>
 8004dbe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d00e      	beq.n	8004de4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004dc6:	205c      	movs	r0, #92	@ 0x5c
 8004dc8:	f001 fd58 	bl	800687c <pvPortMalloc>
 8004dcc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d003      	beq.n	8004ddc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004dd4:	69fb      	ldr	r3, [r7, #28]
 8004dd6:	697a      	ldr	r2, [r7, #20]
 8004dd8:	631a      	str	r2, [r3, #48]	@ 0x30
 8004dda:	e005      	b.n	8004de8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004ddc:	6978      	ldr	r0, [r7, #20]
 8004dde:	f001 fe1b 	bl	8006a18 <vPortFree>
 8004de2:	e001      	b.n	8004de8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004de4:	2300      	movs	r3, #0
 8004de6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004de8:	69fb      	ldr	r3, [r7, #28]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d017      	beq.n	8004e1e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004df6:	88fa      	ldrh	r2, [r7, #6]
 8004df8:	2300      	movs	r3, #0
 8004dfa:	9303      	str	r3, [sp, #12]
 8004dfc:	69fb      	ldr	r3, [r7, #28]
 8004dfe:	9302      	str	r3, [sp, #8]
 8004e00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e02:	9301      	str	r3, [sp, #4]
 8004e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e06:	9300      	str	r3, [sp, #0]
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	68b9      	ldr	r1, [r7, #8]
 8004e0c:	68f8      	ldr	r0, [r7, #12]
 8004e0e:	f000 f80e 	bl	8004e2e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004e12:	69f8      	ldr	r0, [r7, #28]
 8004e14:	f000 f89c 	bl	8004f50 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	61bb      	str	r3, [r7, #24]
 8004e1c:	e002      	b.n	8004e24 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8004e22:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004e24:	69bb      	ldr	r3, [r7, #24]
	}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3720      	adds	r7, #32
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}

08004e2e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004e2e:	b580      	push	{r7, lr}
 8004e30:	b088      	sub	sp, #32
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	60f8      	str	r0, [r7, #12]
 8004e36:	60b9      	str	r1, [r7, #8]
 8004e38:	607a      	str	r2, [r7, #4]
 8004e3a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e3e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	461a      	mov	r2, r3
 8004e46:	21a5      	movs	r1, #165	@ 0xa5
 8004e48:	f001 ff06 	bl	8006c58 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004e4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e4e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004e56:	3b01      	subs	r3, #1
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	4413      	add	r3, r2
 8004e5c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004e5e:	69bb      	ldr	r3, [r7, #24]
 8004e60:	f023 0307 	bic.w	r3, r3, #7
 8004e64:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004e66:	69bb      	ldr	r3, [r7, #24]
 8004e68:	f003 0307 	and.w	r3, r3, #7
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d00b      	beq.n	8004e88 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8004e70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e74:	f383 8811 	msr	BASEPRI, r3
 8004e78:	f3bf 8f6f 	isb	sy
 8004e7c:	f3bf 8f4f 	dsb	sy
 8004e80:	617b      	str	r3, [r7, #20]
}
 8004e82:	bf00      	nop
 8004e84:	bf00      	nop
 8004e86:	e7fd      	b.n	8004e84 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d01f      	beq.n	8004ece <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004e8e:	2300      	movs	r3, #0
 8004e90:	61fb      	str	r3, [r7, #28]
 8004e92:	e012      	b.n	8004eba <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004e94:	68ba      	ldr	r2, [r7, #8]
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	4413      	add	r3, r2
 8004e9a:	7819      	ldrb	r1, [r3, #0]
 8004e9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e9e:	69fb      	ldr	r3, [r7, #28]
 8004ea0:	4413      	add	r3, r2
 8004ea2:	3334      	adds	r3, #52	@ 0x34
 8004ea4:	460a      	mov	r2, r1
 8004ea6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004ea8:	68ba      	ldr	r2, [r7, #8]
 8004eaa:	69fb      	ldr	r3, [r7, #28]
 8004eac:	4413      	add	r3, r2
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d006      	beq.n	8004ec2 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004eb4:	69fb      	ldr	r3, [r7, #28]
 8004eb6:	3301      	adds	r3, #1
 8004eb8:	61fb      	str	r3, [r7, #28]
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	2b0f      	cmp	r3, #15
 8004ebe:	d9e9      	bls.n	8004e94 <prvInitialiseNewTask+0x66>
 8004ec0:	e000      	b.n	8004ec4 <prvInitialiseNewTask+0x96>
			{
				break;
 8004ec2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004ecc:	e003      	b.n	8004ed6 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004ed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ed8:	2b37      	cmp	r3, #55	@ 0x37
 8004eda:	d901      	bls.n	8004ee0 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004edc:	2337      	movs	r3, #55	@ 0x37
 8004ede:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004ee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ee2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004ee4:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ee8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004eea:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eee:	2200      	movs	r2, #0
 8004ef0:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ef4:	3304      	adds	r3, #4
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f7fe fec8 	bl	8003c8c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004efc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004efe:	3318      	adds	r3, #24
 8004f00:	4618      	mov	r0, r3
 8004f02:	f7fe fec3 	bl	8003c8c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f0a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f0e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f14:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f1a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f1e:	2200      	movs	r2, #0
 8004f20:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f24:	2200      	movs	r2, #0
 8004f26:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004f2a:	683a      	ldr	r2, [r7, #0]
 8004f2c:	68f9      	ldr	r1, [r7, #12]
 8004f2e:	69b8      	ldr	r0, [r7, #24]
 8004f30:	f001 fa4e 	bl	80063d0 <pxPortInitialiseStack>
 8004f34:	4602      	mov	r2, r0
 8004f36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f38:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004f3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d002      	beq.n	8004f46 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004f40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f46:	bf00      	nop
 8004f48:	3720      	adds	r7, #32
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
	...

08004f50 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b082      	sub	sp, #8
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004f58:	f001 fb6e 	bl	8006638 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004f5c:	4b2d      	ldr	r3, [pc, #180]	@ (8005014 <prvAddNewTaskToReadyList+0xc4>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	3301      	adds	r3, #1
 8004f62:	4a2c      	ldr	r2, [pc, #176]	@ (8005014 <prvAddNewTaskToReadyList+0xc4>)
 8004f64:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004f66:	4b2c      	ldr	r3, [pc, #176]	@ (8005018 <prvAddNewTaskToReadyList+0xc8>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d109      	bne.n	8004f82 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004f6e:	4a2a      	ldr	r2, [pc, #168]	@ (8005018 <prvAddNewTaskToReadyList+0xc8>)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004f74:	4b27      	ldr	r3, [pc, #156]	@ (8005014 <prvAddNewTaskToReadyList+0xc4>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d110      	bne.n	8004f9e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004f7c:	f000 fc1e 	bl	80057bc <prvInitialiseTaskLists>
 8004f80:	e00d      	b.n	8004f9e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004f82:	4b26      	ldr	r3, [pc, #152]	@ (800501c <prvAddNewTaskToReadyList+0xcc>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d109      	bne.n	8004f9e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004f8a:	4b23      	ldr	r3, [pc, #140]	@ (8005018 <prvAddNewTaskToReadyList+0xc8>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d802      	bhi.n	8004f9e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004f98:	4a1f      	ldr	r2, [pc, #124]	@ (8005018 <prvAddNewTaskToReadyList+0xc8>)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004f9e:	4b20      	ldr	r3, [pc, #128]	@ (8005020 <prvAddNewTaskToReadyList+0xd0>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	3301      	adds	r3, #1
 8004fa4:	4a1e      	ldr	r2, [pc, #120]	@ (8005020 <prvAddNewTaskToReadyList+0xd0>)
 8004fa6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004fa8:	4b1d      	ldr	r3, [pc, #116]	@ (8005020 <prvAddNewTaskToReadyList+0xd0>)
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fb4:	4b1b      	ldr	r3, [pc, #108]	@ (8005024 <prvAddNewTaskToReadyList+0xd4>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d903      	bls.n	8004fc4 <prvAddNewTaskToReadyList+0x74>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fc0:	4a18      	ldr	r2, [pc, #96]	@ (8005024 <prvAddNewTaskToReadyList+0xd4>)
 8004fc2:	6013      	str	r3, [r2, #0]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fc8:	4613      	mov	r3, r2
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	4413      	add	r3, r2
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	4a15      	ldr	r2, [pc, #84]	@ (8005028 <prvAddNewTaskToReadyList+0xd8>)
 8004fd2:	441a      	add	r2, r3
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	3304      	adds	r3, #4
 8004fd8:	4619      	mov	r1, r3
 8004fda:	4610      	mov	r0, r2
 8004fdc:	f7fe fe63 	bl	8003ca6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004fe0:	f001 fb5c 	bl	800669c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004fe4:	4b0d      	ldr	r3, [pc, #52]	@ (800501c <prvAddNewTaskToReadyList+0xcc>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d00e      	beq.n	800500a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004fec:	4b0a      	ldr	r3, [pc, #40]	@ (8005018 <prvAddNewTaskToReadyList+0xc8>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d207      	bcs.n	800500a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004ffa:	4b0c      	ldr	r3, [pc, #48]	@ (800502c <prvAddNewTaskToReadyList+0xdc>)
 8004ffc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005000:	601a      	str	r2, [r3, #0]
 8005002:	f3bf 8f4f 	dsb	sy
 8005006:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800500a:	bf00      	nop
 800500c:	3708      	adds	r7, #8
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
 8005012:	bf00      	nop
 8005014:	20000cec 	.word	0x20000cec
 8005018:	20000818 	.word	0x20000818
 800501c:	20000cf8 	.word	0x20000cf8
 8005020:	20000d08 	.word	0x20000d08
 8005024:	20000cf4 	.word	0x20000cf4
 8005028:	2000081c 	.word	0x2000081c
 800502c:	e000ed04 	.word	0xe000ed04

08005030 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005030:	b580      	push	{r7, lr}
 8005032:	b084      	sub	sp, #16
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005038:	2300      	movs	r3, #0
 800503a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d018      	beq.n	8005074 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005042:	4b14      	ldr	r3, [pc, #80]	@ (8005094 <vTaskDelay+0x64>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d00b      	beq.n	8005062 <vTaskDelay+0x32>
	__asm volatile
 800504a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800504e:	f383 8811 	msr	BASEPRI, r3
 8005052:	f3bf 8f6f 	isb	sy
 8005056:	f3bf 8f4f 	dsb	sy
 800505a:	60bb      	str	r3, [r7, #8]
}
 800505c:	bf00      	nop
 800505e:	bf00      	nop
 8005060:	e7fd      	b.n	800505e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005062:	f000 f883 	bl	800516c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005066:	2100      	movs	r1, #0
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f000 fe03 	bl	8005c74 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800506e:	f000 f88b 	bl	8005188 <xTaskResumeAll>
 8005072:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d107      	bne.n	800508a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800507a:	4b07      	ldr	r3, [pc, #28]	@ (8005098 <vTaskDelay+0x68>)
 800507c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005080:	601a      	str	r2, [r3, #0]
 8005082:	f3bf 8f4f 	dsb	sy
 8005086:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800508a:	bf00      	nop
 800508c:	3710      	adds	r7, #16
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop
 8005094:	20000d14 	.word	0x20000d14
 8005098:	e000ed04 	.word	0xe000ed04

0800509c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b08a      	sub	sp, #40	@ 0x28
 80050a0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80050a2:	2300      	movs	r3, #0
 80050a4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80050a6:	2300      	movs	r3, #0
 80050a8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80050aa:	463a      	mov	r2, r7
 80050ac:	1d39      	adds	r1, r7, #4
 80050ae:	f107 0308 	add.w	r3, r7, #8
 80050b2:	4618      	mov	r0, r3
 80050b4:	f7fe fd96 	bl	8003be4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80050b8:	6839      	ldr	r1, [r7, #0]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	68ba      	ldr	r2, [r7, #8]
 80050be:	9202      	str	r2, [sp, #8]
 80050c0:	9301      	str	r3, [sp, #4]
 80050c2:	2300      	movs	r3, #0
 80050c4:	9300      	str	r3, [sp, #0]
 80050c6:	2300      	movs	r3, #0
 80050c8:	460a      	mov	r2, r1
 80050ca:	4922      	ldr	r1, [pc, #136]	@ (8005154 <vTaskStartScheduler+0xb8>)
 80050cc:	4822      	ldr	r0, [pc, #136]	@ (8005158 <vTaskStartScheduler+0xbc>)
 80050ce:	f7ff fe09 	bl	8004ce4 <xTaskCreateStatic>
 80050d2:	4603      	mov	r3, r0
 80050d4:	4a21      	ldr	r2, [pc, #132]	@ (800515c <vTaskStartScheduler+0xc0>)
 80050d6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80050d8:	4b20      	ldr	r3, [pc, #128]	@ (800515c <vTaskStartScheduler+0xc0>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d002      	beq.n	80050e6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80050e0:	2301      	movs	r3, #1
 80050e2:	617b      	str	r3, [r7, #20]
 80050e4:	e001      	b.n	80050ea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80050e6:	2300      	movs	r3, #0
 80050e8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d102      	bne.n	80050f6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80050f0:	f000 fe14 	bl	8005d1c <xTimerCreateTimerTask>
 80050f4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d116      	bne.n	800512a <vTaskStartScheduler+0x8e>
	__asm volatile
 80050fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005100:	f383 8811 	msr	BASEPRI, r3
 8005104:	f3bf 8f6f 	isb	sy
 8005108:	f3bf 8f4f 	dsb	sy
 800510c:	613b      	str	r3, [r7, #16]
}
 800510e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005110:	4b13      	ldr	r3, [pc, #76]	@ (8005160 <vTaskStartScheduler+0xc4>)
 8005112:	f04f 32ff 	mov.w	r2, #4294967295
 8005116:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005118:	4b12      	ldr	r3, [pc, #72]	@ (8005164 <vTaskStartScheduler+0xc8>)
 800511a:	2201      	movs	r2, #1
 800511c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800511e:	4b12      	ldr	r3, [pc, #72]	@ (8005168 <vTaskStartScheduler+0xcc>)
 8005120:	2200      	movs	r2, #0
 8005122:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005124:	f001 f9e4 	bl	80064f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005128:	e00f      	b.n	800514a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005130:	d10b      	bne.n	800514a <vTaskStartScheduler+0xae>
	__asm volatile
 8005132:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005136:	f383 8811 	msr	BASEPRI, r3
 800513a:	f3bf 8f6f 	isb	sy
 800513e:	f3bf 8f4f 	dsb	sy
 8005142:	60fb      	str	r3, [r7, #12]
}
 8005144:	bf00      	nop
 8005146:	bf00      	nop
 8005148:	e7fd      	b.n	8005146 <vTaskStartScheduler+0xaa>
}
 800514a:	bf00      	nop
 800514c:	3718      	adds	r7, #24
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
 8005152:	bf00      	nop
 8005154:	08008564 	.word	0x08008564
 8005158:	0800578d 	.word	0x0800578d
 800515c:	20000d10 	.word	0x20000d10
 8005160:	20000d0c 	.word	0x20000d0c
 8005164:	20000cf8 	.word	0x20000cf8
 8005168:	20000cf0 	.word	0x20000cf0

0800516c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800516c:	b480      	push	{r7}
 800516e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005170:	4b04      	ldr	r3, [pc, #16]	@ (8005184 <vTaskSuspendAll+0x18>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	3301      	adds	r3, #1
 8005176:	4a03      	ldr	r2, [pc, #12]	@ (8005184 <vTaskSuspendAll+0x18>)
 8005178:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800517a:	bf00      	nop
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr
 8005184:	20000d14 	.word	0x20000d14

08005188 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b084      	sub	sp, #16
 800518c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800518e:	2300      	movs	r3, #0
 8005190:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005192:	2300      	movs	r3, #0
 8005194:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005196:	4b42      	ldr	r3, [pc, #264]	@ (80052a0 <xTaskResumeAll+0x118>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d10b      	bne.n	80051b6 <xTaskResumeAll+0x2e>
	__asm volatile
 800519e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051a2:	f383 8811 	msr	BASEPRI, r3
 80051a6:	f3bf 8f6f 	isb	sy
 80051aa:	f3bf 8f4f 	dsb	sy
 80051ae:	603b      	str	r3, [r7, #0]
}
 80051b0:	bf00      	nop
 80051b2:	bf00      	nop
 80051b4:	e7fd      	b.n	80051b2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80051b6:	f001 fa3f 	bl	8006638 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80051ba:	4b39      	ldr	r3, [pc, #228]	@ (80052a0 <xTaskResumeAll+0x118>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	3b01      	subs	r3, #1
 80051c0:	4a37      	ldr	r2, [pc, #220]	@ (80052a0 <xTaskResumeAll+0x118>)
 80051c2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80051c4:	4b36      	ldr	r3, [pc, #216]	@ (80052a0 <xTaskResumeAll+0x118>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d162      	bne.n	8005292 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80051cc:	4b35      	ldr	r3, [pc, #212]	@ (80052a4 <xTaskResumeAll+0x11c>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d05e      	beq.n	8005292 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80051d4:	e02f      	b.n	8005236 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051d6:	4b34      	ldr	r3, [pc, #208]	@ (80052a8 <xTaskResumeAll+0x120>)
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	68db      	ldr	r3, [r3, #12]
 80051dc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	3318      	adds	r3, #24
 80051e2:	4618      	mov	r0, r3
 80051e4:	f7fe fdbc 	bl	8003d60 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	3304      	adds	r3, #4
 80051ec:	4618      	mov	r0, r3
 80051ee:	f7fe fdb7 	bl	8003d60 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051f6:	4b2d      	ldr	r3, [pc, #180]	@ (80052ac <xTaskResumeAll+0x124>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d903      	bls.n	8005206 <xTaskResumeAll+0x7e>
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005202:	4a2a      	ldr	r2, [pc, #168]	@ (80052ac <xTaskResumeAll+0x124>)
 8005204:	6013      	str	r3, [r2, #0]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800520a:	4613      	mov	r3, r2
 800520c:	009b      	lsls	r3, r3, #2
 800520e:	4413      	add	r3, r2
 8005210:	009b      	lsls	r3, r3, #2
 8005212:	4a27      	ldr	r2, [pc, #156]	@ (80052b0 <xTaskResumeAll+0x128>)
 8005214:	441a      	add	r2, r3
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	3304      	adds	r3, #4
 800521a:	4619      	mov	r1, r3
 800521c:	4610      	mov	r0, r2
 800521e:	f7fe fd42 	bl	8003ca6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005226:	4b23      	ldr	r3, [pc, #140]	@ (80052b4 <xTaskResumeAll+0x12c>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800522c:	429a      	cmp	r2, r3
 800522e:	d302      	bcc.n	8005236 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005230:	4b21      	ldr	r3, [pc, #132]	@ (80052b8 <xTaskResumeAll+0x130>)
 8005232:	2201      	movs	r2, #1
 8005234:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005236:	4b1c      	ldr	r3, [pc, #112]	@ (80052a8 <xTaskResumeAll+0x120>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d1cb      	bne.n	80051d6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d001      	beq.n	8005248 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005244:	f000 fb58 	bl	80058f8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005248:	4b1c      	ldr	r3, [pc, #112]	@ (80052bc <xTaskResumeAll+0x134>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d010      	beq.n	8005276 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005254:	f000 f846 	bl	80052e4 <xTaskIncrementTick>
 8005258:	4603      	mov	r3, r0
 800525a:	2b00      	cmp	r3, #0
 800525c:	d002      	beq.n	8005264 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800525e:	4b16      	ldr	r3, [pc, #88]	@ (80052b8 <xTaskResumeAll+0x130>)
 8005260:	2201      	movs	r2, #1
 8005262:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	3b01      	subs	r3, #1
 8005268:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d1f1      	bne.n	8005254 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005270:	4b12      	ldr	r3, [pc, #72]	@ (80052bc <xTaskResumeAll+0x134>)
 8005272:	2200      	movs	r2, #0
 8005274:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005276:	4b10      	ldr	r3, [pc, #64]	@ (80052b8 <xTaskResumeAll+0x130>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d009      	beq.n	8005292 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800527e:	2301      	movs	r3, #1
 8005280:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005282:	4b0f      	ldr	r3, [pc, #60]	@ (80052c0 <xTaskResumeAll+0x138>)
 8005284:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005288:	601a      	str	r2, [r3, #0]
 800528a:	f3bf 8f4f 	dsb	sy
 800528e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005292:	f001 fa03 	bl	800669c <vPortExitCritical>

	return xAlreadyYielded;
 8005296:	68bb      	ldr	r3, [r7, #8]
}
 8005298:	4618      	mov	r0, r3
 800529a:	3710      	adds	r7, #16
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}
 80052a0:	20000d14 	.word	0x20000d14
 80052a4:	20000cec 	.word	0x20000cec
 80052a8:	20000cac 	.word	0x20000cac
 80052ac:	20000cf4 	.word	0x20000cf4
 80052b0:	2000081c 	.word	0x2000081c
 80052b4:	20000818 	.word	0x20000818
 80052b8:	20000d00 	.word	0x20000d00
 80052bc:	20000cfc 	.word	0x20000cfc
 80052c0:	e000ed04 	.word	0xe000ed04

080052c4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80052c4:	b480      	push	{r7}
 80052c6:	b083      	sub	sp, #12
 80052c8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80052ca:	4b05      	ldr	r3, [pc, #20]	@ (80052e0 <xTaskGetTickCount+0x1c>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80052d0:	687b      	ldr	r3, [r7, #4]
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	370c      	adds	r7, #12
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr
 80052de:	bf00      	nop
 80052e0:	20000cf0 	.word	0x20000cf0

080052e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b086      	sub	sp, #24
 80052e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80052ea:	2300      	movs	r3, #0
 80052ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80052ee:	4b4f      	ldr	r3, [pc, #316]	@ (800542c <xTaskIncrementTick+0x148>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	f040 8090 	bne.w	8005418 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80052f8:	4b4d      	ldr	r3, [pc, #308]	@ (8005430 <xTaskIncrementTick+0x14c>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	3301      	adds	r3, #1
 80052fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005300:	4a4b      	ldr	r2, [pc, #300]	@ (8005430 <xTaskIncrementTick+0x14c>)
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d121      	bne.n	8005350 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800530c:	4b49      	ldr	r3, [pc, #292]	@ (8005434 <xTaskIncrementTick+0x150>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d00b      	beq.n	800532e <xTaskIncrementTick+0x4a>
	__asm volatile
 8005316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800531a:	f383 8811 	msr	BASEPRI, r3
 800531e:	f3bf 8f6f 	isb	sy
 8005322:	f3bf 8f4f 	dsb	sy
 8005326:	603b      	str	r3, [r7, #0]
}
 8005328:	bf00      	nop
 800532a:	bf00      	nop
 800532c:	e7fd      	b.n	800532a <xTaskIncrementTick+0x46>
 800532e:	4b41      	ldr	r3, [pc, #260]	@ (8005434 <xTaskIncrementTick+0x150>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	60fb      	str	r3, [r7, #12]
 8005334:	4b40      	ldr	r3, [pc, #256]	@ (8005438 <xTaskIncrementTick+0x154>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a3e      	ldr	r2, [pc, #248]	@ (8005434 <xTaskIncrementTick+0x150>)
 800533a:	6013      	str	r3, [r2, #0]
 800533c:	4a3e      	ldr	r2, [pc, #248]	@ (8005438 <xTaskIncrementTick+0x154>)
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	6013      	str	r3, [r2, #0]
 8005342:	4b3e      	ldr	r3, [pc, #248]	@ (800543c <xTaskIncrementTick+0x158>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	3301      	adds	r3, #1
 8005348:	4a3c      	ldr	r2, [pc, #240]	@ (800543c <xTaskIncrementTick+0x158>)
 800534a:	6013      	str	r3, [r2, #0]
 800534c:	f000 fad4 	bl	80058f8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005350:	4b3b      	ldr	r3, [pc, #236]	@ (8005440 <xTaskIncrementTick+0x15c>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	693a      	ldr	r2, [r7, #16]
 8005356:	429a      	cmp	r2, r3
 8005358:	d349      	bcc.n	80053ee <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800535a:	4b36      	ldr	r3, [pc, #216]	@ (8005434 <xTaskIncrementTick+0x150>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d104      	bne.n	800536e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005364:	4b36      	ldr	r3, [pc, #216]	@ (8005440 <xTaskIncrementTick+0x15c>)
 8005366:	f04f 32ff 	mov.w	r2, #4294967295
 800536a:	601a      	str	r2, [r3, #0]
					break;
 800536c:	e03f      	b.n	80053ee <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800536e:	4b31      	ldr	r3, [pc, #196]	@ (8005434 <xTaskIncrementTick+0x150>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800537e:	693a      	ldr	r2, [r7, #16]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	429a      	cmp	r2, r3
 8005384:	d203      	bcs.n	800538e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005386:	4a2e      	ldr	r2, [pc, #184]	@ (8005440 <xTaskIncrementTick+0x15c>)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800538c:	e02f      	b.n	80053ee <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	3304      	adds	r3, #4
 8005392:	4618      	mov	r0, r3
 8005394:	f7fe fce4 	bl	8003d60 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800539c:	2b00      	cmp	r3, #0
 800539e:	d004      	beq.n	80053aa <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	3318      	adds	r3, #24
 80053a4:	4618      	mov	r0, r3
 80053a6:	f7fe fcdb 	bl	8003d60 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053ae:	4b25      	ldr	r3, [pc, #148]	@ (8005444 <xTaskIncrementTick+0x160>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d903      	bls.n	80053be <xTaskIncrementTick+0xda>
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053ba:	4a22      	ldr	r2, [pc, #136]	@ (8005444 <xTaskIncrementTick+0x160>)
 80053bc:	6013      	str	r3, [r2, #0]
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053c2:	4613      	mov	r3, r2
 80053c4:	009b      	lsls	r3, r3, #2
 80053c6:	4413      	add	r3, r2
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	4a1f      	ldr	r2, [pc, #124]	@ (8005448 <xTaskIncrementTick+0x164>)
 80053cc:	441a      	add	r2, r3
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	3304      	adds	r3, #4
 80053d2:	4619      	mov	r1, r3
 80053d4:	4610      	mov	r0, r2
 80053d6:	f7fe fc66 	bl	8003ca6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053de:	4b1b      	ldr	r3, [pc, #108]	@ (800544c <xTaskIncrementTick+0x168>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d3b8      	bcc.n	800535a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80053e8:	2301      	movs	r3, #1
 80053ea:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80053ec:	e7b5      	b.n	800535a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80053ee:	4b17      	ldr	r3, [pc, #92]	@ (800544c <xTaskIncrementTick+0x168>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053f4:	4914      	ldr	r1, [pc, #80]	@ (8005448 <xTaskIncrementTick+0x164>)
 80053f6:	4613      	mov	r3, r2
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	4413      	add	r3, r2
 80053fc:	009b      	lsls	r3, r3, #2
 80053fe:	440b      	add	r3, r1
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	2b01      	cmp	r3, #1
 8005404:	d901      	bls.n	800540a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005406:	2301      	movs	r3, #1
 8005408:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800540a:	4b11      	ldr	r3, [pc, #68]	@ (8005450 <xTaskIncrementTick+0x16c>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d007      	beq.n	8005422 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005412:	2301      	movs	r3, #1
 8005414:	617b      	str	r3, [r7, #20]
 8005416:	e004      	b.n	8005422 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005418:	4b0e      	ldr	r3, [pc, #56]	@ (8005454 <xTaskIncrementTick+0x170>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	3301      	adds	r3, #1
 800541e:	4a0d      	ldr	r2, [pc, #52]	@ (8005454 <xTaskIncrementTick+0x170>)
 8005420:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005422:	697b      	ldr	r3, [r7, #20]
}
 8005424:	4618      	mov	r0, r3
 8005426:	3718      	adds	r7, #24
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}
 800542c:	20000d14 	.word	0x20000d14
 8005430:	20000cf0 	.word	0x20000cf0
 8005434:	20000ca4 	.word	0x20000ca4
 8005438:	20000ca8 	.word	0x20000ca8
 800543c:	20000d04 	.word	0x20000d04
 8005440:	20000d0c 	.word	0x20000d0c
 8005444:	20000cf4 	.word	0x20000cf4
 8005448:	2000081c 	.word	0x2000081c
 800544c:	20000818 	.word	0x20000818
 8005450:	20000d00 	.word	0x20000d00
 8005454:	20000cfc 	.word	0x20000cfc

08005458 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005458:	b480      	push	{r7}
 800545a:	b085      	sub	sp, #20
 800545c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800545e:	4b28      	ldr	r3, [pc, #160]	@ (8005500 <vTaskSwitchContext+0xa8>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d003      	beq.n	800546e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005466:	4b27      	ldr	r3, [pc, #156]	@ (8005504 <vTaskSwitchContext+0xac>)
 8005468:	2201      	movs	r2, #1
 800546a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800546c:	e042      	b.n	80054f4 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800546e:	4b25      	ldr	r3, [pc, #148]	@ (8005504 <vTaskSwitchContext+0xac>)
 8005470:	2200      	movs	r2, #0
 8005472:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005474:	4b24      	ldr	r3, [pc, #144]	@ (8005508 <vTaskSwitchContext+0xb0>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	60fb      	str	r3, [r7, #12]
 800547a:	e011      	b.n	80054a0 <vTaskSwitchContext+0x48>
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d10b      	bne.n	800549a <vTaskSwitchContext+0x42>
	__asm volatile
 8005482:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005486:	f383 8811 	msr	BASEPRI, r3
 800548a:	f3bf 8f6f 	isb	sy
 800548e:	f3bf 8f4f 	dsb	sy
 8005492:	607b      	str	r3, [r7, #4]
}
 8005494:	bf00      	nop
 8005496:	bf00      	nop
 8005498:	e7fd      	b.n	8005496 <vTaskSwitchContext+0x3e>
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	3b01      	subs	r3, #1
 800549e:	60fb      	str	r3, [r7, #12]
 80054a0:	491a      	ldr	r1, [pc, #104]	@ (800550c <vTaskSwitchContext+0xb4>)
 80054a2:	68fa      	ldr	r2, [r7, #12]
 80054a4:	4613      	mov	r3, r2
 80054a6:	009b      	lsls	r3, r3, #2
 80054a8:	4413      	add	r3, r2
 80054aa:	009b      	lsls	r3, r3, #2
 80054ac:	440b      	add	r3, r1
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d0e3      	beq.n	800547c <vTaskSwitchContext+0x24>
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	4613      	mov	r3, r2
 80054b8:	009b      	lsls	r3, r3, #2
 80054ba:	4413      	add	r3, r2
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	4a13      	ldr	r2, [pc, #76]	@ (800550c <vTaskSwitchContext+0xb4>)
 80054c0:	4413      	add	r3, r2
 80054c2:	60bb      	str	r3, [r7, #8]
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	685a      	ldr	r2, [r3, #4]
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	605a      	str	r2, [r3, #4]
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	685a      	ldr	r2, [r3, #4]
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	3308      	adds	r3, #8
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d104      	bne.n	80054e4 <vTaskSwitchContext+0x8c>
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	685a      	ldr	r2, [r3, #4]
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	605a      	str	r2, [r3, #4]
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	68db      	ldr	r3, [r3, #12]
 80054ea:	4a09      	ldr	r2, [pc, #36]	@ (8005510 <vTaskSwitchContext+0xb8>)
 80054ec:	6013      	str	r3, [r2, #0]
 80054ee:	4a06      	ldr	r2, [pc, #24]	@ (8005508 <vTaskSwitchContext+0xb0>)
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	6013      	str	r3, [r2, #0]
}
 80054f4:	bf00      	nop
 80054f6:	3714      	adds	r7, #20
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr
 8005500:	20000d14 	.word	0x20000d14
 8005504:	20000d00 	.word	0x20000d00
 8005508:	20000cf4 	.word	0x20000cf4
 800550c:	2000081c 	.word	0x2000081c
 8005510:	20000818 	.word	0x20000818

08005514 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b084      	sub	sp, #16
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d10b      	bne.n	800553c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005524:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005528:	f383 8811 	msr	BASEPRI, r3
 800552c:	f3bf 8f6f 	isb	sy
 8005530:	f3bf 8f4f 	dsb	sy
 8005534:	60fb      	str	r3, [r7, #12]
}
 8005536:	bf00      	nop
 8005538:	bf00      	nop
 800553a:	e7fd      	b.n	8005538 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800553c:	4b07      	ldr	r3, [pc, #28]	@ (800555c <vTaskPlaceOnEventList+0x48>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	3318      	adds	r3, #24
 8005542:	4619      	mov	r1, r3
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f7fe fbd2 	bl	8003cee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800554a:	2101      	movs	r1, #1
 800554c:	6838      	ldr	r0, [r7, #0]
 800554e:	f000 fb91 	bl	8005c74 <prvAddCurrentTaskToDelayedList>
}
 8005552:	bf00      	nop
 8005554:	3710      	adds	r7, #16
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}
 800555a:	bf00      	nop
 800555c:	20000818 	.word	0x20000818

08005560 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005560:	b580      	push	{r7, lr}
 8005562:	b086      	sub	sp, #24
 8005564:	af00      	add	r7, sp, #0
 8005566:	60f8      	str	r0, [r7, #12]
 8005568:	60b9      	str	r1, [r7, #8]
 800556a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d10b      	bne.n	800558a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005576:	f383 8811 	msr	BASEPRI, r3
 800557a:	f3bf 8f6f 	isb	sy
 800557e:	f3bf 8f4f 	dsb	sy
 8005582:	617b      	str	r3, [r7, #20]
}
 8005584:	bf00      	nop
 8005586:	bf00      	nop
 8005588:	e7fd      	b.n	8005586 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800558a:	4b0a      	ldr	r3, [pc, #40]	@ (80055b4 <vTaskPlaceOnEventListRestricted+0x54>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	3318      	adds	r3, #24
 8005590:	4619      	mov	r1, r3
 8005592:	68f8      	ldr	r0, [r7, #12]
 8005594:	f7fe fb87 	bl	8003ca6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d002      	beq.n	80055a4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800559e:	f04f 33ff 	mov.w	r3, #4294967295
 80055a2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80055a4:	6879      	ldr	r1, [r7, #4]
 80055a6:	68b8      	ldr	r0, [r7, #8]
 80055a8:	f000 fb64 	bl	8005c74 <prvAddCurrentTaskToDelayedList>
	}
 80055ac:	bf00      	nop
 80055ae:	3718      	adds	r7, #24
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}
 80055b4:	20000818 	.word	0x20000818

080055b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b086      	sub	sp, #24
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d10b      	bne.n	80055e6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80055ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055d2:	f383 8811 	msr	BASEPRI, r3
 80055d6:	f3bf 8f6f 	isb	sy
 80055da:	f3bf 8f4f 	dsb	sy
 80055de:	60fb      	str	r3, [r7, #12]
}
 80055e0:	bf00      	nop
 80055e2:	bf00      	nop
 80055e4:	e7fd      	b.n	80055e2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	3318      	adds	r3, #24
 80055ea:	4618      	mov	r0, r3
 80055ec:	f7fe fbb8 	bl	8003d60 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055f0:	4b1d      	ldr	r3, [pc, #116]	@ (8005668 <xTaskRemoveFromEventList+0xb0>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d11d      	bne.n	8005634 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	3304      	adds	r3, #4
 80055fc:	4618      	mov	r0, r3
 80055fe:	f7fe fbaf 	bl	8003d60 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005606:	4b19      	ldr	r3, [pc, #100]	@ (800566c <xTaskRemoveFromEventList+0xb4>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	429a      	cmp	r2, r3
 800560c:	d903      	bls.n	8005616 <xTaskRemoveFromEventList+0x5e>
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005612:	4a16      	ldr	r2, [pc, #88]	@ (800566c <xTaskRemoveFromEventList+0xb4>)
 8005614:	6013      	str	r3, [r2, #0]
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800561a:	4613      	mov	r3, r2
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	4413      	add	r3, r2
 8005620:	009b      	lsls	r3, r3, #2
 8005622:	4a13      	ldr	r2, [pc, #76]	@ (8005670 <xTaskRemoveFromEventList+0xb8>)
 8005624:	441a      	add	r2, r3
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	3304      	adds	r3, #4
 800562a:	4619      	mov	r1, r3
 800562c:	4610      	mov	r0, r2
 800562e:	f7fe fb3a 	bl	8003ca6 <vListInsertEnd>
 8005632:	e005      	b.n	8005640 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	3318      	adds	r3, #24
 8005638:	4619      	mov	r1, r3
 800563a:	480e      	ldr	r0, [pc, #56]	@ (8005674 <xTaskRemoveFromEventList+0xbc>)
 800563c:	f7fe fb33 	bl	8003ca6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005644:	4b0c      	ldr	r3, [pc, #48]	@ (8005678 <xTaskRemoveFromEventList+0xc0>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800564a:	429a      	cmp	r2, r3
 800564c:	d905      	bls.n	800565a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800564e:	2301      	movs	r3, #1
 8005650:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005652:	4b0a      	ldr	r3, [pc, #40]	@ (800567c <xTaskRemoveFromEventList+0xc4>)
 8005654:	2201      	movs	r2, #1
 8005656:	601a      	str	r2, [r3, #0]
 8005658:	e001      	b.n	800565e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800565a:	2300      	movs	r3, #0
 800565c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800565e:	697b      	ldr	r3, [r7, #20]
}
 8005660:	4618      	mov	r0, r3
 8005662:	3718      	adds	r7, #24
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}
 8005668:	20000d14 	.word	0x20000d14
 800566c:	20000cf4 	.word	0x20000cf4
 8005670:	2000081c 	.word	0x2000081c
 8005674:	20000cac 	.word	0x20000cac
 8005678:	20000818 	.word	0x20000818
 800567c:	20000d00 	.word	0x20000d00

08005680 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005680:	b480      	push	{r7}
 8005682:	b083      	sub	sp, #12
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005688:	4b06      	ldr	r3, [pc, #24]	@ (80056a4 <vTaskInternalSetTimeOutState+0x24>)
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005690:	4b05      	ldr	r3, [pc, #20]	@ (80056a8 <vTaskInternalSetTimeOutState+0x28>)
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	605a      	str	r2, [r3, #4]
}
 8005698:	bf00      	nop
 800569a:	370c      	adds	r7, #12
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr
 80056a4:	20000d04 	.word	0x20000d04
 80056a8:	20000cf0 	.word	0x20000cf0

080056ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b088      	sub	sp, #32
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d10b      	bne.n	80056d4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80056bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056c0:	f383 8811 	msr	BASEPRI, r3
 80056c4:	f3bf 8f6f 	isb	sy
 80056c8:	f3bf 8f4f 	dsb	sy
 80056cc:	613b      	str	r3, [r7, #16]
}
 80056ce:	bf00      	nop
 80056d0:	bf00      	nop
 80056d2:	e7fd      	b.n	80056d0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d10b      	bne.n	80056f2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80056da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056de:	f383 8811 	msr	BASEPRI, r3
 80056e2:	f3bf 8f6f 	isb	sy
 80056e6:	f3bf 8f4f 	dsb	sy
 80056ea:	60fb      	str	r3, [r7, #12]
}
 80056ec:	bf00      	nop
 80056ee:	bf00      	nop
 80056f0:	e7fd      	b.n	80056ee <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80056f2:	f000 ffa1 	bl	8006638 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80056f6:	4b1d      	ldr	r3, [pc, #116]	@ (800576c <xTaskCheckForTimeOut+0xc0>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	69ba      	ldr	r2, [r7, #24]
 8005702:	1ad3      	subs	r3, r2, r3
 8005704:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800570e:	d102      	bne.n	8005716 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005710:	2300      	movs	r3, #0
 8005712:	61fb      	str	r3, [r7, #28]
 8005714:	e023      	b.n	800575e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	4b15      	ldr	r3, [pc, #84]	@ (8005770 <xTaskCheckForTimeOut+0xc4>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	429a      	cmp	r2, r3
 8005720:	d007      	beq.n	8005732 <xTaskCheckForTimeOut+0x86>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	69ba      	ldr	r2, [r7, #24]
 8005728:	429a      	cmp	r2, r3
 800572a:	d302      	bcc.n	8005732 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800572c:	2301      	movs	r3, #1
 800572e:	61fb      	str	r3, [r7, #28]
 8005730:	e015      	b.n	800575e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	697a      	ldr	r2, [r7, #20]
 8005738:	429a      	cmp	r2, r3
 800573a:	d20b      	bcs.n	8005754 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	1ad2      	subs	r2, r2, r3
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f7ff ff99 	bl	8005680 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800574e:	2300      	movs	r3, #0
 8005750:	61fb      	str	r3, [r7, #28]
 8005752:	e004      	b.n	800575e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	2200      	movs	r2, #0
 8005758:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800575a:	2301      	movs	r3, #1
 800575c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800575e:	f000 ff9d 	bl	800669c <vPortExitCritical>

	return xReturn;
 8005762:	69fb      	ldr	r3, [r7, #28]
}
 8005764:	4618      	mov	r0, r3
 8005766:	3720      	adds	r7, #32
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}
 800576c:	20000cf0 	.word	0x20000cf0
 8005770:	20000d04 	.word	0x20000d04

08005774 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005774:	b480      	push	{r7}
 8005776:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005778:	4b03      	ldr	r3, [pc, #12]	@ (8005788 <vTaskMissedYield+0x14>)
 800577a:	2201      	movs	r2, #1
 800577c:	601a      	str	r2, [r3, #0]
}
 800577e:	bf00      	nop
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr
 8005788:	20000d00 	.word	0x20000d00

0800578c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b082      	sub	sp, #8
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005794:	f000 f852 	bl	800583c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005798:	4b06      	ldr	r3, [pc, #24]	@ (80057b4 <prvIdleTask+0x28>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	2b01      	cmp	r3, #1
 800579e:	d9f9      	bls.n	8005794 <prvIdleTask+0x8>
			{
				taskYIELD();
 80057a0:	4b05      	ldr	r3, [pc, #20]	@ (80057b8 <prvIdleTask+0x2c>)
 80057a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057a6:	601a      	str	r2, [r3, #0]
 80057a8:	f3bf 8f4f 	dsb	sy
 80057ac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80057b0:	e7f0      	b.n	8005794 <prvIdleTask+0x8>
 80057b2:	bf00      	nop
 80057b4:	2000081c 	.word	0x2000081c
 80057b8:	e000ed04 	.word	0xe000ed04

080057bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b082      	sub	sp, #8
 80057c0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80057c2:	2300      	movs	r3, #0
 80057c4:	607b      	str	r3, [r7, #4]
 80057c6:	e00c      	b.n	80057e2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	4613      	mov	r3, r2
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	4413      	add	r3, r2
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	4a12      	ldr	r2, [pc, #72]	@ (800581c <prvInitialiseTaskLists+0x60>)
 80057d4:	4413      	add	r3, r2
 80057d6:	4618      	mov	r0, r3
 80057d8:	f7fe fa38 	bl	8003c4c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	3301      	adds	r3, #1
 80057e0:	607b      	str	r3, [r7, #4]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2b37      	cmp	r3, #55	@ 0x37
 80057e6:	d9ef      	bls.n	80057c8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80057e8:	480d      	ldr	r0, [pc, #52]	@ (8005820 <prvInitialiseTaskLists+0x64>)
 80057ea:	f7fe fa2f 	bl	8003c4c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80057ee:	480d      	ldr	r0, [pc, #52]	@ (8005824 <prvInitialiseTaskLists+0x68>)
 80057f0:	f7fe fa2c 	bl	8003c4c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80057f4:	480c      	ldr	r0, [pc, #48]	@ (8005828 <prvInitialiseTaskLists+0x6c>)
 80057f6:	f7fe fa29 	bl	8003c4c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80057fa:	480c      	ldr	r0, [pc, #48]	@ (800582c <prvInitialiseTaskLists+0x70>)
 80057fc:	f7fe fa26 	bl	8003c4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005800:	480b      	ldr	r0, [pc, #44]	@ (8005830 <prvInitialiseTaskLists+0x74>)
 8005802:	f7fe fa23 	bl	8003c4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005806:	4b0b      	ldr	r3, [pc, #44]	@ (8005834 <prvInitialiseTaskLists+0x78>)
 8005808:	4a05      	ldr	r2, [pc, #20]	@ (8005820 <prvInitialiseTaskLists+0x64>)
 800580a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800580c:	4b0a      	ldr	r3, [pc, #40]	@ (8005838 <prvInitialiseTaskLists+0x7c>)
 800580e:	4a05      	ldr	r2, [pc, #20]	@ (8005824 <prvInitialiseTaskLists+0x68>)
 8005810:	601a      	str	r2, [r3, #0]
}
 8005812:	bf00      	nop
 8005814:	3708      	adds	r7, #8
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
 800581a:	bf00      	nop
 800581c:	2000081c 	.word	0x2000081c
 8005820:	20000c7c 	.word	0x20000c7c
 8005824:	20000c90 	.word	0x20000c90
 8005828:	20000cac 	.word	0x20000cac
 800582c:	20000cc0 	.word	0x20000cc0
 8005830:	20000cd8 	.word	0x20000cd8
 8005834:	20000ca4 	.word	0x20000ca4
 8005838:	20000ca8 	.word	0x20000ca8

0800583c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b082      	sub	sp, #8
 8005840:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005842:	e019      	b.n	8005878 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005844:	f000 fef8 	bl	8006638 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005848:	4b10      	ldr	r3, [pc, #64]	@ (800588c <prvCheckTasksWaitingTermination+0x50>)
 800584a:	68db      	ldr	r3, [r3, #12]
 800584c:	68db      	ldr	r3, [r3, #12]
 800584e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	3304      	adds	r3, #4
 8005854:	4618      	mov	r0, r3
 8005856:	f7fe fa83 	bl	8003d60 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800585a:	4b0d      	ldr	r3, [pc, #52]	@ (8005890 <prvCheckTasksWaitingTermination+0x54>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	3b01      	subs	r3, #1
 8005860:	4a0b      	ldr	r2, [pc, #44]	@ (8005890 <prvCheckTasksWaitingTermination+0x54>)
 8005862:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005864:	4b0b      	ldr	r3, [pc, #44]	@ (8005894 <prvCheckTasksWaitingTermination+0x58>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	3b01      	subs	r3, #1
 800586a:	4a0a      	ldr	r2, [pc, #40]	@ (8005894 <prvCheckTasksWaitingTermination+0x58>)
 800586c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800586e:	f000 ff15 	bl	800669c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f000 f810 	bl	8005898 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005878:	4b06      	ldr	r3, [pc, #24]	@ (8005894 <prvCheckTasksWaitingTermination+0x58>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d1e1      	bne.n	8005844 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005880:	bf00      	nop
 8005882:	bf00      	nop
 8005884:	3708      	adds	r7, #8
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}
 800588a:	bf00      	nop
 800588c:	20000cc0 	.word	0x20000cc0
 8005890:	20000cec 	.word	0x20000cec
 8005894:	20000cd4 	.word	0x20000cd4

08005898 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005898:	b580      	push	{r7, lr}
 800589a:	b084      	sub	sp, #16
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d108      	bne.n	80058bc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058ae:	4618      	mov	r0, r3
 80058b0:	f001 f8b2 	bl	8006a18 <vPortFree>
				vPortFree( pxTCB );
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f001 f8af 	bl	8006a18 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80058ba:	e019      	b.n	80058f0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d103      	bne.n	80058ce <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f001 f8a6 	bl	8006a18 <vPortFree>
	}
 80058cc:	e010      	b.n	80058f0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80058d4:	2b02      	cmp	r3, #2
 80058d6:	d00b      	beq.n	80058f0 <prvDeleteTCB+0x58>
	__asm volatile
 80058d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058dc:	f383 8811 	msr	BASEPRI, r3
 80058e0:	f3bf 8f6f 	isb	sy
 80058e4:	f3bf 8f4f 	dsb	sy
 80058e8:	60fb      	str	r3, [r7, #12]
}
 80058ea:	bf00      	nop
 80058ec:	bf00      	nop
 80058ee:	e7fd      	b.n	80058ec <prvDeleteTCB+0x54>
	}
 80058f0:	bf00      	nop
 80058f2:	3710      	adds	r7, #16
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80058f8:	b480      	push	{r7}
 80058fa:	b083      	sub	sp, #12
 80058fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80058fe:	4b0c      	ldr	r3, [pc, #48]	@ (8005930 <prvResetNextTaskUnblockTime+0x38>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d104      	bne.n	8005912 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005908:	4b0a      	ldr	r3, [pc, #40]	@ (8005934 <prvResetNextTaskUnblockTime+0x3c>)
 800590a:	f04f 32ff 	mov.w	r2, #4294967295
 800590e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005910:	e008      	b.n	8005924 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005912:	4b07      	ldr	r3, [pc, #28]	@ (8005930 <prvResetNextTaskUnblockTime+0x38>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	68db      	ldr	r3, [r3, #12]
 8005918:	68db      	ldr	r3, [r3, #12]
 800591a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	4a04      	ldr	r2, [pc, #16]	@ (8005934 <prvResetNextTaskUnblockTime+0x3c>)
 8005922:	6013      	str	r3, [r2, #0]
}
 8005924:	bf00      	nop
 8005926:	370c      	adds	r7, #12
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr
 8005930:	20000ca4 	.word	0x20000ca4
 8005934:	20000d0c 	.word	0x20000d0c

08005938 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8005938:	b480      	push	{r7}
 800593a:	b083      	sub	sp, #12
 800593c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800593e:	4b05      	ldr	r3, [pc, #20]	@ (8005954 <xTaskGetCurrentTaskHandle+0x1c>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	607b      	str	r3, [r7, #4]

		return xReturn;
 8005944:	687b      	ldr	r3, [r7, #4]
	}
 8005946:	4618      	mov	r0, r3
 8005948:	370c      	adds	r7, #12
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr
 8005952:	bf00      	nop
 8005954:	20000818 	.word	0x20000818

08005958 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800595e:	4b0b      	ldr	r3, [pc, #44]	@ (800598c <xTaskGetSchedulerState+0x34>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d102      	bne.n	800596c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005966:	2301      	movs	r3, #1
 8005968:	607b      	str	r3, [r7, #4]
 800596a:	e008      	b.n	800597e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800596c:	4b08      	ldr	r3, [pc, #32]	@ (8005990 <xTaskGetSchedulerState+0x38>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d102      	bne.n	800597a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005974:	2302      	movs	r3, #2
 8005976:	607b      	str	r3, [r7, #4]
 8005978:	e001      	b.n	800597e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800597a:	2300      	movs	r3, #0
 800597c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800597e:	687b      	ldr	r3, [r7, #4]
	}
 8005980:	4618      	mov	r0, r3
 8005982:	370c      	adds	r7, #12
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr
 800598c:	20000cf8 	.word	0x20000cf8
 8005990:	20000d14 	.word	0x20000d14

08005994 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005994:	b580      	push	{r7, lr}
 8005996:	b084      	sub	sp, #16
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80059a0:	2300      	movs	r3, #0
 80059a2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d051      	beq.n	8005a4e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059ae:	4b2a      	ldr	r3, [pc, #168]	@ (8005a58 <xTaskPriorityInherit+0xc4>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d241      	bcs.n	8005a3c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	699b      	ldr	r3, [r3, #24]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	db06      	blt.n	80059ce <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059c0:	4b25      	ldr	r3, [pc, #148]	@ (8005a58 <xTaskPriorityInherit+0xc4>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059c6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	6959      	ldr	r1, [r3, #20]
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059d6:	4613      	mov	r3, r2
 80059d8:	009b      	lsls	r3, r3, #2
 80059da:	4413      	add	r3, r2
 80059dc:	009b      	lsls	r3, r3, #2
 80059de:	4a1f      	ldr	r2, [pc, #124]	@ (8005a5c <xTaskPriorityInherit+0xc8>)
 80059e0:	4413      	add	r3, r2
 80059e2:	4299      	cmp	r1, r3
 80059e4:	d122      	bne.n	8005a2c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	3304      	adds	r3, #4
 80059ea:	4618      	mov	r0, r3
 80059ec:	f7fe f9b8 	bl	8003d60 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80059f0:	4b19      	ldr	r3, [pc, #100]	@ (8005a58 <xTaskPriorityInherit+0xc4>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059fe:	4b18      	ldr	r3, [pc, #96]	@ (8005a60 <xTaskPriorityInherit+0xcc>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d903      	bls.n	8005a0e <xTaskPriorityInherit+0x7a>
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a0a:	4a15      	ldr	r2, [pc, #84]	@ (8005a60 <xTaskPriorityInherit+0xcc>)
 8005a0c:	6013      	str	r3, [r2, #0]
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a12:	4613      	mov	r3, r2
 8005a14:	009b      	lsls	r3, r3, #2
 8005a16:	4413      	add	r3, r2
 8005a18:	009b      	lsls	r3, r3, #2
 8005a1a:	4a10      	ldr	r2, [pc, #64]	@ (8005a5c <xTaskPriorityInherit+0xc8>)
 8005a1c:	441a      	add	r2, r3
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	3304      	adds	r3, #4
 8005a22:	4619      	mov	r1, r3
 8005a24:	4610      	mov	r0, r2
 8005a26:	f7fe f93e 	bl	8003ca6 <vListInsertEnd>
 8005a2a:	e004      	b.n	8005a36 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005a2c:	4b0a      	ldr	r3, [pc, #40]	@ (8005a58 <xTaskPriorityInherit+0xc4>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005a36:	2301      	movs	r3, #1
 8005a38:	60fb      	str	r3, [r7, #12]
 8005a3a:	e008      	b.n	8005a4e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005a40:	4b05      	ldr	r3, [pc, #20]	@ (8005a58 <xTaskPriorityInherit+0xc4>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d201      	bcs.n	8005a4e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
	}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3710      	adds	r7, #16
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}
 8005a58:	20000818 	.word	0x20000818
 8005a5c:	2000081c 	.word	0x2000081c
 8005a60:	20000cf4 	.word	0x20000cf4

08005a64 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b086      	sub	sp, #24
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005a70:	2300      	movs	r3, #0
 8005a72:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d058      	beq.n	8005b2c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005a7a:	4b2f      	ldr	r3, [pc, #188]	@ (8005b38 <xTaskPriorityDisinherit+0xd4>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	693a      	ldr	r2, [r7, #16]
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d00b      	beq.n	8005a9c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005a84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a88:	f383 8811 	msr	BASEPRI, r3
 8005a8c:	f3bf 8f6f 	isb	sy
 8005a90:	f3bf 8f4f 	dsb	sy
 8005a94:	60fb      	str	r3, [r7, #12]
}
 8005a96:	bf00      	nop
 8005a98:	bf00      	nop
 8005a9a:	e7fd      	b.n	8005a98 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d10b      	bne.n	8005abc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005aa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aa8:	f383 8811 	msr	BASEPRI, r3
 8005aac:	f3bf 8f6f 	isb	sy
 8005ab0:	f3bf 8f4f 	dsb	sy
 8005ab4:	60bb      	str	r3, [r7, #8]
}
 8005ab6:	bf00      	nop
 8005ab8:	bf00      	nop
 8005aba:	e7fd      	b.n	8005ab8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ac0:	1e5a      	subs	r2, r3, #1
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d02c      	beq.n	8005b2c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d128      	bne.n	8005b2c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	3304      	adds	r3, #4
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f7fe f93e 	bl	8003d60 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005af0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005afc:	4b0f      	ldr	r3, [pc, #60]	@ (8005b3c <xTaskPriorityDisinherit+0xd8>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d903      	bls.n	8005b0c <xTaskPriorityDisinherit+0xa8>
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b08:	4a0c      	ldr	r2, [pc, #48]	@ (8005b3c <xTaskPriorityDisinherit+0xd8>)
 8005b0a:	6013      	str	r3, [r2, #0]
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b10:	4613      	mov	r3, r2
 8005b12:	009b      	lsls	r3, r3, #2
 8005b14:	4413      	add	r3, r2
 8005b16:	009b      	lsls	r3, r3, #2
 8005b18:	4a09      	ldr	r2, [pc, #36]	@ (8005b40 <xTaskPriorityDisinherit+0xdc>)
 8005b1a:	441a      	add	r2, r3
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	3304      	adds	r3, #4
 8005b20:	4619      	mov	r1, r3
 8005b22:	4610      	mov	r0, r2
 8005b24:	f7fe f8bf 	bl	8003ca6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005b2c:	697b      	ldr	r3, [r7, #20]
	}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3718      	adds	r7, #24
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
 8005b36:	bf00      	nop
 8005b38:	20000818 	.word	0x20000818
 8005b3c:	20000cf4 	.word	0x20000cf4
 8005b40:	2000081c 	.word	0x2000081c

08005b44 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b088      	sub	sp, #32
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005b52:	2301      	movs	r3, #1
 8005b54:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d06c      	beq.n	8005c36 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005b5c:	69bb      	ldr	r3, [r7, #24]
 8005b5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d10b      	bne.n	8005b7c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8005b64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b68:	f383 8811 	msr	BASEPRI, r3
 8005b6c:	f3bf 8f6f 	isb	sy
 8005b70:	f3bf 8f4f 	dsb	sy
 8005b74:	60fb      	str	r3, [r7, #12]
}
 8005b76:	bf00      	nop
 8005b78:	bf00      	nop
 8005b7a:	e7fd      	b.n	8005b78 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005b7c:	69bb      	ldr	r3, [r7, #24]
 8005b7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b80:	683a      	ldr	r2, [r7, #0]
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d902      	bls.n	8005b8c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	61fb      	str	r3, [r7, #28]
 8005b8a:	e002      	b.n	8005b92 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005b8c:	69bb      	ldr	r3, [r7, #24]
 8005b8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b90:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005b92:	69bb      	ldr	r3, [r7, #24]
 8005b94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b96:	69fa      	ldr	r2, [r7, #28]
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d04c      	beq.n	8005c36 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005b9c:	69bb      	ldr	r3, [r7, #24]
 8005b9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ba0:	697a      	ldr	r2, [r7, #20]
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d147      	bne.n	8005c36 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005ba6:	4b26      	ldr	r3, [pc, #152]	@ (8005c40 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	69ba      	ldr	r2, [r7, #24]
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d10b      	bne.n	8005bc8 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8005bb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bb4:	f383 8811 	msr	BASEPRI, r3
 8005bb8:	f3bf 8f6f 	isb	sy
 8005bbc:	f3bf 8f4f 	dsb	sy
 8005bc0:	60bb      	str	r3, [r7, #8]
}
 8005bc2:	bf00      	nop
 8005bc4:	bf00      	nop
 8005bc6:	e7fd      	b.n	8005bc4 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005bc8:	69bb      	ldr	r3, [r7, #24]
 8005bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bcc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005bce:	69bb      	ldr	r3, [r7, #24]
 8005bd0:	69fa      	ldr	r2, [r7, #28]
 8005bd2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005bd4:	69bb      	ldr	r3, [r7, #24]
 8005bd6:	699b      	ldr	r3, [r3, #24]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	db04      	blt.n	8005be6 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005be2:	69bb      	ldr	r3, [r7, #24]
 8005be4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005be6:	69bb      	ldr	r3, [r7, #24]
 8005be8:	6959      	ldr	r1, [r3, #20]
 8005bea:	693a      	ldr	r2, [r7, #16]
 8005bec:	4613      	mov	r3, r2
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	4413      	add	r3, r2
 8005bf2:	009b      	lsls	r3, r3, #2
 8005bf4:	4a13      	ldr	r2, [pc, #76]	@ (8005c44 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005bf6:	4413      	add	r3, r2
 8005bf8:	4299      	cmp	r1, r3
 8005bfa:	d11c      	bne.n	8005c36 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005bfc:	69bb      	ldr	r3, [r7, #24]
 8005bfe:	3304      	adds	r3, #4
 8005c00:	4618      	mov	r0, r3
 8005c02:	f7fe f8ad 	bl	8003d60 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005c06:	69bb      	ldr	r3, [r7, #24]
 8005c08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c0a:	4b0f      	ldr	r3, [pc, #60]	@ (8005c48 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d903      	bls.n	8005c1a <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8005c12:	69bb      	ldr	r3, [r7, #24]
 8005c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c16:	4a0c      	ldr	r2, [pc, #48]	@ (8005c48 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005c18:	6013      	str	r3, [r2, #0]
 8005c1a:	69bb      	ldr	r3, [r7, #24]
 8005c1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c1e:	4613      	mov	r3, r2
 8005c20:	009b      	lsls	r3, r3, #2
 8005c22:	4413      	add	r3, r2
 8005c24:	009b      	lsls	r3, r3, #2
 8005c26:	4a07      	ldr	r2, [pc, #28]	@ (8005c44 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005c28:	441a      	add	r2, r3
 8005c2a:	69bb      	ldr	r3, [r7, #24]
 8005c2c:	3304      	adds	r3, #4
 8005c2e:	4619      	mov	r1, r3
 8005c30:	4610      	mov	r0, r2
 8005c32:	f7fe f838 	bl	8003ca6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005c36:	bf00      	nop
 8005c38:	3720      	adds	r7, #32
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}
 8005c3e:	bf00      	nop
 8005c40:	20000818 	.word	0x20000818
 8005c44:	2000081c 	.word	0x2000081c
 8005c48:	20000cf4 	.word	0x20000cf4

08005c4c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005c4c:	b480      	push	{r7}
 8005c4e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005c50:	4b07      	ldr	r3, [pc, #28]	@ (8005c70 <pvTaskIncrementMutexHeldCount+0x24>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d004      	beq.n	8005c62 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005c58:	4b05      	ldr	r3, [pc, #20]	@ (8005c70 <pvTaskIncrementMutexHeldCount+0x24>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005c5e:	3201      	adds	r2, #1
 8005c60:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8005c62:	4b03      	ldr	r3, [pc, #12]	@ (8005c70 <pvTaskIncrementMutexHeldCount+0x24>)
 8005c64:	681b      	ldr	r3, [r3, #0]
	}
 8005c66:	4618      	mov	r0, r3
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr
 8005c70:	20000818 	.word	0x20000818

08005c74 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b084      	sub	sp, #16
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005c7e:	4b21      	ldr	r3, [pc, #132]	@ (8005d04 <prvAddCurrentTaskToDelayedList+0x90>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c84:	4b20      	ldr	r3, [pc, #128]	@ (8005d08 <prvAddCurrentTaskToDelayedList+0x94>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	3304      	adds	r3, #4
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f7fe f868 	bl	8003d60 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c96:	d10a      	bne.n	8005cae <prvAddCurrentTaskToDelayedList+0x3a>
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d007      	beq.n	8005cae <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c9e:	4b1a      	ldr	r3, [pc, #104]	@ (8005d08 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	3304      	adds	r3, #4
 8005ca4:	4619      	mov	r1, r3
 8005ca6:	4819      	ldr	r0, [pc, #100]	@ (8005d0c <prvAddCurrentTaskToDelayedList+0x98>)
 8005ca8:	f7fd fffd 	bl	8003ca6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005cac:	e026      	b.n	8005cfc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005cae:	68fa      	ldr	r2, [r7, #12]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	4413      	add	r3, r2
 8005cb4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005cb6:	4b14      	ldr	r3, [pc, #80]	@ (8005d08 <prvAddCurrentTaskToDelayedList+0x94>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	68ba      	ldr	r2, [r7, #8]
 8005cbc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005cbe:	68ba      	ldr	r2, [r7, #8]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d209      	bcs.n	8005cda <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005cc6:	4b12      	ldr	r3, [pc, #72]	@ (8005d10 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	4b0f      	ldr	r3, [pc, #60]	@ (8005d08 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	3304      	adds	r3, #4
 8005cd0:	4619      	mov	r1, r3
 8005cd2:	4610      	mov	r0, r2
 8005cd4:	f7fe f80b 	bl	8003cee <vListInsert>
}
 8005cd8:	e010      	b.n	8005cfc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005cda:	4b0e      	ldr	r3, [pc, #56]	@ (8005d14 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	4b0a      	ldr	r3, [pc, #40]	@ (8005d08 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	3304      	adds	r3, #4
 8005ce4:	4619      	mov	r1, r3
 8005ce6:	4610      	mov	r0, r2
 8005ce8:	f7fe f801 	bl	8003cee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005cec:	4b0a      	ldr	r3, [pc, #40]	@ (8005d18 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	68ba      	ldr	r2, [r7, #8]
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	d202      	bcs.n	8005cfc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005cf6:	4a08      	ldr	r2, [pc, #32]	@ (8005d18 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	6013      	str	r3, [r2, #0]
}
 8005cfc:	bf00      	nop
 8005cfe:	3710      	adds	r7, #16
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}
 8005d04:	20000cf0 	.word	0x20000cf0
 8005d08:	20000818 	.word	0x20000818
 8005d0c:	20000cd8 	.word	0x20000cd8
 8005d10:	20000ca8 	.word	0x20000ca8
 8005d14:	20000ca4 	.word	0x20000ca4
 8005d18:	20000d0c 	.word	0x20000d0c

08005d1c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b08a      	sub	sp, #40	@ 0x28
 8005d20:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005d22:	2300      	movs	r3, #0
 8005d24:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005d26:	f000 fb13 	bl	8006350 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005d2a:	4b1d      	ldr	r3, [pc, #116]	@ (8005da0 <xTimerCreateTimerTask+0x84>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d021      	beq.n	8005d76 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005d32:	2300      	movs	r3, #0
 8005d34:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005d36:	2300      	movs	r3, #0
 8005d38:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005d3a:	1d3a      	adds	r2, r7, #4
 8005d3c:	f107 0108 	add.w	r1, r7, #8
 8005d40:	f107 030c 	add.w	r3, r7, #12
 8005d44:	4618      	mov	r0, r3
 8005d46:	f7fd ff67 	bl	8003c18 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005d4a:	6879      	ldr	r1, [r7, #4]
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	68fa      	ldr	r2, [r7, #12]
 8005d50:	9202      	str	r2, [sp, #8]
 8005d52:	9301      	str	r3, [sp, #4]
 8005d54:	2302      	movs	r3, #2
 8005d56:	9300      	str	r3, [sp, #0]
 8005d58:	2300      	movs	r3, #0
 8005d5a:	460a      	mov	r2, r1
 8005d5c:	4911      	ldr	r1, [pc, #68]	@ (8005da4 <xTimerCreateTimerTask+0x88>)
 8005d5e:	4812      	ldr	r0, [pc, #72]	@ (8005da8 <xTimerCreateTimerTask+0x8c>)
 8005d60:	f7fe ffc0 	bl	8004ce4 <xTaskCreateStatic>
 8005d64:	4603      	mov	r3, r0
 8005d66:	4a11      	ldr	r2, [pc, #68]	@ (8005dac <xTimerCreateTimerTask+0x90>)
 8005d68:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005d6a:	4b10      	ldr	r3, [pc, #64]	@ (8005dac <xTimerCreateTimerTask+0x90>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d001      	beq.n	8005d76 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005d72:	2301      	movs	r3, #1
 8005d74:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d10b      	bne.n	8005d94 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005d7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d80:	f383 8811 	msr	BASEPRI, r3
 8005d84:	f3bf 8f6f 	isb	sy
 8005d88:	f3bf 8f4f 	dsb	sy
 8005d8c:	613b      	str	r3, [r7, #16]
}
 8005d8e:	bf00      	nop
 8005d90:	bf00      	nop
 8005d92:	e7fd      	b.n	8005d90 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005d94:	697b      	ldr	r3, [r7, #20]
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3718      	adds	r7, #24
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
 8005d9e:	bf00      	nop
 8005da0:	20000d48 	.word	0x20000d48
 8005da4:	0800856c 	.word	0x0800856c
 8005da8:	08005ee9 	.word	0x08005ee9
 8005dac:	20000d4c 	.word	0x20000d4c

08005db0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b08a      	sub	sp, #40	@ 0x28
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	60f8      	str	r0, [r7, #12]
 8005db8:	60b9      	str	r1, [r7, #8]
 8005dba:	607a      	str	r2, [r7, #4]
 8005dbc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d10b      	bne.n	8005de0 <xTimerGenericCommand+0x30>
	__asm volatile
 8005dc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dcc:	f383 8811 	msr	BASEPRI, r3
 8005dd0:	f3bf 8f6f 	isb	sy
 8005dd4:	f3bf 8f4f 	dsb	sy
 8005dd8:	623b      	str	r3, [r7, #32]
}
 8005dda:	bf00      	nop
 8005ddc:	bf00      	nop
 8005dde:	e7fd      	b.n	8005ddc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005de0:	4b19      	ldr	r3, [pc, #100]	@ (8005e48 <xTimerGenericCommand+0x98>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d02a      	beq.n	8005e3e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	2b05      	cmp	r3, #5
 8005df8:	dc18      	bgt.n	8005e2c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005dfa:	f7ff fdad 	bl	8005958 <xTaskGetSchedulerState>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2b02      	cmp	r3, #2
 8005e02:	d109      	bne.n	8005e18 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005e04:	4b10      	ldr	r3, [pc, #64]	@ (8005e48 <xTimerGenericCommand+0x98>)
 8005e06:	6818      	ldr	r0, [r3, #0]
 8005e08:	f107 0110 	add.w	r1, r7, #16
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e10:	f7fe f9ce 	bl	80041b0 <xQueueGenericSend>
 8005e14:	6278      	str	r0, [r7, #36]	@ 0x24
 8005e16:	e012      	b.n	8005e3e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005e18:	4b0b      	ldr	r3, [pc, #44]	@ (8005e48 <xTimerGenericCommand+0x98>)
 8005e1a:	6818      	ldr	r0, [r3, #0]
 8005e1c:	f107 0110 	add.w	r1, r7, #16
 8005e20:	2300      	movs	r3, #0
 8005e22:	2200      	movs	r2, #0
 8005e24:	f7fe f9c4 	bl	80041b0 <xQueueGenericSend>
 8005e28:	6278      	str	r0, [r7, #36]	@ 0x24
 8005e2a:	e008      	b.n	8005e3e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005e2c:	4b06      	ldr	r3, [pc, #24]	@ (8005e48 <xTimerGenericCommand+0x98>)
 8005e2e:	6818      	ldr	r0, [r3, #0]
 8005e30:	f107 0110 	add.w	r1, r7, #16
 8005e34:	2300      	movs	r3, #0
 8005e36:	683a      	ldr	r2, [r7, #0]
 8005e38:	f7fe fabc 	bl	80043b4 <xQueueGenericSendFromISR>
 8005e3c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3728      	adds	r7, #40	@ 0x28
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}
 8005e48:	20000d48 	.word	0x20000d48

08005e4c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b088      	sub	sp, #32
 8005e50:	af02      	add	r7, sp, #8
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e56:	4b23      	ldr	r3, [pc, #140]	@ (8005ee4 <prvProcessExpiredTimer+0x98>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	68db      	ldr	r3, [r3, #12]
 8005e5e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	3304      	adds	r3, #4
 8005e64:	4618      	mov	r0, r3
 8005e66:	f7fd ff7b 	bl	8003d60 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005e70:	f003 0304 	and.w	r3, r3, #4
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d023      	beq.n	8005ec0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	699a      	ldr	r2, [r3, #24]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	18d1      	adds	r1, r2, r3
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	683a      	ldr	r2, [r7, #0]
 8005e84:	6978      	ldr	r0, [r7, #20]
 8005e86:	f000 f8d5 	bl	8006034 <prvInsertTimerInActiveList>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d020      	beq.n	8005ed2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005e90:	2300      	movs	r3, #0
 8005e92:	9300      	str	r3, [sp, #0]
 8005e94:	2300      	movs	r3, #0
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	2100      	movs	r1, #0
 8005e9a:	6978      	ldr	r0, [r7, #20]
 8005e9c:	f7ff ff88 	bl	8005db0 <xTimerGenericCommand>
 8005ea0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d114      	bne.n	8005ed2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005ea8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eac:	f383 8811 	msr	BASEPRI, r3
 8005eb0:	f3bf 8f6f 	isb	sy
 8005eb4:	f3bf 8f4f 	dsb	sy
 8005eb8:	60fb      	str	r3, [r7, #12]
}
 8005eba:	bf00      	nop
 8005ebc:	bf00      	nop
 8005ebe:	e7fd      	b.n	8005ebc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005ec6:	f023 0301 	bic.w	r3, r3, #1
 8005eca:	b2da      	uxtb	r2, r3
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	6a1b      	ldr	r3, [r3, #32]
 8005ed6:	6978      	ldr	r0, [r7, #20]
 8005ed8:	4798      	blx	r3
}
 8005eda:	bf00      	nop
 8005edc:	3718      	adds	r7, #24
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}
 8005ee2:	bf00      	nop
 8005ee4:	20000d40 	.word	0x20000d40

08005ee8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b084      	sub	sp, #16
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005ef0:	f107 0308 	add.w	r3, r7, #8
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f000 f859 	bl	8005fac <prvGetNextExpireTime>
 8005efa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	4619      	mov	r1, r3
 8005f00:	68f8      	ldr	r0, [r7, #12]
 8005f02:	f000 f805 	bl	8005f10 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005f06:	f000 f8d7 	bl	80060b8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005f0a:	bf00      	nop
 8005f0c:	e7f0      	b.n	8005ef0 <prvTimerTask+0x8>
	...

08005f10 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b084      	sub	sp, #16
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005f1a:	f7ff f927 	bl	800516c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005f1e:	f107 0308 	add.w	r3, r7, #8
 8005f22:	4618      	mov	r0, r3
 8005f24:	f000 f866 	bl	8005ff4 <prvSampleTimeNow>
 8005f28:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d130      	bne.n	8005f92 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d10a      	bne.n	8005f4c <prvProcessTimerOrBlockTask+0x3c>
 8005f36:	687a      	ldr	r2, [r7, #4]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d806      	bhi.n	8005f4c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005f3e:	f7ff f923 	bl	8005188 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005f42:	68f9      	ldr	r1, [r7, #12]
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f7ff ff81 	bl	8005e4c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005f4a:	e024      	b.n	8005f96 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d008      	beq.n	8005f64 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005f52:	4b13      	ldr	r3, [pc, #76]	@ (8005fa0 <prvProcessTimerOrBlockTask+0x90>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d101      	bne.n	8005f60 <prvProcessTimerOrBlockTask+0x50>
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	e000      	b.n	8005f62 <prvProcessTimerOrBlockTask+0x52>
 8005f60:	2300      	movs	r3, #0
 8005f62:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005f64:	4b0f      	ldr	r3, [pc, #60]	@ (8005fa4 <prvProcessTimerOrBlockTask+0x94>)
 8005f66:	6818      	ldr	r0, [r3, #0]
 8005f68:	687a      	ldr	r2, [r7, #4]
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	1ad3      	subs	r3, r2, r3
 8005f6e:	683a      	ldr	r2, [r7, #0]
 8005f70:	4619      	mov	r1, r3
 8005f72:	f7fe fe83 	bl	8004c7c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005f76:	f7ff f907 	bl	8005188 <xTaskResumeAll>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d10a      	bne.n	8005f96 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005f80:	4b09      	ldr	r3, [pc, #36]	@ (8005fa8 <prvProcessTimerOrBlockTask+0x98>)
 8005f82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f86:	601a      	str	r2, [r3, #0]
 8005f88:	f3bf 8f4f 	dsb	sy
 8005f8c:	f3bf 8f6f 	isb	sy
}
 8005f90:	e001      	b.n	8005f96 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005f92:	f7ff f8f9 	bl	8005188 <xTaskResumeAll>
}
 8005f96:	bf00      	nop
 8005f98:	3710      	adds	r7, #16
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}
 8005f9e:	bf00      	nop
 8005fa0:	20000d44 	.word	0x20000d44
 8005fa4:	20000d48 	.word	0x20000d48
 8005fa8:	e000ed04 	.word	0xe000ed04

08005fac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005fac:	b480      	push	{r7}
 8005fae:	b085      	sub	sp, #20
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005fb4:	4b0e      	ldr	r3, [pc, #56]	@ (8005ff0 <prvGetNextExpireTime+0x44>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d101      	bne.n	8005fc2 <prvGetNextExpireTime+0x16>
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	e000      	b.n	8005fc4 <prvGetNextExpireTime+0x18>
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d105      	bne.n	8005fdc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005fd0:	4b07      	ldr	r3, [pc, #28]	@ (8005ff0 <prvGetNextExpireTime+0x44>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	68db      	ldr	r3, [r3, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	60fb      	str	r3, [r7, #12]
 8005fda:	e001      	b.n	8005fe0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3714      	adds	r7, #20
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr
 8005fee:	bf00      	nop
 8005ff0:	20000d40 	.word	0x20000d40

08005ff4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b084      	sub	sp, #16
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005ffc:	f7ff f962 	bl	80052c4 <xTaskGetTickCount>
 8006000:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006002:	4b0b      	ldr	r3, [pc, #44]	@ (8006030 <prvSampleTimeNow+0x3c>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	68fa      	ldr	r2, [r7, #12]
 8006008:	429a      	cmp	r2, r3
 800600a:	d205      	bcs.n	8006018 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800600c:	f000 f93a 	bl	8006284 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2201      	movs	r2, #1
 8006014:	601a      	str	r2, [r3, #0]
 8006016:	e002      	b.n	800601e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800601e:	4a04      	ldr	r2, [pc, #16]	@ (8006030 <prvSampleTimeNow+0x3c>)
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006024:	68fb      	ldr	r3, [r7, #12]
}
 8006026:	4618      	mov	r0, r3
 8006028:	3710      	adds	r7, #16
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}
 800602e:	bf00      	nop
 8006030:	20000d50 	.word	0x20000d50

08006034 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b086      	sub	sp, #24
 8006038:	af00      	add	r7, sp, #0
 800603a:	60f8      	str	r0, [r7, #12]
 800603c:	60b9      	str	r1, [r7, #8]
 800603e:	607a      	str	r2, [r7, #4]
 8006040:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006042:	2300      	movs	r3, #0
 8006044:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	68ba      	ldr	r2, [r7, #8]
 800604a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	68fa      	ldr	r2, [r7, #12]
 8006050:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006052:	68ba      	ldr	r2, [r7, #8]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	429a      	cmp	r2, r3
 8006058:	d812      	bhi.n	8006080 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	1ad2      	subs	r2, r2, r3
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	699b      	ldr	r3, [r3, #24]
 8006064:	429a      	cmp	r2, r3
 8006066:	d302      	bcc.n	800606e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006068:	2301      	movs	r3, #1
 800606a:	617b      	str	r3, [r7, #20]
 800606c:	e01b      	b.n	80060a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800606e:	4b10      	ldr	r3, [pc, #64]	@ (80060b0 <prvInsertTimerInActiveList+0x7c>)
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	3304      	adds	r3, #4
 8006076:	4619      	mov	r1, r3
 8006078:	4610      	mov	r0, r2
 800607a:	f7fd fe38 	bl	8003cee <vListInsert>
 800607e:	e012      	b.n	80060a6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	429a      	cmp	r2, r3
 8006086:	d206      	bcs.n	8006096 <prvInsertTimerInActiveList+0x62>
 8006088:	68ba      	ldr	r2, [r7, #8]
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	429a      	cmp	r2, r3
 800608e:	d302      	bcc.n	8006096 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006090:	2301      	movs	r3, #1
 8006092:	617b      	str	r3, [r7, #20]
 8006094:	e007      	b.n	80060a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006096:	4b07      	ldr	r3, [pc, #28]	@ (80060b4 <prvInsertTimerInActiveList+0x80>)
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	3304      	adds	r3, #4
 800609e:	4619      	mov	r1, r3
 80060a0:	4610      	mov	r0, r2
 80060a2:	f7fd fe24 	bl	8003cee <vListInsert>
		}
	}

	return xProcessTimerNow;
 80060a6:	697b      	ldr	r3, [r7, #20]
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3718      	adds	r7, #24
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}
 80060b0:	20000d44 	.word	0x20000d44
 80060b4:	20000d40 	.word	0x20000d40

080060b8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b08e      	sub	sp, #56	@ 0x38
 80060bc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80060be:	e0ce      	b.n	800625e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	da19      	bge.n	80060fa <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80060c6:	1d3b      	adds	r3, r7, #4
 80060c8:	3304      	adds	r3, #4
 80060ca:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80060cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d10b      	bne.n	80060ea <prvProcessReceivedCommands+0x32>
	__asm volatile
 80060d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060d6:	f383 8811 	msr	BASEPRI, r3
 80060da:	f3bf 8f6f 	isb	sy
 80060de:	f3bf 8f4f 	dsb	sy
 80060e2:	61fb      	str	r3, [r7, #28]
}
 80060e4:	bf00      	nop
 80060e6:	bf00      	nop
 80060e8:	e7fd      	b.n	80060e6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80060ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80060f0:	6850      	ldr	r0, [r2, #4]
 80060f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80060f4:	6892      	ldr	r2, [r2, #8]
 80060f6:	4611      	mov	r1, r2
 80060f8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	f2c0 80ae 	blt.w	800625e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006108:	695b      	ldr	r3, [r3, #20]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d004      	beq.n	8006118 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800610e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006110:	3304      	adds	r3, #4
 8006112:	4618      	mov	r0, r3
 8006114:	f7fd fe24 	bl	8003d60 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006118:	463b      	mov	r3, r7
 800611a:	4618      	mov	r0, r3
 800611c:	f7ff ff6a 	bl	8005ff4 <prvSampleTimeNow>
 8006120:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2b09      	cmp	r3, #9
 8006126:	f200 8097 	bhi.w	8006258 <prvProcessReceivedCommands+0x1a0>
 800612a:	a201      	add	r2, pc, #4	@ (adr r2, 8006130 <prvProcessReceivedCommands+0x78>)
 800612c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006130:	08006159 	.word	0x08006159
 8006134:	08006159 	.word	0x08006159
 8006138:	08006159 	.word	0x08006159
 800613c:	080061cf 	.word	0x080061cf
 8006140:	080061e3 	.word	0x080061e3
 8006144:	0800622f 	.word	0x0800622f
 8006148:	08006159 	.word	0x08006159
 800614c:	08006159 	.word	0x08006159
 8006150:	080061cf 	.word	0x080061cf
 8006154:	080061e3 	.word	0x080061e3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800615a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800615e:	f043 0301 	orr.w	r3, r3, #1
 8006162:	b2da      	uxtb	r2, r3
 8006164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006166:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800616a:	68ba      	ldr	r2, [r7, #8]
 800616c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800616e:	699b      	ldr	r3, [r3, #24]
 8006170:	18d1      	adds	r1, r2, r3
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006176:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006178:	f7ff ff5c 	bl	8006034 <prvInsertTimerInActiveList>
 800617c:	4603      	mov	r3, r0
 800617e:	2b00      	cmp	r3, #0
 8006180:	d06c      	beq.n	800625c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006182:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006184:	6a1b      	ldr	r3, [r3, #32]
 8006186:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006188:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800618a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800618c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006190:	f003 0304 	and.w	r3, r3, #4
 8006194:	2b00      	cmp	r3, #0
 8006196:	d061      	beq.n	800625c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006198:	68ba      	ldr	r2, [r7, #8]
 800619a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800619c:	699b      	ldr	r3, [r3, #24]
 800619e:	441a      	add	r2, r3
 80061a0:	2300      	movs	r3, #0
 80061a2:	9300      	str	r3, [sp, #0]
 80061a4:	2300      	movs	r3, #0
 80061a6:	2100      	movs	r1, #0
 80061a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80061aa:	f7ff fe01 	bl	8005db0 <xTimerGenericCommand>
 80061ae:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80061b0:	6a3b      	ldr	r3, [r7, #32]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d152      	bne.n	800625c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80061b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061ba:	f383 8811 	msr	BASEPRI, r3
 80061be:	f3bf 8f6f 	isb	sy
 80061c2:	f3bf 8f4f 	dsb	sy
 80061c6:	61bb      	str	r3, [r7, #24]
}
 80061c8:	bf00      	nop
 80061ca:	bf00      	nop
 80061cc:	e7fd      	b.n	80061ca <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80061ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80061d4:	f023 0301 	bic.w	r3, r3, #1
 80061d8:	b2da      	uxtb	r2, r3
 80061da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061dc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80061e0:	e03d      	b.n	800625e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80061e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80061e8:	f043 0301 	orr.w	r3, r3, #1
 80061ec:	b2da      	uxtb	r2, r3
 80061ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061f0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80061f4:	68ba      	ldr	r2, [r7, #8]
 80061f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061f8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80061fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061fc:	699b      	ldr	r3, [r3, #24]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d10b      	bne.n	800621a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006206:	f383 8811 	msr	BASEPRI, r3
 800620a:	f3bf 8f6f 	isb	sy
 800620e:	f3bf 8f4f 	dsb	sy
 8006212:	617b      	str	r3, [r7, #20]
}
 8006214:	bf00      	nop
 8006216:	bf00      	nop
 8006218:	e7fd      	b.n	8006216 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800621a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800621c:	699a      	ldr	r2, [r3, #24]
 800621e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006220:	18d1      	adds	r1, r2, r3
 8006222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006224:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006226:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006228:	f7ff ff04 	bl	8006034 <prvInsertTimerInActiveList>
					break;
 800622c:	e017      	b.n	800625e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800622e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006230:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006234:	f003 0302 	and.w	r3, r3, #2
 8006238:	2b00      	cmp	r3, #0
 800623a:	d103      	bne.n	8006244 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800623c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800623e:	f000 fbeb 	bl	8006a18 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006242:	e00c      	b.n	800625e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006246:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800624a:	f023 0301 	bic.w	r3, r3, #1
 800624e:	b2da      	uxtb	r2, r3
 8006250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006252:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006256:	e002      	b.n	800625e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006258:	bf00      	nop
 800625a:	e000      	b.n	800625e <prvProcessReceivedCommands+0x1a6>
					break;
 800625c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800625e:	4b08      	ldr	r3, [pc, #32]	@ (8006280 <prvProcessReceivedCommands+0x1c8>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	1d39      	adds	r1, r7, #4
 8006264:	2200      	movs	r2, #0
 8006266:	4618      	mov	r0, r3
 8006268:	f7fe f942 	bl	80044f0 <xQueueReceive>
 800626c:	4603      	mov	r3, r0
 800626e:	2b00      	cmp	r3, #0
 8006270:	f47f af26 	bne.w	80060c0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006274:	bf00      	nop
 8006276:	bf00      	nop
 8006278:	3730      	adds	r7, #48	@ 0x30
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}
 800627e:	bf00      	nop
 8006280:	20000d48 	.word	0x20000d48

08006284 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b088      	sub	sp, #32
 8006288:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800628a:	e049      	b.n	8006320 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800628c:	4b2e      	ldr	r3, [pc, #184]	@ (8006348 <prvSwitchTimerLists+0xc4>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006296:	4b2c      	ldr	r3, [pc, #176]	@ (8006348 <prvSwitchTimerLists+0xc4>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	68db      	ldr	r3, [r3, #12]
 800629c:	68db      	ldr	r3, [r3, #12]
 800629e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	3304      	adds	r3, #4
 80062a4:	4618      	mov	r0, r3
 80062a6:	f7fd fd5b 	bl	8003d60 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	6a1b      	ldr	r3, [r3, #32]
 80062ae:	68f8      	ldr	r0, [r7, #12]
 80062b0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80062b8:	f003 0304 	and.w	r3, r3, #4
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d02f      	beq.n	8006320 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	699b      	ldr	r3, [r3, #24]
 80062c4:	693a      	ldr	r2, [r7, #16]
 80062c6:	4413      	add	r3, r2
 80062c8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80062ca:	68ba      	ldr	r2, [r7, #8]
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	429a      	cmp	r2, r3
 80062d0:	d90e      	bls.n	80062f0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	68ba      	ldr	r2, [r7, #8]
 80062d6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	68fa      	ldr	r2, [r7, #12]
 80062dc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80062de:	4b1a      	ldr	r3, [pc, #104]	@ (8006348 <prvSwitchTimerLists+0xc4>)
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	3304      	adds	r3, #4
 80062e6:	4619      	mov	r1, r3
 80062e8:	4610      	mov	r0, r2
 80062ea:	f7fd fd00 	bl	8003cee <vListInsert>
 80062ee:	e017      	b.n	8006320 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80062f0:	2300      	movs	r3, #0
 80062f2:	9300      	str	r3, [sp, #0]
 80062f4:	2300      	movs	r3, #0
 80062f6:	693a      	ldr	r2, [r7, #16]
 80062f8:	2100      	movs	r1, #0
 80062fa:	68f8      	ldr	r0, [r7, #12]
 80062fc:	f7ff fd58 	bl	8005db0 <xTimerGenericCommand>
 8006300:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d10b      	bne.n	8006320 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006308:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800630c:	f383 8811 	msr	BASEPRI, r3
 8006310:	f3bf 8f6f 	isb	sy
 8006314:	f3bf 8f4f 	dsb	sy
 8006318:	603b      	str	r3, [r7, #0]
}
 800631a:	bf00      	nop
 800631c:	bf00      	nop
 800631e:	e7fd      	b.n	800631c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006320:	4b09      	ldr	r3, [pc, #36]	@ (8006348 <prvSwitchTimerLists+0xc4>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d1b0      	bne.n	800628c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800632a:	4b07      	ldr	r3, [pc, #28]	@ (8006348 <prvSwitchTimerLists+0xc4>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006330:	4b06      	ldr	r3, [pc, #24]	@ (800634c <prvSwitchTimerLists+0xc8>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a04      	ldr	r2, [pc, #16]	@ (8006348 <prvSwitchTimerLists+0xc4>)
 8006336:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006338:	4a04      	ldr	r2, [pc, #16]	@ (800634c <prvSwitchTimerLists+0xc8>)
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	6013      	str	r3, [r2, #0]
}
 800633e:	bf00      	nop
 8006340:	3718      	adds	r7, #24
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
 8006346:	bf00      	nop
 8006348:	20000d40 	.word	0x20000d40
 800634c:	20000d44 	.word	0x20000d44

08006350 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b082      	sub	sp, #8
 8006354:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006356:	f000 f96f 	bl	8006638 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800635a:	4b15      	ldr	r3, [pc, #84]	@ (80063b0 <prvCheckForValidListAndQueue+0x60>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d120      	bne.n	80063a4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006362:	4814      	ldr	r0, [pc, #80]	@ (80063b4 <prvCheckForValidListAndQueue+0x64>)
 8006364:	f7fd fc72 	bl	8003c4c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006368:	4813      	ldr	r0, [pc, #76]	@ (80063b8 <prvCheckForValidListAndQueue+0x68>)
 800636a:	f7fd fc6f 	bl	8003c4c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800636e:	4b13      	ldr	r3, [pc, #76]	@ (80063bc <prvCheckForValidListAndQueue+0x6c>)
 8006370:	4a10      	ldr	r2, [pc, #64]	@ (80063b4 <prvCheckForValidListAndQueue+0x64>)
 8006372:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006374:	4b12      	ldr	r3, [pc, #72]	@ (80063c0 <prvCheckForValidListAndQueue+0x70>)
 8006376:	4a10      	ldr	r2, [pc, #64]	@ (80063b8 <prvCheckForValidListAndQueue+0x68>)
 8006378:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800637a:	2300      	movs	r3, #0
 800637c:	9300      	str	r3, [sp, #0]
 800637e:	4b11      	ldr	r3, [pc, #68]	@ (80063c4 <prvCheckForValidListAndQueue+0x74>)
 8006380:	4a11      	ldr	r2, [pc, #68]	@ (80063c8 <prvCheckForValidListAndQueue+0x78>)
 8006382:	2110      	movs	r1, #16
 8006384:	200a      	movs	r0, #10
 8006386:	f7fd fd7f 	bl	8003e88 <xQueueGenericCreateStatic>
 800638a:	4603      	mov	r3, r0
 800638c:	4a08      	ldr	r2, [pc, #32]	@ (80063b0 <prvCheckForValidListAndQueue+0x60>)
 800638e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006390:	4b07      	ldr	r3, [pc, #28]	@ (80063b0 <prvCheckForValidListAndQueue+0x60>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d005      	beq.n	80063a4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006398:	4b05      	ldr	r3, [pc, #20]	@ (80063b0 <prvCheckForValidListAndQueue+0x60>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	490b      	ldr	r1, [pc, #44]	@ (80063cc <prvCheckForValidListAndQueue+0x7c>)
 800639e:	4618      	mov	r0, r3
 80063a0:	f7fe fc42 	bl	8004c28 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80063a4:	f000 f97a 	bl	800669c <vPortExitCritical>
}
 80063a8:	bf00      	nop
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}
 80063ae:	bf00      	nop
 80063b0:	20000d48 	.word	0x20000d48
 80063b4:	20000d18 	.word	0x20000d18
 80063b8:	20000d2c 	.word	0x20000d2c
 80063bc:	20000d40 	.word	0x20000d40
 80063c0:	20000d44 	.word	0x20000d44
 80063c4:	20000df4 	.word	0x20000df4
 80063c8:	20000d54 	.word	0x20000d54
 80063cc:	08008574 	.word	0x08008574

080063d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80063d0:	b480      	push	{r7}
 80063d2:	b085      	sub	sp, #20
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	60f8      	str	r0, [r7, #12]
 80063d8:	60b9      	str	r1, [r7, #8]
 80063da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	3b04      	subs	r3, #4
 80063e0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80063e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	3b04      	subs	r3, #4
 80063ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	f023 0201 	bic.w	r2, r3, #1
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	3b04      	subs	r3, #4
 80063fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006400:	4a0c      	ldr	r2, [pc, #48]	@ (8006434 <pxPortInitialiseStack+0x64>)
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	3b14      	subs	r3, #20
 800640a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800640c:	687a      	ldr	r2, [r7, #4]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	3b04      	subs	r3, #4
 8006416:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f06f 0202 	mvn.w	r2, #2
 800641e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	3b20      	subs	r3, #32
 8006424:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006426:	68fb      	ldr	r3, [r7, #12]
}
 8006428:	4618      	mov	r0, r3
 800642a:	3714      	adds	r7, #20
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr
 8006434:	08006439 	.word	0x08006439

08006438 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006438:	b480      	push	{r7}
 800643a:	b085      	sub	sp, #20
 800643c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800643e:	2300      	movs	r3, #0
 8006440:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006442:	4b13      	ldr	r3, [pc, #76]	@ (8006490 <prvTaskExitError+0x58>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800644a:	d00b      	beq.n	8006464 <prvTaskExitError+0x2c>
	__asm volatile
 800644c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006450:	f383 8811 	msr	BASEPRI, r3
 8006454:	f3bf 8f6f 	isb	sy
 8006458:	f3bf 8f4f 	dsb	sy
 800645c:	60fb      	str	r3, [r7, #12]
}
 800645e:	bf00      	nop
 8006460:	bf00      	nop
 8006462:	e7fd      	b.n	8006460 <prvTaskExitError+0x28>
	__asm volatile
 8006464:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006468:	f383 8811 	msr	BASEPRI, r3
 800646c:	f3bf 8f6f 	isb	sy
 8006470:	f3bf 8f4f 	dsb	sy
 8006474:	60bb      	str	r3, [r7, #8]
}
 8006476:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006478:	bf00      	nop
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d0fc      	beq.n	800647a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006480:	bf00      	nop
 8006482:	bf00      	nop
 8006484:	3714      	adds	r7, #20
 8006486:	46bd      	mov	sp, r7
 8006488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648c:	4770      	bx	lr
 800648e:	bf00      	nop
 8006490:	20000024 	.word	0x20000024
	...

080064a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80064a0:	4b07      	ldr	r3, [pc, #28]	@ (80064c0 <pxCurrentTCBConst2>)
 80064a2:	6819      	ldr	r1, [r3, #0]
 80064a4:	6808      	ldr	r0, [r1, #0]
 80064a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064aa:	f380 8809 	msr	PSP, r0
 80064ae:	f3bf 8f6f 	isb	sy
 80064b2:	f04f 0000 	mov.w	r0, #0
 80064b6:	f380 8811 	msr	BASEPRI, r0
 80064ba:	4770      	bx	lr
 80064bc:	f3af 8000 	nop.w

080064c0 <pxCurrentTCBConst2>:
 80064c0:	20000818 	.word	0x20000818
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80064c4:	bf00      	nop
 80064c6:	bf00      	nop

080064c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80064c8:	4808      	ldr	r0, [pc, #32]	@ (80064ec <prvPortStartFirstTask+0x24>)
 80064ca:	6800      	ldr	r0, [r0, #0]
 80064cc:	6800      	ldr	r0, [r0, #0]
 80064ce:	f380 8808 	msr	MSP, r0
 80064d2:	f04f 0000 	mov.w	r0, #0
 80064d6:	f380 8814 	msr	CONTROL, r0
 80064da:	b662      	cpsie	i
 80064dc:	b661      	cpsie	f
 80064de:	f3bf 8f4f 	dsb	sy
 80064e2:	f3bf 8f6f 	isb	sy
 80064e6:	df00      	svc	0
 80064e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80064ea:	bf00      	nop
 80064ec:	e000ed08 	.word	0xe000ed08

080064f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b086      	sub	sp, #24
 80064f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80064f6:	4b47      	ldr	r3, [pc, #284]	@ (8006614 <xPortStartScheduler+0x124>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4a47      	ldr	r2, [pc, #284]	@ (8006618 <xPortStartScheduler+0x128>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d10b      	bne.n	8006518 <xPortStartScheduler+0x28>
	__asm volatile
 8006500:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006504:	f383 8811 	msr	BASEPRI, r3
 8006508:	f3bf 8f6f 	isb	sy
 800650c:	f3bf 8f4f 	dsb	sy
 8006510:	60fb      	str	r3, [r7, #12]
}
 8006512:	bf00      	nop
 8006514:	bf00      	nop
 8006516:	e7fd      	b.n	8006514 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006518:	4b3e      	ldr	r3, [pc, #248]	@ (8006614 <xPortStartScheduler+0x124>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a3f      	ldr	r2, [pc, #252]	@ (800661c <xPortStartScheduler+0x12c>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d10b      	bne.n	800653a <xPortStartScheduler+0x4a>
	__asm volatile
 8006522:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006526:	f383 8811 	msr	BASEPRI, r3
 800652a:	f3bf 8f6f 	isb	sy
 800652e:	f3bf 8f4f 	dsb	sy
 8006532:	613b      	str	r3, [r7, #16]
}
 8006534:	bf00      	nop
 8006536:	bf00      	nop
 8006538:	e7fd      	b.n	8006536 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800653a:	4b39      	ldr	r3, [pc, #228]	@ (8006620 <xPortStartScheduler+0x130>)
 800653c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	b2db      	uxtb	r3, r3
 8006544:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	22ff      	movs	r2, #255	@ 0xff
 800654a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	781b      	ldrb	r3, [r3, #0]
 8006550:	b2db      	uxtb	r3, r3
 8006552:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006554:	78fb      	ldrb	r3, [r7, #3]
 8006556:	b2db      	uxtb	r3, r3
 8006558:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800655c:	b2da      	uxtb	r2, r3
 800655e:	4b31      	ldr	r3, [pc, #196]	@ (8006624 <xPortStartScheduler+0x134>)
 8006560:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006562:	4b31      	ldr	r3, [pc, #196]	@ (8006628 <xPortStartScheduler+0x138>)
 8006564:	2207      	movs	r2, #7
 8006566:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006568:	e009      	b.n	800657e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800656a:	4b2f      	ldr	r3, [pc, #188]	@ (8006628 <xPortStartScheduler+0x138>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	3b01      	subs	r3, #1
 8006570:	4a2d      	ldr	r2, [pc, #180]	@ (8006628 <xPortStartScheduler+0x138>)
 8006572:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006574:	78fb      	ldrb	r3, [r7, #3]
 8006576:	b2db      	uxtb	r3, r3
 8006578:	005b      	lsls	r3, r3, #1
 800657a:	b2db      	uxtb	r3, r3
 800657c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800657e:	78fb      	ldrb	r3, [r7, #3]
 8006580:	b2db      	uxtb	r3, r3
 8006582:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006586:	2b80      	cmp	r3, #128	@ 0x80
 8006588:	d0ef      	beq.n	800656a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800658a:	4b27      	ldr	r3, [pc, #156]	@ (8006628 <xPortStartScheduler+0x138>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f1c3 0307 	rsb	r3, r3, #7
 8006592:	2b04      	cmp	r3, #4
 8006594:	d00b      	beq.n	80065ae <xPortStartScheduler+0xbe>
	__asm volatile
 8006596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800659a:	f383 8811 	msr	BASEPRI, r3
 800659e:	f3bf 8f6f 	isb	sy
 80065a2:	f3bf 8f4f 	dsb	sy
 80065a6:	60bb      	str	r3, [r7, #8]
}
 80065a8:	bf00      	nop
 80065aa:	bf00      	nop
 80065ac:	e7fd      	b.n	80065aa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80065ae:	4b1e      	ldr	r3, [pc, #120]	@ (8006628 <xPortStartScheduler+0x138>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	021b      	lsls	r3, r3, #8
 80065b4:	4a1c      	ldr	r2, [pc, #112]	@ (8006628 <xPortStartScheduler+0x138>)
 80065b6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80065b8:	4b1b      	ldr	r3, [pc, #108]	@ (8006628 <xPortStartScheduler+0x138>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80065c0:	4a19      	ldr	r2, [pc, #100]	@ (8006628 <xPortStartScheduler+0x138>)
 80065c2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	b2da      	uxtb	r2, r3
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80065cc:	4b17      	ldr	r3, [pc, #92]	@ (800662c <xPortStartScheduler+0x13c>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a16      	ldr	r2, [pc, #88]	@ (800662c <xPortStartScheduler+0x13c>)
 80065d2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80065d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80065d8:	4b14      	ldr	r3, [pc, #80]	@ (800662c <xPortStartScheduler+0x13c>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a13      	ldr	r2, [pc, #76]	@ (800662c <xPortStartScheduler+0x13c>)
 80065de:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80065e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80065e4:	f000 f8da 	bl	800679c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80065e8:	4b11      	ldr	r3, [pc, #68]	@ (8006630 <xPortStartScheduler+0x140>)
 80065ea:	2200      	movs	r2, #0
 80065ec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80065ee:	f000 f8f9 	bl	80067e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80065f2:	4b10      	ldr	r3, [pc, #64]	@ (8006634 <xPortStartScheduler+0x144>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a0f      	ldr	r2, [pc, #60]	@ (8006634 <xPortStartScheduler+0x144>)
 80065f8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80065fc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80065fe:	f7ff ff63 	bl	80064c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006602:	f7fe ff29 	bl	8005458 <vTaskSwitchContext>
	prvTaskExitError();
 8006606:	f7ff ff17 	bl	8006438 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800660a:	2300      	movs	r3, #0
}
 800660c:	4618      	mov	r0, r3
 800660e:	3718      	adds	r7, #24
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}
 8006614:	e000ed00 	.word	0xe000ed00
 8006618:	410fc271 	.word	0x410fc271
 800661c:	410fc270 	.word	0x410fc270
 8006620:	e000e400 	.word	0xe000e400
 8006624:	20000e44 	.word	0x20000e44
 8006628:	20000e48 	.word	0x20000e48
 800662c:	e000ed20 	.word	0xe000ed20
 8006630:	20000024 	.word	0x20000024
 8006634:	e000ef34 	.word	0xe000ef34

08006638 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006638:	b480      	push	{r7}
 800663a:	b083      	sub	sp, #12
 800663c:	af00      	add	r7, sp, #0
	__asm volatile
 800663e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006642:	f383 8811 	msr	BASEPRI, r3
 8006646:	f3bf 8f6f 	isb	sy
 800664a:	f3bf 8f4f 	dsb	sy
 800664e:	607b      	str	r3, [r7, #4]
}
 8006650:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006652:	4b10      	ldr	r3, [pc, #64]	@ (8006694 <vPortEnterCritical+0x5c>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	3301      	adds	r3, #1
 8006658:	4a0e      	ldr	r2, [pc, #56]	@ (8006694 <vPortEnterCritical+0x5c>)
 800665a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800665c:	4b0d      	ldr	r3, [pc, #52]	@ (8006694 <vPortEnterCritical+0x5c>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	2b01      	cmp	r3, #1
 8006662:	d110      	bne.n	8006686 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006664:	4b0c      	ldr	r3, [pc, #48]	@ (8006698 <vPortEnterCritical+0x60>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	b2db      	uxtb	r3, r3
 800666a:	2b00      	cmp	r3, #0
 800666c:	d00b      	beq.n	8006686 <vPortEnterCritical+0x4e>
	__asm volatile
 800666e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006672:	f383 8811 	msr	BASEPRI, r3
 8006676:	f3bf 8f6f 	isb	sy
 800667a:	f3bf 8f4f 	dsb	sy
 800667e:	603b      	str	r3, [r7, #0]
}
 8006680:	bf00      	nop
 8006682:	bf00      	nop
 8006684:	e7fd      	b.n	8006682 <vPortEnterCritical+0x4a>
	}
}
 8006686:	bf00      	nop
 8006688:	370c      	adds	r7, #12
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	4770      	bx	lr
 8006692:	bf00      	nop
 8006694:	20000024 	.word	0x20000024
 8006698:	e000ed04 	.word	0xe000ed04

0800669c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800669c:	b480      	push	{r7}
 800669e:	b083      	sub	sp, #12
 80066a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80066a2:	4b12      	ldr	r3, [pc, #72]	@ (80066ec <vPortExitCritical+0x50>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d10b      	bne.n	80066c2 <vPortExitCritical+0x26>
	__asm volatile
 80066aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066ae:	f383 8811 	msr	BASEPRI, r3
 80066b2:	f3bf 8f6f 	isb	sy
 80066b6:	f3bf 8f4f 	dsb	sy
 80066ba:	607b      	str	r3, [r7, #4]
}
 80066bc:	bf00      	nop
 80066be:	bf00      	nop
 80066c0:	e7fd      	b.n	80066be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80066c2:	4b0a      	ldr	r3, [pc, #40]	@ (80066ec <vPortExitCritical+0x50>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	3b01      	subs	r3, #1
 80066c8:	4a08      	ldr	r2, [pc, #32]	@ (80066ec <vPortExitCritical+0x50>)
 80066ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80066cc:	4b07      	ldr	r3, [pc, #28]	@ (80066ec <vPortExitCritical+0x50>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d105      	bne.n	80066e0 <vPortExitCritical+0x44>
 80066d4:	2300      	movs	r3, #0
 80066d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	f383 8811 	msr	BASEPRI, r3
}
 80066de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80066e0:	bf00      	nop
 80066e2:	370c      	adds	r7, #12
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr
 80066ec:	20000024 	.word	0x20000024

080066f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80066f0:	f3ef 8009 	mrs	r0, PSP
 80066f4:	f3bf 8f6f 	isb	sy
 80066f8:	4b15      	ldr	r3, [pc, #84]	@ (8006750 <pxCurrentTCBConst>)
 80066fa:	681a      	ldr	r2, [r3, #0]
 80066fc:	f01e 0f10 	tst.w	lr, #16
 8006700:	bf08      	it	eq
 8006702:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006706:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800670a:	6010      	str	r0, [r2, #0]
 800670c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006710:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006714:	f380 8811 	msr	BASEPRI, r0
 8006718:	f3bf 8f4f 	dsb	sy
 800671c:	f3bf 8f6f 	isb	sy
 8006720:	f7fe fe9a 	bl	8005458 <vTaskSwitchContext>
 8006724:	f04f 0000 	mov.w	r0, #0
 8006728:	f380 8811 	msr	BASEPRI, r0
 800672c:	bc09      	pop	{r0, r3}
 800672e:	6819      	ldr	r1, [r3, #0]
 8006730:	6808      	ldr	r0, [r1, #0]
 8006732:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006736:	f01e 0f10 	tst.w	lr, #16
 800673a:	bf08      	it	eq
 800673c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006740:	f380 8809 	msr	PSP, r0
 8006744:	f3bf 8f6f 	isb	sy
 8006748:	4770      	bx	lr
 800674a:	bf00      	nop
 800674c:	f3af 8000 	nop.w

08006750 <pxCurrentTCBConst>:
 8006750:	20000818 	.word	0x20000818
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006754:	bf00      	nop
 8006756:	bf00      	nop

08006758 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b082      	sub	sp, #8
 800675c:	af00      	add	r7, sp, #0
	__asm volatile
 800675e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006762:	f383 8811 	msr	BASEPRI, r3
 8006766:	f3bf 8f6f 	isb	sy
 800676a:	f3bf 8f4f 	dsb	sy
 800676e:	607b      	str	r3, [r7, #4]
}
 8006770:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006772:	f7fe fdb7 	bl	80052e4 <xTaskIncrementTick>
 8006776:	4603      	mov	r3, r0
 8006778:	2b00      	cmp	r3, #0
 800677a:	d003      	beq.n	8006784 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800677c:	4b06      	ldr	r3, [pc, #24]	@ (8006798 <xPortSysTickHandler+0x40>)
 800677e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006782:	601a      	str	r2, [r3, #0]
 8006784:	2300      	movs	r3, #0
 8006786:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	f383 8811 	msr	BASEPRI, r3
}
 800678e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006790:	bf00      	nop
 8006792:	3708      	adds	r7, #8
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}
 8006798:	e000ed04 	.word	0xe000ed04

0800679c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800679c:	b480      	push	{r7}
 800679e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80067a0:	4b0b      	ldr	r3, [pc, #44]	@ (80067d0 <vPortSetupTimerInterrupt+0x34>)
 80067a2:	2200      	movs	r2, #0
 80067a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80067a6:	4b0b      	ldr	r3, [pc, #44]	@ (80067d4 <vPortSetupTimerInterrupt+0x38>)
 80067a8:	2200      	movs	r2, #0
 80067aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80067ac:	4b0a      	ldr	r3, [pc, #40]	@ (80067d8 <vPortSetupTimerInterrupt+0x3c>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a0a      	ldr	r2, [pc, #40]	@ (80067dc <vPortSetupTimerInterrupt+0x40>)
 80067b2:	fba2 2303 	umull	r2, r3, r2, r3
 80067b6:	099b      	lsrs	r3, r3, #6
 80067b8:	4a09      	ldr	r2, [pc, #36]	@ (80067e0 <vPortSetupTimerInterrupt+0x44>)
 80067ba:	3b01      	subs	r3, #1
 80067bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80067be:	4b04      	ldr	r3, [pc, #16]	@ (80067d0 <vPortSetupTimerInterrupt+0x34>)
 80067c0:	2207      	movs	r2, #7
 80067c2:	601a      	str	r2, [r3, #0]
}
 80067c4:	bf00      	nop
 80067c6:	46bd      	mov	sp, r7
 80067c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067cc:	4770      	bx	lr
 80067ce:	bf00      	nop
 80067d0:	e000e010 	.word	0xe000e010
 80067d4:	e000e018 	.word	0xe000e018
 80067d8:	20000018 	.word	0x20000018
 80067dc:	10624dd3 	.word	0x10624dd3
 80067e0:	e000e014 	.word	0xe000e014

080067e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80067e4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80067f4 <vPortEnableVFP+0x10>
 80067e8:	6801      	ldr	r1, [r0, #0]
 80067ea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80067ee:	6001      	str	r1, [r0, #0]
 80067f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80067f2:	bf00      	nop
 80067f4:	e000ed88 	.word	0xe000ed88

080067f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80067f8:	b480      	push	{r7}
 80067fa:	b085      	sub	sp, #20
 80067fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80067fe:	f3ef 8305 	mrs	r3, IPSR
 8006802:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	2b0f      	cmp	r3, #15
 8006808:	d915      	bls.n	8006836 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800680a:	4a18      	ldr	r2, [pc, #96]	@ (800686c <vPortValidateInterruptPriority+0x74>)
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	4413      	add	r3, r2
 8006810:	781b      	ldrb	r3, [r3, #0]
 8006812:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006814:	4b16      	ldr	r3, [pc, #88]	@ (8006870 <vPortValidateInterruptPriority+0x78>)
 8006816:	781b      	ldrb	r3, [r3, #0]
 8006818:	7afa      	ldrb	r2, [r7, #11]
 800681a:	429a      	cmp	r2, r3
 800681c:	d20b      	bcs.n	8006836 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800681e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006822:	f383 8811 	msr	BASEPRI, r3
 8006826:	f3bf 8f6f 	isb	sy
 800682a:	f3bf 8f4f 	dsb	sy
 800682e:	607b      	str	r3, [r7, #4]
}
 8006830:	bf00      	nop
 8006832:	bf00      	nop
 8006834:	e7fd      	b.n	8006832 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006836:	4b0f      	ldr	r3, [pc, #60]	@ (8006874 <vPortValidateInterruptPriority+0x7c>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800683e:	4b0e      	ldr	r3, [pc, #56]	@ (8006878 <vPortValidateInterruptPriority+0x80>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	429a      	cmp	r2, r3
 8006844:	d90b      	bls.n	800685e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800684a:	f383 8811 	msr	BASEPRI, r3
 800684e:	f3bf 8f6f 	isb	sy
 8006852:	f3bf 8f4f 	dsb	sy
 8006856:	603b      	str	r3, [r7, #0]
}
 8006858:	bf00      	nop
 800685a:	bf00      	nop
 800685c:	e7fd      	b.n	800685a <vPortValidateInterruptPriority+0x62>
	}
 800685e:	bf00      	nop
 8006860:	3714      	adds	r7, #20
 8006862:	46bd      	mov	sp, r7
 8006864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006868:	4770      	bx	lr
 800686a:	bf00      	nop
 800686c:	e000e3f0 	.word	0xe000e3f0
 8006870:	20000e44 	.word	0x20000e44
 8006874:	e000ed0c 	.word	0xe000ed0c
 8006878:	20000e48 	.word	0x20000e48

0800687c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b08a      	sub	sp, #40	@ 0x28
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006884:	2300      	movs	r3, #0
 8006886:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006888:	f7fe fc70 	bl	800516c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800688c:	4b5c      	ldr	r3, [pc, #368]	@ (8006a00 <pvPortMalloc+0x184>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d101      	bne.n	8006898 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006894:	f000 f924 	bl	8006ae0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006898:	4b5a      	ldr	r3, [pc, #360]	@ (8006a04 <pvPortMalloc+0x188>)
 800689a:	681a      	ldr	r2, [r3, #0]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	4013      	ands	r3, r2
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	f040 8095 	bne.w	80069d0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d01e      	beq.n	80068ea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80068ac:	2208      	movs	r2, #8
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	4413      	add	r3, r2
 80068b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f003 0307 	and.w	r3, r3, #7
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d015      	beq.n	80068ea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f023 0307 	bic.w	r3, r3, #7
 80068c4:	3308      	adds	r3, #8
 80068c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f003 0307 	and.w	r3, r3, #7
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d00b      	beq.n	80068ea <pvPortMalloc+0x6e>
	__asm volatile
 80068d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068d6:	f383 8811 	msr	BASEPRI, r3
 80068da:	f3bf 8f6f 	isb	sy
 80068de:	f3bf 8f4f 	dsb	sy
 80068e2:	617b      	str	r3, [r7, #20]
}
 80068e4:	bf00      	nop
 80068e6:	bf00      	nop
 80068e8:	e7fd      	b.n	80068e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d06f      	beq.n	80069d0 <pvPortMalloc+0x154>
 80068f0:	4b45      	ldr	r3, [pc, #276]	@ (8006a08 <pvPortMalloc+0x18c>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	687a      	ldr	r2, [r7, #4]
 80068f6:	429a      	cmp	r2, r3
 80068f8:	d86a      	bhi.n	80069d0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80068fa:	4b44      	ldr	r3, [pc, #272]	@ (8006a0c <pvPortMalloc+0x190>)
 80068fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80068fe:	4b43      	ldr	r3, [pc, #268]	@ (8006a0c <pvPortMalloc+0x190>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006904:	e004      	b.n	8006910 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006908:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800690a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	429a      	cmp	r2, r3
 8006918:	d903      	bls.n	8006922 <pvPortMalloc+0xa6>
 800691a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d1f1      	bne.n	8006906 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006922:	4b37      	ldr	r3, [pc, #220]	@ (8006a00 <pvPortMalloc+0x184>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006928:	429a      	cmp	r2, r3
 800692a:	d051      	beq.n	80069d0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800692c:	6a3b      	ldr	r3, [r7, #32]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	2208      	movs	r2, #8
 8006932:	4413      	add	r3, r2
 8006934:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006938:	681a      	ldr	r2, [r3, #0]
 800693a:	6a3b      	ldr	r3, [r7, #32]
 800693c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800693e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006940:	685a      	ldr	r2, [r3, #4]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	1ad2      	subs	r2, r2, r3
 8006946:	2308      	movs	r3, #8
 8006948:	005b      	lsls	r3, r3, #1
 800694a:	429a      	cmp	r2, r3
 800694c:	d920      	bls.n	8006990 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800694e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	4413      	add	r3, r2
 8006954:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006956:	69bb      	ldr	r3, [r7, #24]
 8006958:	f003 0307 	and.w	r3, r3, #7
 800695c:	2b00      	cmp	r3, #0
 800695e:	d00b      	beq.n	8006978 <pvPortMalloc+0xfc>
	__asm volatile
 8006960:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006964:	f383 8811 	msr	BASEPRI, r3
 8006968:	f3bf 8f6f 	isb	sy
 800696c:	f3bf 8f4f 	dsb	sy
 8006970:	613b      	str	r3, [r7, #16]
}
 8006972:	bf00      	nop
 8006974:	bf00      	nop
 8006976:	e7fd      	b.n	8006974 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800697a:	685a      	ldr	r2, [r3, #4]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	1ad2      	subs	r2, r2, r3
 8006980:	69bb      	ldr	r3, [r7, #24]
 8006982:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006986:	687a      	ldr	r2, [r7, #4]
 8006988:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800698a:	69b8      	ldr	r0, [r7, #24]
 800698c:	f000 f90a 	bl	8006ba4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006990:	4b1d      	ldr	r3, [pc, #116]	@ (8006a08 <pvPortMalloc+0x18c>)
 8006992:	681a      	ldr	r2, [r3, #0]
 8006994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	1ad3      	subs	r3, r2, r3
 800699a:	4a1b      	ldr	r2, [pc, #108]	@ (8006a08 <pvPortMalloc+0x18c>)
 800699c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800699e:	4b1a      	ldr	r3, [pc, #104]	@ (8006a08 <pvPortMalloc+0x18c>)
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	4b1b      	ldr	r3, [pc, #108]	@ (8006a10 <pvPortMalloc+0x194>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	429a      	cmp	r2, r3
 80069a8:	d203      	bcs.n	80069b2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80069aa:	4b17      	ldr	r3, [pc, #92]	@ (8006a08 <pvPortMalloc+0x18c>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a18      	ldr	r2, [pc, #96]	@ (8006a10 <pvPortMalloc+0x194>)
 80069b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80069b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069b4:	685a      	ldr	r2, [r3, #4]
 80069b6:	4b13      	ldr	r3, [pc, #76]	@ (8006a04 <pvPortMalloc+0x188>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	431a      	orrs	r2, r3
 80069bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80069c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069c2:	2200      	movs	r2, #0
 80069c4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80069c6:	4b13      	ldr	r3, [pc, #76]	@ (8006a14 <pvPortMalloc+0x198>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	3301      	adds	r3, #1
 80069cc:	4a11      	ldr	r2, [pc, #68]	@ (8006a14 <pvPortMalloc+0x198>)
 80069ce:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80069d0:	f7fe fbda 	bl	8005188 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80069d4:	69fb      	ldr	r3, [r7, #28]
 80069d6:	f003 0307 	and.w	r3, r3, #7
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d00b      	beq.n	80069f6 <pvPortMalloc+0x17a>
	__asm volatile
 80069de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069e2:	f383 8811 	msr	BASEPRI, r3
 80069e6:	f3bf 8f6f 	isb	sy
 80069ea:	f3bf 8f4f 	dsb	sy
 80069ee:	60fb      	str	r3, [r7, #12]
}
 80069f0:	bf00      	nop
 80069f2:	bf00      	nop
 80069f4:	e7fd      	b.n	80069f2 <pvPortMalloc+0x176>
	return pvReturn;
 80069f6:	69fb      	ldr	r3, [r7, #28]
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3728      	adds	r7, #40	@ 0x28
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}
 8006a00:	20004a54 	.word	0x20004a54
 8006a04:	20004a68 	.word	0x20004a68
 8006a08:	20004a58 	.word	0x20004a58
 8006a0c:	20004a4c 	.word	0x20004a4c
 8006a10:	20004a5c 	.word	0x20004a5c
 8006a14:	20004a60 	.word	0x20004a60

08006a18 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b086      	sub	sp, #24
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d04f      	beq.n	8006aca <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006a2a:	2308      	movs	r3, #8
 8006a2c:	425b      	negs	r3, r3
 8006a2e:	697a      	ldr	r2, [r7, #20]
 8006a30:	4413      	add	r3, r2
 8006a32:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	685a      	ldr	r2, [r3, #4]
 8006a3c:	4b25      	ldr	r3, [pc, #148]	@ (8006ad4 <vPortFree+0xbc>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4013      	ands	r3, r2
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d10b      	bne.n	8006a5e <vPortFree+0x46>
	__asm volatile
 8006a46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a4a:	f383 8811 	msr	BASEPRI, r3
 8006a4e:	f3bf 8f6f 	isb	sy
 8006a52:	f3bf 8f4f 	dsb	sy
 8006a56:	60fb      	str	r3, [r7, #12]
}
 8006a58:	bf00      	nop
 8006a5a:	bf00      	nop
 8006a5c:	e7fd      	b.n	8006a5a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d00b      	beq.n	8006a7e <vPortFree+0x66>
	__asm volatile
 8006a66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a6a:	f383 8811 	msr	BASEPRI, r3
 8006a6e:	f3bf 8f6f 	isb	sy
 8006a72:	f3bf 8f4f 	dsb	sy
 8006a76:	60bb      	str	r3, [r7, #8]
}
 8006a78:	bf00      	nop
 8006a7a:	bf00      	nop
 8006a7c:	e7fd      	b.n	8006a7a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	685a      	ldr	r2, [r3, #4]
 8006a82:	4b14      	ldr	r3, [pc, #80]	@ (8006ad4 <vPortFree+0xbc>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4013      	ands	r3, r2
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d01e      	beq.n	8006aca <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d11a      	bne.n	8006aca <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	685a      	ldr	r2, [r3, #4]
 8006a98:	4b0e      	ldr	r3, [pc, #56]	@ (8006ad4 <vPortFree+0xbc>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	43db      	mvns	r3, r3
 8006a9e:	401a      	ands	r2, r3
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006aa4:	f7fe fb62 	bl	800516c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	685a      	ldr	r2, [r3, #4]
 8006aac:	4b0a      	ldr	r3, [pc, #40]	@ (8006ad8 <vPortFree+0xc0>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4413      	add	r3, r2
 8006ab2:	4a09      	ldr	r2, [pc, #36]	@ (8006ad8 <vPortFree+0xc0>)
 8006ab4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006ab6:	6938      	ldr	r0, [r7, #16]
 8006ab8:	f000 f874 	bl	8006ba4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006abc:	4b07      	ldr	r3, [pc, #28]	@ (8006adc <vPortFree+0xc4>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	3301      	adds	r3, #1
 8006ac2:	4a06      	ldr	r2, [pc, #24]	@ (8006adc <vPortFree+0xc4>)
 8006ac4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006ac6:	f7fe fb5f 	bl	8005188 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006aca:	bf00      	nop
 8006acc:	3718      	adds	r7, #24
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
 8006ad2:	bf00      	nop
 8006ad4:	20004a68 	.word	0x20004a68
 8006ad8:	20004a58 	.word	0x20004a58
 8006adc:	20004a64 	.word	0x20004a64

08006ae0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b085      	sub	sp, #20
 8006ae4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006ae6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8006aea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006aec:	4b27      	ldr	r3, [pc, #156]	@ (8006b8c <prvHeapInit+0xac>)
 8006aee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	f003 0307 	and.w	r3, r3, #7
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d00c      	beq.n	8006b14 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	3307      	adds	r3, #7
 8006afe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f023 0307 	bic.w	r3, r3, #7
 8006b06:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006b08:	68ba      	ldr	r2, [r7, #8]
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	1ad3      	subs	r3, r2, r3
 8006b0e:	4a1f      	ldr	r2, [pc, #124]	@ (8006b8c <prvHeapInit+0xac>)
 8006b10:	4413      	add	r3, r2
 8006b12:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006b18:	4a1d      	ldr	r2, [pc, #116]	@ (8006b90 <prvHeapInit+0xb0>)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006b1e:	4b1c      	ldr	r3, [pc, #112]	@ (8006b90 <prvHeapInit+0xb0>)
 8006b20:	2200      	movs	r2, #0
 8006b22:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	68ba      	ldr	r2, [r7, #8]
 8006b28:	4413      	add	r3, r2
 8006b2a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006b2c:	2208      	movs	r2, #8
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	1a9b      	subs	r3, r3, r2
 8006b32:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f023 0307 	bic.w	r3, r3, #7
 8006b3a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	4a15      	ldr	r2, [pc, #84]	@ (8006b94 <prvHeapInit+0xb4>)
 8006b40:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006b42:	4b14      	ldr	r3, [pc, #80]	@ (8006b94 <prvHeapInit+0xb4>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	2200      	movs	r2, #0
 8006b48:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006b4a:	4b12      	ldr	r3, [pc, #72]	@ (8006b94 <prvHeapInit+0xb4>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	68fa      	ldr	r2, [r7, #12]
 8006b5a:	1ad2      	subs	r2, r2, r3
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006b60:	4b0c      	ldr	r3, [pc, #48]	@ (8006b94 <prvHeapInit+0xb4>)
 8006b62:	681a      	ldr	r2, [r3, #0]
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	4a0a      	ldr	r2, [pc, #40]	@ (8006b98 <prvHeapInit+0xb8>)
 8006b6e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	4a09      	ldr	r2, [pc, #36]	@ (8006b9c <prvHeapInit+0xbc>)
 8006b76:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006b78:	4b09      	ldr	r3, [pc, #36]	@ (8006ba0 <prvHeapInit+0xc0>)
 8006b7a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006b7e:	601a      	str	r2, [r3, #0]
}
 8006b80:	bf00      	nop
 8006b82:	3714      	adds	r7, #20
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr
 8006b8c:	20000e4c 	.word	0x20000e4c
 8006b90:	20004a4c 	.word	0x20004a4c
 8006b94:	20004a54 	.word	0x20004a54
 8006b98:	20004a5c 	.word	0x20004a5c
 8006b9c:	20004a58 	.word	0x20004a58
 8006ba0:	20004a68 	.word	0x20004a68

08006ba4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b085      	sub	sp, #20
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006bac:	4b28      	ldr	r3, [pc, #160]	@ (8006c50 <prvInsertBlockIntoFreeList+0xac>)
 8006bae:	60fb      	str	r3, [r7, #12]
 8006bb0:	e002      	b.n	8006bb8 <prvInsertBlockIntoFreeList+0x14>
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	60fb      	str	r3, [r7, #12]
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	687a      	ldr	r2, [r7, #4]
 8006bbe:	429a      	cmp	r2, r3
 8006bc0:	d8f7      	bhi.n	8006bb2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	68ba      	ldr	r2, [r7, #8]
 8006bcc:	4413      	add	r3, r2
 8006bce:	687a      	ldr	r2, [r7, #4]
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d108      	bne.n	8006be6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	685a      	ldr	r2, [r3, #4]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	441a      	add	r2, r3
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	68ba      	ldr	r2, [r7, #8]
 8006bf0:	441a      	add	r2, r3
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	429a      	cmp	r2, r3
 8006bf8:	d118      	bne.n	8006c2c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681a      	ldr	r2, [r3, #0]
 8006bfe:	4b15      	ldr	r3, [pc, #84]	@ (8006c54 <prvInsertBlockIntoFreeList+0xb0>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	429a      	cmp	r2, r3
 8006c04:	d00d      	beq.n	8006c22 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	685a      	ldr	r2, [r3, #4]
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	441a      	add	r2, r3
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	601a      	str	r2, [r3, #0]
 8006c20:	e008      	b.n	8006c34 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006c22:	4b0c      	ldr	r3, [pc, #48]	@ (8006c54 <prvInsertBlockIntoFreeList+0xb0>)
 8006c24:	681a      	ldr	r2, [r3, #0]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	601a      	str	r2, [r3, #0]
 8006c2a:	e003      	b.n	8006c34 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681a      	ldr	r2, [r3, #0]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006c34:	68fa      	ldr	r2, [r7, #12]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	d002      	beq.n	8006c42 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	687a      	ldr	r2, [r7, #4]
 8006c40:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c42:	bf00      	nop
 8006c44:	3714      	adds	r7, #20
 8006c46:	46bd      	mov	sp, r7
 8006c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4c:	4770      	bx	lr
 8006c4e:	bf00      	nop
 8006c50:	20004a4c 	.word	0x20004a4c
 8006c54:	20004a54 	.word	0x20004a54

08006c58 <memset>:
 8006c58:	4402      	add	r2, r0
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d100      	bne.n	8006c62 <memset+0xa>
 8006c60:	4770      	bx	lr
 8006c62:	f803 1b01 	strb.w	r1, [r3], #1
 8006c66:	e7f9      	b.n	8006c5c <memset+0x4>

08006c68 <strncat>:
 8006c68:	b530      	push	{r4, r5, lr}
 8006c6a:	4604      	mov	r4, r0
 8006c6c:	7825      	ldrb	r5, [r4, #0]
 8006c6e:	4623      	mov	r3, r4
 8006c70:	3401      	adds	r4, #1
 8006c72:	2d00      	cmp	r5, #0
 8006c74:	d1fa      	bne.n	8006c6c <strncat+0x4>
 8006c76:	3a01      	subs	r2, #1
 8006c78:	d304      	bcc.n	8006c84 <strncat+0x1c>
 8006c7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c7e:	f803 4b01 	strb.w	r4, [r3], #1
 8006c82:	b904      	cbnz	r4, 8006c86 <strncat+0x1e>
 8006c84:	bd30      	pop	{r4, r5, pc}
 8006c86:	2a00      	cmp	r2, #0
 8006c88:	d1f5      	bne.n	8006c76 <strncat+0xe>
 8006c8a:	701a      	strb	r2, [r3, #0]
 8006c8c:	e7f3      	b.n	8006c76 <strncat+0xe>

08006c8e <strncmp>:
 8006c8e:	b510      	push	{r4, lr}
 8006c90:	b16a      	cbz	r2, 8006cae <strncmp+0x20>
 8006c92:	3901      	subs	r1, #1
 8006c94:	1884      	adds	r4, r0, r2
 8006c96:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c9a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006c9e:	429a      	cmp	r2, r3
 8006ca0:	d103      	bne.n	8006caa <strncmp+0x1c>
 8006ca2:	42a0      	cmp	r0, r4
 8006ca4:	d001      	beq.n	8006caa <strncmp+0x1c>
 8006ca6:	2a00      	cmp	r2, #0
 8006ca8:	d1f5      	bne.n	8006c96 <strncmp+0x8>
 8006caa:	1ad0      	subs	r0, r2, r3
 8006cac:	bd10      	pop	{r4, pc}
 8006cae:	4610      	mov	r0, r2
 8006cb0:	e7fc      	b.n	8006cac <strncmp+0x1e>
	...

08006cb4 <__errno>:
 8006cb4:	4b01      	ldr	r3, [pc, #4]	@ (8006cbc <__errno+0x8>)
 8006cb6:	6818      	ldr	r0, [r3, #0]
 8006cb8:	4770      	bx	lr
 8006cba:	bf00      	nop
 8006cbc:	20000028 	.word	0x20000028

08006cc0 <__libc_init_array>:
 8006cc0:	b570      	push	{r4, r5, r6, lr}
 8006cc2:	4d0d      	ldr	r5, [pc, #52]	@ (8006cf8 <__libc_init_array+0x38>)
 8006cc4:	4c0d      	ldr	r4, [pc, #52]	@ (8006cfc <__libc_init_array+0x3c>)
 8006cc6:	1b64      	subs	r4, r4, r5
 8006cc8:	10a4      	asrs	r4, r4, #2
 8006cca:	2600      	movs	r6, #0
 8006ccc:	42a6      	cmp	r6, r4
 8006cce:	d109      	bne.n	8006ce4 <__libc_init_array+0x24>
 8006cd0:	4d0b      	ldr	r5, [pc, #44]	@ (8006d00 <__libc_init_array+0x40>)
 8006cd2:	4c0c      	ldr	r4, [pc, #48]	@ (8006d04 <__libc_init_array+0x44>)
 8006cd4:	f001 fc04 	bl	80084e0 <_init>
 8006cd8:	1b64      	subs	r4, r4, r5
 8006cda:	10a4      	asrs	r4, r4, #2
 8006cdc:	2600      	movs	r6, #0
 8006cde:	42a6      	cmp	r6, r4
 8006ce0:	d105      	bne.n	8006cee <__libc_init_array+0x2e>
 8006ce2:	bd70      	pop	{r4, r5, r6, pc}
 8006ce4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ce8:	4798      	blx	r3
 8006cea:	3601      	adds	r6, #1
 8006cec:	e7ee      	b.n	8006ccc <__libc_init_array+0xc>
 8006cee:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cf2:	4798      	blx	r3
 8006cf4:	3601      	adds	r6, #1
 8006cf6:	e7f2      	b.n	8006cde <__libc_init_array+0x1e>
 8006cf8:	080089d0 	.word	0x080089d0
 8006cfc:	080089d0 	.word	0x080089d0
 8006d00:	080089d0 	.word	0x080089d0
 8006d04:	080089d4 	.word	0x080089d4

08006d08 <memcpy>:
 8006d08:	440a      	add	r2, r1
 8006d0a:	4291      	cmp	r1, r2
 8006d0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d10:	d100      	bne.n	8006d14 <memcpy+0xc>
 8006d12:	4770      	bx	lr
 8006d14:	b510      	push	{r4, lr}
 8006d16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d1e:	4291      	cmp	r1, r2
 8006d20:	d1f9      	bne.n	8006d16 <memcpy+0xe>
 8006d22:	bd10      	pop	{r4, pc}

08006d24 <atan2>:
 8006d24:	f000 bb30 	b.w	8007388 <__ieee754_atan2>

08006d28 <sqrt>:
 8006d28:	b538      	push	{r3, r4, r5, lr}
 8006d2a:	ed2d 8b02 	vpush	{d8}
 8006d2e:	ec55 4b10 	vmov	r4, r5, d0
 8006d32:	f000 f8cd 	bl	8006ed0 <__ieee754_sqrt>
 8006d36:	4622      	mov	r2, r4
 8006d38:	462b      	mov	r3, r5
 8006d3a:	4620      	mov	r0, r4
 8006d3c:	4629      	mov	r1, r5
 8006d3e:	eeb0 8a40 	vmov.f32	s16, s0
 8006d42:	eef0 8a60 	vmov.f32	s17, s1
 8006d46:	f7f9 fea9 	bl	8000a9c <__aeabi_dcmpun>
 8006d4a:	b990      	cbnz	r0, 8006d72 <sqrt+0x4a>
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	2300      	movs	r3, #0
 8006d50:	4620      	mov	r0, r4
 8006d52:	4629      	mov	r1, r5
 8006d54:	f7f9 fe7a 	bl	8000a4c <__aeabi_dcmplt>
 8006d58:	b158      	cbz	r0, 8006d72 <sqrt+0x4a>
 8006d5a:	f7ff ffab 	bl	8006cb4 <__errno>
 8006d5e:	2321      	movs	r3, #33	@ 0x21
 8006d60:	6003      	str	r3, [r0, #0]
 8006d62:	2200      	movs	r2, #0
 8006d64:	2300      	movs	r3, #0
 8006d66:	4610      	mov	r0, r2
 8006d68:	4619      	mov	r1, r3
 8006d6a:	f7f9 fd27 	bl	80007bc <__aeabi_ddiv>
 8006d6e:	ec41 0b18 	vmov	d8, r0, r1
 8006d72:	eeb0 0a48 	vmov.f32	s0, s16
 8006d76:	eef0 0a68 	vmov.f32	s1, s17
 8006d7a:	ecbd 8b02 	vpop	{d8}
 8006d7e:	bd38      	pop	{r3, r4, r5, pc}

08006d80 <cos>:
 8006d80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006d82:	ec53 2b10 	vmov	r2, r3, d0
 8006d86:	4826      	ldr	r0, [pc, #152]	@ (8006e20 <cos+0xa0>)
 8006d88:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006d8c:	4281      	cmp	r1, r0
 8006d8e:	d806      	bhi.n	8006d9e <cos+0x1e>
 8006d90:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8006e18 <cos+0x98>
 8006d94:	b005      	add	sp, #20
 8006d96:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d9a:	f000 b971 	b.w	8007080 <__kernel_cos>
 8006d9e:	4821      	ldr	r0, [pc, #132]	@ (8006e24 <cos+0xa4>)
 8006da0:	4281      	cmp	r1, r0
 8006da2:	d908      	bls.n	8006db6 <cos+0x36>
 8006da4:	4610      	mov	r0, r2
 8006da6:	4619      	mov	r1, r3
 8006da8:	f7f9 fa26 	bl	80001f8 <__aeabi_dsub>
 8006dac:	ec41 0b10 	vmov	d0, r0, r1
 8006db0:	b005      	add	sp, #20
 8006db2:	f85d fb04 	ldr.w	pc, [sp], #4
 8006db6:	4668      	mov	r0, sp
 8006db8:	f000 fbae 	bl	8007518 <__ieee754_rem_pio2>
 8006dbc:	f000 0003 	and.w	r0, r0, #3
 8006dc0:	2801      	cmp	r0, #1
 8006dc2:	d00b      	beq.n	8006ddc <cos+0x5c>
 8006dc4:	2802      	cmp	r0, #2
 8006dc6:	d015      	beq.n	8006df4 <cos+0x74>
 8006dc8:	b9d8      	cbnz	r0, 8006e02 <cos+0x82>
 8006dca:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006dce:	ed9d 0b00 	vldr	d0, [sp]
 8006dd2:	f000 f955 	bl	8007080 <__kernel_cos>
 8006dd6:	ec51 0b10 	vmov	r0, r1, d0
 8006dda:	e7e7      	b.n	8006dac <cos+0x2c>
 8006ddc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006de0:	ed9d 0b00 	vldr	d0, [sp]
 8006de4:	f000 fa14 	bl	8007210 <__kernel_sin>
 8006de8:	ec53 2b10 	vmov	r2, r3, d0
 8006dec:	4610      	mov	r0, r2
 8006dee:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8006df2:	e7db      	b.n	8006dac <cos+0x2c>
 8006df4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006df8:	ed9d 0b00 	vldr	d0, [sp]
 8006dfc:	f000 f940 	bl	8007080 <__kernel_cos>
 8006e00:	e7f2      	b.n	8006de8 <cos+0x68>
 8006e02:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006e06:	ed9d 0b00 	vldr	d0, [sp]
 8006e0a:	2001      	movs	r0, #1
 8006e0c:	f000 fa00 	bl	8007210 <__kernel_sin>
 8006e10:	e7e1      	b.n	8006dd6 <cos+0x56>
 8006e12:	bf00      	nop
 8006e14:	f3af 8000 	nop.w
	...
 8006e20:	3fe921fb 	.word	0x3fe921fb
 8006e24:	7fefffff 	.word	0x7fefffff

08006e28 <sin>:
 8006e28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006e2a:	ec53 2b10 	vmov	r2, r3, d0
 8006e2e:	4826      	ldr	r0, [pc, #152]	@ (8006ec8 <sin+0xa0>)
 8006e30:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006e34:	4281      	cmp	r1, r0
 8006e36:	d807      	bhi.n	8006e48 <sin+0x20>
 8006e38:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8006ec0 <sin+0x98>
 8006e3c:	2000      	movs	r0, #0
 8006e3e:	b005      	add	sp, #20
 8006e40:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e44:	f000 b9e4 	b.w	8007210 <__kernel_sin>
 8006e48:	4820      	ldr	r0, [pc, #128]	@ (8006ecc <sin+0xa4>)
 8006e4a:	4281      	cmp	r1, r0
 8006e4c:	d908      	bls.n	8006e60 <sin+0x38>
 8006e4e:	4610      	mov	r0, r2
 8006e50:	4619      	mov	r1, r3
 8006e52:	f7f9 f9d1 	bl	80001f8 <__aeabi_dsub>
 8006e56:	ec41 0b10 	vmov	d0, r0, r1
 8006e5a:	b005      	add	sp, #20
 8006e5c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006e60:	4668      	mov	r0, sp
 8006e62:	f000 fb59 	bl	8007518 <__ieee754_rem_pio2>
 8006e66:	f000 0003 	and.w	r0, r0, #3
 8006e6a:	2801      	cmp	r0, #1
 8006e6c:	d00c      	beq.n	8006e88 <sin+0x60>
 8006e6e:	2802      	cmp	r0, #2
 8006e70:	d011      	beq.n	8006e96 <sin+0x6e>
 8006e72:	b9e8      	cbnz	r0, 8006eb0 <sin+0x88>
 8006e74:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006e78:	ed9d 0b00 	vldr	d0, [sp]
 8006e7c:	2001      	movs	r0, #1
 8006e7e:	f000 f9c7 	bl	8007210 <__kernel_sin>
 8006e82:	ec51 0b10 	vmov	r0, r1, d0
 8006e86:	e7e6      	b.n	8006e56 <sin+0x2e>
 8006e88:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006e8c:	ed9d 0b00 	vldr	d0, [sp]
 8006e90:	f000 f8f6 	bl	8007080 <__kernel_cos>
 8006e94:	e7f5      	b.n	8006e82 <sin+0x5a>
 8006e96:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006e9a:	ed9d 0b00 	vldr	d0, [sp]
 8006e9e:	2001      	movs	r0, #1
 8006ea0:	f000 f9b6 	bl	8007210 <__kernel_sin>
 8006ea4:	ec53 2b10 	vmov	r2, r3, d0
 8006ea8:	4610      	mov	r0, r2
 8006eaa:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8006eae:	e7d2      	b.n	8006e56 <sin+0x2e>
 8006eb0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006eb4:	ed9d 0b00 	vldr	d0, [sp]
 8006eb8:	f000 f8e2 	bl	8007080 <__kernel_cos>
 8006ebc:	e7f2      	b.n	8006ea4 <sin+0x7c>
 8006ebe:	bf00      	nop
	...
 8006ec8:	3fe921fb 	.word	0x3fe921fb
 8006ecc:	7fefffff 	.word	0x7fefffff

08006ed0 <__ieee754_sqrt>:
 8006ed0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ed4:	4a66      	ldr	r2, [pc, #408]	@ (8007070 <__ieee754_sqrt+0x1a0>)
 8006ed6:	ec55 4b10 	vmov	r4, r5, d0
 8006eda:	43aa      	bics	r2, r5
 8006edc:	462b      	mov	r3, r5
 8006ede:	4621      	mov	r1, r4
 8006ee0:	d110      	bne.n	8006f04 <__ieee754_sqrt+0x34>
 8006ee2:	4622      	mov	r2, r4
 8006ee4:	4620      	mov	r0, r4
 8006ee6:	4629      	mov	r1, r5
 8006ee8:	f7f9 fb3e 	bl	8000568 <__aeabi_dmul>
 8006eec:	4602      	mov	r2, r0
 8006eee:	460b      	mov	r3, r1
 8006ef0:	4620      	mov	r0, r4
 8006ef2:	4629      	mov	r1, r5
 8006ef4:	f7f9 f982 	bl	80001fc <__adddf3>
 8006ef8:	4604      	mov	r4, r0
 8006efa:	460d      	mov	r5, r1
 8006efc:	ec45 4b10 	vmov	d0, r4, r5
 8006f00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f04:	2d00      	cmp	r5, #0
 8006f06:	dc0e      	bgt.n	8006f26 <__ieee754_sqrt+0x56>
 8006f08:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8006f0c:	4322      	orrs	r2, r4
 8006f0e:	d0f5      	beq.n	8006efc <__ieee754_sqrt+0x2c>
 8006f10:	b19d      	cbz	r5, 8006f3a <__ieee754_sqrt+0x6a>
 8006f12:	4622      	mov	r2, r4
 8006f14:	4620      	mov	r0, r4
 8006f16:	4629      	mov	r1, r5
 8006f18:	f7f9 f96e 	bl	80001f8 <__aeabi_dsub>
 8006f1c:	4602      	mov	r2, r0
 8006f1e:	460b      	mov	r3, r1
 8006f20:	f7f9 fc4c 	bl	80007bc <__aeabi_ddiv>
 8006f24:	e7e8      	b.n	8006ef8 <__ieee754_sqrt+0x28>
 8006f26:	152a      	asrs	r2, r5, #20
 8006f28:	d115      	bne.n	8006f56 <__ieee754_sqrt+0x86>
 8006f2a:	2000      	movs	r0, #0
 8006f2c:	e009      	b.n	8006f42 <__ieee754_sqrt+0x72>
 8006f2e:	0acb      	lsrs	r3, r1, #11
 8006f30:	3a15      	subs	r2, #21
 8006f32:	0549      	lsls	r1, r1, #21
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d0fa      	beq.n	8006f2e <__ieee754_sqrt+0x5e>
 8006f38:	e7f7      	b.n	8006f2a <__ieee754_sqrt+0x5a>
 8006f3a:	462a      	mov	r2, r5
 8006f3c:	e7fa      	b.n	8006f34 <__ieee754_sqrt+0x64>
 8006f3e:	005b      	lsls	r3, r3, #1
 8006f40:	3001      	adds	r0, #1
 8006f42:	02dc      	lsls	r4, r3, #11
 8006f44:	d5fb      	bpl.n	8006f3e <__ieee754_sqrt+0x6e>
 8006f46:	1e44      	subs	r4, r0, #1
 8006f48:	1b12      	subs	r2, r2, r4
 8006f4a:	f1c0 0420 	rsb	r4, r0, #32
 8006f4e:	fa21 f404 	lsr.w	r4, r1, r4
 8006f52:	4323      	orrs	r3, r4
 8006f54:	4081      	lsls	r1, r0
 8006f56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f5a:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8006f5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006f62:	07d2      	lsls	r2, r2, #31
 8006f64:	bf5c      	itt	pl
 8006f66:	005b      	lslpl	r3, r3, #1
 8006f68:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8006f6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006f70:	bf58      	it	pl
 8006f72:	0049      	lslpl	r1, r1, #1
 8006f74:	2600      	movs	r6, #0
 8006f76:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8006f7a:	107f      	asrs	r7, r7, #1
 8006f7c:	0049      	lsls	r1, r1, #1
 8006f7e:	2016      	movs	r0, #22
 8006f80:	4632      	mov	r2, r6
 8006f82:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8006f86:	1915      	adds	r5, r2, r4
 8006f88:	429d      	cmp	r5, r3
 8006f8a:	bfde      	ittt	le
 8006f8c:	192a      	addle	r2, r5, r4
 8006f8e:	1b5b      	suble	r3, r3, r5
 8006f90:	1936      	addle	r6, r6, r4
 8006f92:	0fcd      	lsrs	r5, r1, #31
 8006f94:	3801      	subs	r0, #1
 8006f96:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8006f9a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006f9e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8006fa2:	d1f0      	bne.n	8006f86 <__ieee754_sqrt+0xb6>
 8006fa4:	4605      	mov	r5, r0
 8006fa6:	2420      	movs	r4, #32
 8006fa8:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8006fac:	4293      	cmp	r3, r2
 8006fae:	eb0c 0e00 	add.w	lr, ip, r0
 8006fb2:	dc02      	bgt.n	8006fba <__ieee754_sqrt+0xea>
 8006fb4:	d113      	bne.n	8006fde <__ieee754_sqrt+0x10e>
 8006fb6:	458e      	cmp	lr, r1
 8006fb8:	d811      	bhi.n	8006fde <__ieee754_sqrt+0x10e>
 8006fba:	f1be 0f00 	cmp.w	lr, #0
 8006fbe:	eb0e 000c 	add.w	r0, lr, ip
 8006fc2:	da3f      	bge.n	8007044 <__ieee754_sqrt+0x174>
 8006fc4:	2800      	cmp	r0, #0
 8006fc6:	db3d      	blt.n	8007044 <__ieee754_sqrt+0x174>
 8006fc8:	f102 0801 	add.w	r8, r2, #1
 8006fcc:	1a9b      	subs	r3, r3, r2
 8006fce:	458e      	cmp	lr, r1
 8006fd0:	bf88      	it	hi
 8006fd2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8006fd6:	eba1 010e 	sub.w	r1, r1, lr
 8006fda:	4465      	add	r5, ip
 8006fdc:	4642      	mov	r2, r8
 8006fde:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8006fe2:	3c01      	subs	r4, #1
 8006fe4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8006fe8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006fec:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8006ff0:	d1dc      	bne.n	8006fac <__ieee754_sqrt+0xdc>
 8006ff2:	4319      	orrs	r1, r3
 8006ff4:	d01b      	beq.n	800702e <__ieee754_sqrt+0x15e>
 8006ff6:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 8007074 <__ieee754_sqrt+0x1a4>
 8006ffa:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 8007078 <__ieee754_sqrt+0x1a8>
 8006ffe:	e9da 0100 	ldrd	r0, r1, [sl]
 8007002:	e9db 2300 	ldrd	r2, r3, [fp]
 8007006:	f7f9 f8f7 	bl	80001f8 <__aeabi_dsub>
 800700a:	e9da 8900 	ldrd	r8, r9, [sl]
 800700e:	4602      	mov	r2, r0
 8007010:	460b      	mov	r3, r1
 8007012:	4640      	mov	r0, r8
 8007014:	4649      	mov	r1, r9
 8007016:	f7f9 fd23 	bl	8000a60 <__aeabi_dcmple>
 800701a:	b140      	cbz	r0, 800702e <__ieee754_sqrt+0x15e>
 800701c:	f1b5 3fff 	cmp.w	r5, #4294967295
 8007020:	e9da 0100 	ldrd	r0, r1, [sl]
 8007024:	e9db 2300 	ldrd	r2, r3, [fp]
 8007028:	d10e      	bne.n	8007048 <__ieee754_sqrt+0x178>
 800702a:	3601      	adds	r6, #1
 800702c:	4625      	mov	r5, r4
 800702e:	1073      	asrs	r3, r6, #1
 8007030:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8007034:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8007038:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 800703c:	086b      	lsrs	r3, r5, #1
 800703e:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 8007042:	e759      	b.n	8006ef8 <__ieee754_sqrt+0x28>
 8007044:	4690      	mov	r8, r2
 8007046:	e7c1      	b.n	8006fcc <__ieee754_sqrt+0xfc>
 8007048:	f7f9 f8d8 	bl	80001fc <__adddf3>
 800704c:	e9da 8900 	ldrd	r8, r9, [sl]
 8007050:	4602      	mov	r2, r0
 8007052:	460b      	mov	r3, r1
 8007054:	4640      	mov	r0, r8
 8007056:	4649      	mov	r1, r9
 8007058:	f7f9 fcf8 	bl	8000a4c <__aeabi_dcmplt>
 800705c:	b120      	cbz	r0, 8007068 <__ieee754_sqrt+0x198>
 800705e:	1cab      	adds	r3, r5, #2
 8007060:	bf08      	it	eq
 8007062:	3601      	addeq	r6, #1
 8007064:	3502      	adds	r5, #2
 8007066:	e7e2      	b.n	800702e <__ieee754_sqrt+0x15e>
 8007068:	1c6b      	adds	r3, r5, #1
 800706a:	f023 0501 	bic.w	r5, r3, #1
 800706e:	e7de      	b.n	800702e <__ieee754_sqrt+0x15e>
 8007070:	7ff00000 	.word	0x7ff00000
 8007074:	08008778 	.word	0x08008778
 8007078:	08008770 	.word	0x08008770
 800707c:	00000000 	.word	0x00000000

08007080 <__kernel_cos>:
 8007080:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007084:	ec57 6b10 	vmov	r6, r7, d0
 8007088:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800708c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8007090:	ed8d 1b00 	vstr	d1, [sp]
 8007094:	d206      	bcs.n	80070a4 <__kernel_cos+0x24>
 8007096:	4630      	mov	r0, r6
 8007098:	4639      	mov	r1, r7
 800709a:	f7f9 fd15 	bl	8000ac8 <__aeabi_d2iz>
 800709e:	2800      	cmp	r0, #0
 80070a0:	f000 8088 	beq.w	80071b4 <__kernel_cos+0x134>
 80070a4:	4632      	mov	r2, r6
 80070a6:	463b      	mov	r3, r7
 80070a8:	4630      	mov	r0, r6
 80070aa:	4639      	mov	r1, r7
 80070ac:	f7f9 fa5c 	bl	8000568 <__aeabi_dmul>
 80070b0:	4b51      	ldr	r3, [pc, #324]	@ (80071f8 <__kernel_cos+0x178>)
 80070b2:	2200      	movs	r2, #0
 80070b4:	4604      	mov	r4, r0
 80070b6:	460d      	mov	r5, r1
 80070b8:	f7f9 fa56 	bl	8000568 <__aeabi_dmul>
 80070bc:	a340      	add	r3, pc, #256	@ (adr r3, 80071c0 <__kernel_cos+0x140>)
 80070be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070c2:	4682      	mov	sl, r0
 80070c4:	468b      	mov	fp, r1
 80070c6:	4620      	mov	r0, r4
 80070c8:	4629      	mov	r1, r5
 80070ca:	f7f9 fa4d 	bl	8000568 <__aeabi_dmul>
 80070ce:	a33e      	add	r3, pc, #248	@ (adr r3, 80071c8 <__kernel_cos+0x148>)
 80070d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070d4:	f7f9 f892 	bl	80001fc <__adddf3>
 80070d8:	4622      	mov	r2, r4
 80070da:	462b      	mov	r3, r5
 80070dc:	f7f9 fa44 	bl	8000568 <__aeabi_dmul>
 80070e0:	a33b      	add	r3, pc, #236	@ (adr r3, 80071d0 <__kernel_cos+0x150>)
 80070e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e6:	f7f9 f887 	bl	80001f8 <__aeabi_dsub>
 80070ea:	4622      	mov	r2, r4
 80070ec:	462b      	mov	r3, r5
 80070ee:	f7f9 fa3b 	bl	8000568 <__aeabi_dmul>
 80070f2:	a339      	add	r3, pc, #228	@ (adr r3, 80071d8 <__kernel_cos+0x158>)
 80070f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f8:	f7f9 f880 	bl	80001fc <__adddf3>
 80070fc:	4622      	mov	r2, r4
 80070fe:	462b      	mov	r3, r5
 8007100:	f7f9 fa32 	bl	8000568 <__aeabi_dmul>
 8007104:	a336      	add	r3, pc, #216	@ (adr r3, 80071e0 <__kernel_cos+0x160>)
 8007106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800710a:	f7f9 f875 	bl	80001f8 <__aeabi_dsub>
 800710e:	4622      	mov	r2, r4
 8007110:	462b      	mov	r3, r5
 8007112:	f7f9 fa29 	bl	8000568 <__aeabi_dmul>
 8007116:	a334      	add	r3, pc, #208	@ (adr r3, 80071e8 <__kernel_cos+0x168>)
 8007118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800711c:	f7f9 f86e 	bl	80001fc <__adddf3>
 8007120:	4622      	mov	r2, r4
 8007122:	462b      	mov	r3, r5
 8007124:	f7f9 fa20 	bl	8000568 <__aeabi_dmul>
 8007128:	4622      	mov	r2, r4
 800712a:	462b      	mov	r3, r5
 800712c:	f7f9 fa1c 	bl	8000568 <__aeabi_dmul>
 8007130:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007134:	4604      	mov	r4, r0
 8007136:	460d      	mov	r5, r1
 8007138:	4630      	mov	r0, r6
 800713a:	4639      	mov	r1, r7
 800713c:	f7f9 fa14 	bl	8000568 <__aeabi_dmul>
 8007140:	460b      	mov	r3, r1
 8007142:	4602      	mov	r2, r0
 8007144:	4629      	mov	r1, r5
 8007146:	4620      	mov	r0, r4
 8007148:	f7f9 f856 	bl	80001f8 <__aeabi_dsub>
 800714c:	4b2b      	ldr	r3, [pc, #172]	@ (80071fc <__kernel_cos+0x17c>)
 800714e:	4598      	cmp	r8, r3
 8007150:	4606      	mov	r6, r0
 8007152:	460f      	mov	r7, r1
 8007154:	d810      	bhi.n	8007178 <__kernel_cos+0xf8>
 8007156:	4602      	mov	r2, r0
 8007158:	460b      	mov	r3, r1
 800715a:	4650      	mov	r0, sl
 800715c:	4659      	mov	r1, fp
 800715e:	f7f9 f84b 	bl	80001f8 <__aeabi_dsub>
 8007162:	460b      	mov	r3, r1
 8007164:	4926      	ldr	r1, [pc, #152]	@ (8007200 <__kernel_cos+0x180>)
 8007166:	4602      	mov	r2, r0
 8007168:	2000      	movs	r0, #0
 800716a:	f7f9 f845 	bl	80001f8 <__aeabi_dsub>
 800716e:	ec41 0b10 	vmov	d0, r0, r1
 8007172:	b003      	add	sp, #12
 8007174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007178:	4b22      	ldr	r3, [pc, #136]	@ (8007204 <__kernel_cos+0x184>)
 800717a:	4921      	ldr	r1, [pc, #132]	@ (8007200 <__kernel_cos+0x180>)
 800717c:	4598      	cmp	r8, r3
 800717e:	bf8c      	ite	hi
 8007180:	4d21      	ldrhi	r5, [pc, #132]	@ (8007208 <__kernel_cos+0x188>)
 8007182:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8007186:	2400      	movs	r4, #0
 8007188:	4622      	mov	r2, r4
 800718a:	462b      	mov	r3, r5
 800718c:	2000      	movs	r0, #0
 800718e:	f7f9 f833 	bl	80001f8 <__aeabi_dsub>
 8007192:	4622      	mov	r2, r4
 8007194:	4680      	mov	r8, r0
 8007196:	4689      	mov	r9, r1
 8007198:	462b      	mov	r3, r5
 800719a:	4650      	mov	r0, sl
 800719c:	4659      	mov	r1, fp
 800719e:	f7f9 f82b 	bl	80001f8 <__aeabi_dsub>
 80071a2:	4632      	mov	r2, r6
 80071a4:	463b      	mov	r3, r7
 80071a6:	f7f9 f827 	bl	80001f8 <__aeabi_dsub>
 80071aa:	4602      	mov	r2, r0
 80071ac:	460b      	mov	r3, r1
 80071ae:	4640      	mov	r0, r8
 80071b0:	4649      	mov	r1, r9
 80071b2:	e7da      	b.n	800716a <__kernel_cos+0xea>
 80071b4:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 80071f0 <__kernel_cos+0x170>
 80071b8:	e7db      	b.n	8007172 <__kernel_cos+0xf2>
 80071ba:	bf00      	nop
 80071bc:	f3af 8000 	nop.w
 80071c0:	be8838d4 	.word	0xbe8838d4
 80071c4:	bda8fae9 	.word	0xbda8fae9
 80071c8:	bdb4b1c4 	.word	0xbdb4b1c4
 80071cc:	3e21ee9e 	.word	0x3e21ee9e
 80071d0:	809c52ad 	.word	0x809c52ad
 80071d4:	3e927e4f 	.word	0x3e927e4f
 80071d8:	19cb1590 	.word	0x19cb1590
 80071dc:	3efa01a0 	.word	0x3efa01a0
 80071e0:	16c15177 	.word	0x16c15177
 80071e4:	3f56c16c 	.word	0x3f56c16c
 80071e8:	5555554c 	.word	0x5555554c
 80071ec:	3fa55555 	.word	0x3fa55555
 80071f0:	00000000 	.word	0x00000000
 80071f4:	3ff00000 	.word	0x3ff00000
 80071f8:	3fe00000 	.word	0x3fe00000
 80071fc:	3fd33332 	.word	0x3fd33332
 8007200:	3ff00000 	.word	0x3ff00000
 8007204:	3fe90000 	.word	0x3fe90000
 8007208:	3fd20000 	.word	0x3fd20000
 800720c:	00000000 	.word	0x00000000

08007210 <__kernel_sin>:
 8007210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007214:	ec55 4b10 	vmov	r4, r5, d0
 8007218:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800721c:	b085      	sub	sp, #20
 800721e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8007222:	ed8d 1b02 	vstr	d1, [sp, #8]
 8007226:	4680      	mov	r8, r0
 8007228:	d205      	bcs.n	8007236 <__kernel_sin+0x26>
 800722a:	4620      	mov	r0, r4
 800722c:	4629      	mov	r1, r5
 800722e:	f7f9 fc4b 	bl	8000ac8 <__aeabi_d2iz>
 8007232:	2800      	cmp	r0, #0
 8007234:	d052      	beq.n	80072dc <__kernel_sin+0xcc>
 8007236:	4622      	mov	r2, r4
 8007238:	462b      	mov	r3, r5
 800723a:	4620      	mov	r0, r4
 800723c:	4629      	mov	r1, r5
 800723e:	f7f9 f993 	bl	8000568 <__aeabi_dmul>
 8007242:	4682      	mov	sl, r0
 8007244:	468b      	mov	fp, r1
 8007246:	4602      	mov	r2, r0
 8007248:	460b      	mov	r3, r1
 800724a:	4620      	mov	r0, r4
 800724c:	4629      	mov	r1, r5
 800724e:	f7f9 f98b 	bl	8000568 <__aeabi_dmul>
 8007252:	a342      	add	r3, pc, #264	@ (adr r3, 800735c <__kernel_sin+0x14c>)
 8007254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007258:	e9cd 0100 	strd	r0, r1, [sp]
 800725c:	4650      	mov	r0, sl
 800725e:	4659      	mov	r1, fp
 8007260:	f7f9 f982 	bl	8000568 <__aeabi_dmul>
 8007264:	a33f      	add	r3, pc, #252	@ (adr r3, 8007364 <__kernel_sin+0x154>)
 8007266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800726a:	f7f8 ffc5 	bl	80001f8 <__aeabi_dsub>
 800726e:	4652      	mov	r2, sl
 8007270:	465b      	mov	r3, fp
 8007272:	f7f9 f979 	bl	8000568 <__aeabi_dmul>
 8007276:	a33d      	add	r3, pc, #244	@ (adr r3, 800736c <__kernel_sin+0x15c>)
 8007278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800727c:	f7f8 ffbe 	bl	80001fc <__adddf3>
 8007280:	4652      	mov	r2, sl
 8007282:	465b      	mov	r3, fp
 8007284:	f7f9 f970 	bl	8000568 <__aeabi_dmul>
 8007288:	a33a      	add	r3, pc, #232	@ (adr r3, 8007374 <__kernel_sin+0x164>)
 800728a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800728e:	f7f8 ffb3 	bl	80001f8 <__aeabi_dsub>
 8007292:	4652      	mov	r2, sl
 8007294:	465b      	mov	r3, fp
 8007296:	f7f9 f967 	bl	8000568 <__aeabi_dmul>
 800729a:	a338      	add	r3, pc, #224	@ (adr r3, 800737c <__kernel_sin+0x16c>)
 800729c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072a0:	f7f8 ffac 	bl	80001fc <__adddf3>
 80072a4:	4606      	mov	r6, r0
 80072a6:	460f      	mov	r7, r1
 80072a8:	f1b8 0f00 	cmp.w	r8, #0
 80072ac:	d11b      	bne.n	80072e6 <__kernel_sin+0xd6>
 80072ae:	4602      	mov	r2, r0
 80072b0:	460b      	mov	r3, r1
 80072b2:	4650      	mov	r0, sl
 80072b4:	4659      	mov	r1, fp
 80072b6:	f7f9 f957 	bl	8000568 <__aeabi_dmul>
 80072ba:	a325      	add	r3, pc, #148	@ (adr r3, 8007350 <__kernel_sin+0x140>)
 80072bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072c0:	f7f8 ff9a 	bl	80001f8 <__aeabi_dsub>
 80072c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80072c8:	f7f9 f94e 	bl	8000568 <__aeabi_dmul>
 80072cc:	4602      	mov	r2, r0
 80072ce:	460b      	mov	r3, r1
 80072d0:	4620      	mov	r0, r4
 80072d2:	4629      	mov	r1, r5
 80072d4:	f7f8 ff92 	bl	80001fc <__adddf3>
 80072d8:	4604      	mov	r4, r0
 80072da:	460d      	mov	r5, r1
 80072dc:	ec45 4b10 	vmov	d0, r4, r5
 80072e0:	b005      	add	sp, #20
 80072e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072ea:	4b1b      	ldr	r3, [pc, #108]	@ (8007358 <__kernel_sin+0x148>)
 80072ec:	2200      	movs	r2, #0
 80072ee:	f7f9 f93b 	bl	8000568 <__aeabi_dmul>
 80072f2:	4632      	mov	r2, r6
 80072f4:	4680      	mov	r8, r0
 80072f6:	4689      	mov	r9, r1
 80072f8:	463b      	mov	r3, r7
 80072fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80072fe:	f7f9 f933 	bl	8000568 <__aeabi_dmul>
 8007302:	4602      	mov	r2, r0
 8007304:	460b      	mov	r3, r1
 8007306:	4640      	mov	r0, r8
 8007308:	4649      	mov	r1, r9
 800730a:	f7f8 ff75 	bl	80001f8 <__aeabi_dsub>
 800730e:	4652      	mov	r2, sl
 8007310:	465b      	mov	r3, fp
 8007312:	f7f9 f929 	bl	8000568 <__aeabi_dmul>
 8007316:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800731a:	f7f8 ff6d 	bl	80001f8 <__aeabi_dsub>
 800731e:	a30c      	add	r3, pc, #48	@ (adr r3, 8007350 <__kernel_sin+0x140>)
 8007320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007324:	4606      	mov	r6, r0
 8007326:	460f      	mov	r7, r1
 8007328:	e9dd 0100 	ldrd	r0, r1, [sp]
 800732c:	f7f9 f91c 	bl	8000568 <__aeabi_dmul>
 8007330:	4602      	mov	r2, r0
 8007332:	460b      	mov	r3, r1
 8007334:	4630      	mov	r0, r6
 8007336:	4639      	mov	r1, r7
 8007338:	f7f8 ff60 	bl	80001fc <__adddf3>
 800733c:	4602      	mov	r2, r0
 800733e:	460b      	mov	r3, r1
 8007340:	4620      	mov	r0, r4
 8007342:	4629      	mov	r1, r5
 8007344:	f7f8 ff58 	bl	80001f8 <__aeabi_dsub>
 8007348:	e7c6      	b.n	80072d8 <__kernel_sin+0xc8>
 800734a:	bf00      	nop
 800734c:	f3af 8000 	nop.w
 8007350:	55555549 	.word	0x55555549
 8007354:	3fc55555 	.word	0x3fc55555
 8007358:	3fe00000 	.word	0x3fe00000
 800735c:	5acfd57c 	.word	0x5acfd57c
 8007360:	3de5d93a 	.word	0x3de5d93a
 8007364:	8a2b9ceb 	.word	0x8a2b9ceb
 8007368:	3e5ae5e6 	.word	0x3e5ae5e6
 800736c:	57b1fe7d 	.word	0x57b1fe7d
 8007370:	3ec71de3 	.word	0x3ec71de3
 8007374:	19c161d5 	.word	0x19c161d5
 8007378:	3f2a01a0 	.word	0x3f2a01a0
 800737c:	1110f8a6 	.word	0x1110f8a6
 8007380:	3f811111 	.word	0x3f811111
 8007384:	00000000 	.word	0x00000000

08007388 <__ieee754_atan2>:
 8007388:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800738c:	ec57 6b11 	vmov	r6, r7, d1
 8007390:	4273      	negs	r3, r6
 8007392:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8007510 <__ieee754_atan2+0x188>
 8007396:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800739a:	4333      	orrs	r3, r6
 800739c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80073a0:	4543      	cmp	r3, r8
 80073a2:	ec51 0b10 	vmov	r0, r1, d0
 80073a6:	4635      	mov	r5, r6
 80073a8:	d809      	bhi.n	80073be <__ieee754_atan2+0x36>
 80073aa:	4244      	negs	r4, r0
 80073ac:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80073b0:	4304      	orrs	r4, r0
 80073b2:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80073b6:	4544      	cmp	r4, r8
 80073b8:	468e      	mov	lr, r1
 80073ba:	4681      	mov	r9, r0
 80073bc:	d907      	bls.n	80073ce <__ieee754_atan2+0x46>
 80073be:	4632      	mov	r2, r6
 80073c0:	463b      	mov	r3, r7
 80073c2:	f7f8 ff1b 	bl	80001fc <__adddf3>
 80073c6:	ec41 0b10 	vmov	d0, r0, r1
 80073ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073ce:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 80073d2:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 80073d6:	4334      	orrs	r4, r6
 80073d8:	d103      	bne.n	80073e2 <__ieee754_atan2+0x5a>
 80073da:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073de:	f000 ba97 	b.w	8007910 <atan>
 80073e2:	17bc      	asrs	r4, r7, #30
 80073e4:	f004 0402 	and.w	r4, r4, #2
 80073e8:	ea53 0909 	orrs.w	r9, r3, r9
 80073ec:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80073f0:	d107      	bne.n	8007402 <__ieee754_atan2+0x7a>
 80073f2:	2c02      	cmp	r4, #2
 80073f4:	d05f      	beq.n	80074b6 <__ieee754_atan2+0x12e>
 80073f6:	2c03      	cmp	r4, #3
 80073f8:	d1e5      	bne.n	80073c6 <__ieee754_atan2+0x3e>
 80073fa:	a143      	add	r1, pc, #268	@ (adr r1, 8007508 <__ieee754_atan2+0x180>)
 80073fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007400:	e7e1      	b.n	80073c6 <__ieee754_atan2+0x3e>
 8007402:	4315      	orrs	r5, r2
 8007404:	d106      	bne.n	8007414 <__ieee754_atan2+0x8c>
 8007406:	f1be 0f00 	cmp.w	lr, #0
 800740a:	db5f      	blt.n	80074cc <__ieee754_atan2+0x144>
 800740c:	a136      	add	r1, pc, #216	@ (adr r1, 80074e8 <__ieee754_atan2+0x160>)
 800740e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007412:	e7d8      	b.n	80073c6 <__ieee754_atan2+0x3e>
 8007414:	4542      	cmp	r2, r8
 8007416:	d10f      	bne.n	8007438 <__ieee754_atan2+0xb0>
 8007418:	4293      	cmp	r3, r2
 800741a:	f104 34ff 	add.w	r4, r4, #4294967295
 800741e:	d107      	bne.n	8007430 <__ieee754_atan2+0xa8>
 8007420:	2c02      	cmp	r4, #2
 8007422:	d84c      	bhi.n	80074be <__ieee754_atan2+0x136>
 8007424:	4b36      	ldr	r3, [pc, #216]	@ (8007500 <__ieee754_atan2+0x178>)
 8007426:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800742a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800742e:	e7ca      	b.n	80073c6 <__ieee754_atan2+0x3e>
 8007430:	2c02      	cmp	r4, #2
 8007432:	d848      	bhi.n	80074c6 <__ieee754_atan2+0x13e>
 8007434:	4b33      	ldr	r3, [pc, #204]	@ (8007504 <__ieee754_atan2+0x17c>)
 8007436:	e7f6      	b.n	8007426 <__ieee754_atan2+0x9e>
 8007438:	4543      	cmp	r3, r8
 800743a:	d0e4      	beq.n	8007406 <__ieee754_atan2+0x7e>
 800743c:	1a9b      	subs	r3, r3, r2
 800743e:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8007442:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007446:	da1e      	bge.n	8007486 <__ieee754_atan2+0xfe>
 8007448:	2f00      	cmp	r7, #0
 800744a:	da01      	bge.n	8007450 <__ieee754_atan2+0xc8>
 800744c:	323c      	adds	r2, #60	@ 0x3c
 800744e:	db1e      	blt.n	800748e <__ieee754_atan2+0x106>
 8007450:	4632      	mov	r2, r6
 8007452:	463b      	mov	r3, r7
 8007454:	f7f9 f9b2 	bl	80007bc <__aeabi_ddiv>
 8007458:	ec41 0b10 	vmov	d0, r0, r1
 800745c:	f000 fbf0 	bl	8007c40 <fabs>
 8007460:	f000 fa56 	bl	8007910 <atan>
 8007464:	ec51 0b10 	vmov	r0, r1, d0
 8007468:	2c01      	cmp	r4, #1
 800746a:	d013      	beq.n	8007494 <__ieee754_atan2+0x10c>
 800746c:	2c02      	cmp	r4, #2
 800746e:	d015      	beq.n	800749c <__ieee754_atan2+0x114>
 8007470:	2c00      	cmp	r4, #0
 8007472:	d0a8      	beq.n	80073c6 <__ieee754_atan2+0x3e>
 8007474:	a318      	add	r3, pc, #96	@ (adr r3, 80074d8 <__ieee754_atan2+0x150>)
 8007476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800747a:	f7f8 febd 	bl	80001f8 <__aeabi_dsub>
 800747e:	a318      	add	r3, pc, #96	@ (adr r3, 80074e0 <__ieee754_atan2+0x158>)
 8007480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007484:	e014      	b.n	80074b0 <__ieee754_atan2+0x128>
 8007486:	a118      	add	r1, pc, #96	@ (adr r1, 80074e8 <__ieee754_atan2+0x160>)
 8007488:	e9d1 0100 	ldrd	r0, r1, [r1]
 800748c:	e7ec      	b.n	8007468 <__ieee754_atan2+0xe0>
 800748e:	2000      	movs	r0, #0
 8007490:	2100      	movs	r1, #0
 8007492:	e7e9      	b.n	8007468 <__ieee754_atan2+0xe0>
 8007494:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007498:	4619      	mov	r1, r3
 800749a:	e794      	b.n	80073c6 <__ieee754_atan2+0x3e>
 800749c:	a30e      	add	r3, pc, #56	@ (adr r3, 80074d8 <__ieee754_atan2+0x150>)
 800749e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a2:	f7f8 fea9 	bl	80001f8 <__aeabi_dsub>
 80074a6:	4602      	mov	r2, r0
 80074a8:	460b      	mov	r3, r1
 80074aa:	a10d      	add	r1, pc, #52	@ (adr r1, 80074e0 <__ieee754_atan2+0x158>)
 80074ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074b0:	f7f8 fea2 	bl	80001f8 <__aeabi_dsub>
 80074b4:	e787      	b.n	80073c6 <__ieee754_atan2+0x3e>
 80074b6:	a10a      	add	r1, pc, #40	@ (adr r1, 80074e0 <__ieee754_atan2+0x158>)
 80074b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074bc:	e783      	b.n	80073c6 <__ieee754_atan2+0x3e>
 80074be:	a10c      	add	r1, pc, #48	@ (adr r1, 80074f0 <__ieee754_atan2+0x168>)
 80074c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074c4:	e77f      	b.n	80073c6 <__ieee754_atan2+0x3e>
 80074c6:	2000      	movs	r0, #0
 80074c8:	2100      	movs	r1, #0
 80074ca:	e77c      	b.n	80073c6 <__ieee754_atan2+0x3e>
 80074cc:	a10a      	add	r1, pc, #40	@ (adr r1, 80074f8 <__ieee754_atan2+0x170>)
 80074ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074d2:	e778      	b.n	80073c6 <__ieee754_atan2+0x3e>
 80074d4:	f3af 8000 	nop.w
 80074d8:	33145c07 	.word	0x33145c07
 80074dc:	3ca1a626 	.word	0x3ca1a626
 80074e0:	54442d18 	.word	0x54442d18
 80074e4:	400921fb 	.word	0x400921fb
 80074e8:	54442d18 	.word	0x54442d18
 80074ec:	3ff921fb 	.word	0x3ff921fb
 80074f0:	54442d18 	.word	0x54442d18
 80074f4:	3fe921fb 	.word	0x3fe921fb
 80074f8:	54442d18 	.word	0x54442d18
 80074fc:	bff921fb 	.word	0xbff921fb
 8007500:	08008798 	.word	0x08008798
 8007504:	08008780 	.word	0x08008780
 8007508:	54442d18 	.word	0x54442d18
 800750c:	c00921fb 	.word	0xc00921fb
 8007510:	7ff00000 	.word	0x7ff00000
 8007514:	00000000 	.word	0x00000000

08007518 <__ieee754_rem_pio2>:
 8007518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800751c:	ec57 6b10 	vmov	r6, r7, d0
 8007520:	4bc5      	ldr	r3, [pc, #788]	@ (8007838 <__ieee754_rem_pio2+0x320>)
 8007522:	b08d      	sub	sp, #52	@ 0x34
 8007524:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8007528:	4598      	cmp	r8, r3
 800752a:	4604      	mov	r4, r0
 800752c:	9704      	str	r7, [sp, #16]
 800752e:	d807      	bhi.n	8007540 <__ieee754_rem_pio2+0x28>
 8007530:	2200      	movs	r2, #0
 8007532:	2300      	movs	r3, #0
 8007534:	ed80 0b00 	vstr	d0, [r0]
 8007538:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800753c:	2500      	movs	r5, #0
 800753e:	e028      	b.n	8007592 <__ieee754_rem_pio2+0x7a>
 8007540:	4bbe      	ldr	r3, [pc, #760]	@ (800783c <__ieee754_rem_pio2+0x324>)
 8007542:	4598      	cmp	r8, r3
 8007544:	d878      	bhi.n	8007638 <__ieee754_rem_pio2+0x120>
 8007546:	9b04      	ldr	r3, [sp, #16]
 8007548:	4dbd      	ldr	r5, [pc, #756]	@ (8007840 <__ieee754_rem_pio2+0x328>)
 800754a:	2b00      	cmp	r3, #0
 800754c:	4630      	mov	r0, r6
 800754e:	a3ac      	add	r3, pc, #688	@ (adr r3, 8007800 <__ieee754_rem_pio2+0x2e8>)
 8007550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007554:	4639      	mov	r1, r7
 8007556:	dd38      	ble.n	80075ca <__ieee754_rem_pio2+0xb2>
 8007558:	f7f8 fe4e 	bl	80001f8 <__aeabi_dsub>
 800755c:	45a8      	cmp	r8, r5
 800755e:	4606      	mov	r6, r0
 8007560:	460f      	mov	r7, r1
 8007562:	d01a      	beq.n	800759a <__ieee754_rem_pio2+0x82>
 8007564:	a3a8      	add	r3, pc, #672	@ (adr r3, 8007808 <__ieee754_rem_pio2+0x2f0>)
 8007566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800756a:	f7f8 fe45 	bl	80001f8 <__aeabi_dsub>
 800756e:	4602      	mov	r2, r0
 8007570:	460b      	mov	r3, r1
 8007572:	4680      	mov	r8, r0
 8007574:	4689      	mov	r9, r1
 8007576:	4630      	mov	r0, r6
 8007578:	4639      	mov	r1, r7
 800757a:	f7f8 fe3d 	bl	80001f8 <__aeabi_dsub>
 800757e:	a3a2      	add	r3, pc, #648	@ (adr r3, 8007808 <__ieee754_rem_pio2+0x2f0>)
 8007580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007584:	f7f8 fe38 	bl	80001f8 <__aeabi_dsub>
 8007588:	e9c4 8900 	strd	r8, r9, [r4]
 800758c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007590:	2501      	movs	r5, #1
 8007592:	4628      	mov	r0, r5
 8007594:	b00d      	add	sp, #52	@ 0x34
 8007596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800759a:	a39d      	add	r3, pc, #628	@ (adr r3, 8007810 <__ieee754_rem_pio2+0x2f8>)
 800759c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a0:	f7f8 fe2a 	bl	80001f8 <__aeabi_dsub>
 80075a4:	a39c      	add	r3, pc, #624	@ (adr r3, 8007818 <__ieee754_rem_pio2+0x300>)
 80075a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075aa:	4606      	mov	r6, r0
 80075ac:	460f      	mov	r7, r1
 80075ae:	f7f8 fe23 	bl	80001f8 <__aeabi_dsub>
 80075b2:	4602      	mov	r2, r0
 80075b4:	460b      	mov	r3, r1
 80075b6:	4680      	mov	r8, r0
 80075b8:	4689      	mov	r9, r1
 80075ba:	4630      	mov	r0, r6
 80075bc:	4639      	mov	r1, r7
 80075be:	f7f8 fe1b 	bl	80001f8 <__aeabi_dsub>
 80075c2:	a395      	add	r3, pc, #596	@ (adr r3, 8007818 <__ieee754_rem_pio2+0x300>)
 80075c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075c8:	e7dc      	b.n	8007584 <__ieee754_rem_pio2+0x6c>
 80075ca:	f7f8 fe17 	bl	80001fc <__adddf3>
 80075ce:	45a8      	cmp	r8, r5
 80075d0:	4606      	mov	r6, r0
 80075d2:	460f      	mov	r7, r1
 80075d4:	d018      	beq.n	8007608 <__ieee754_rem_pio2+0xf0>
 80075d6:	a38c      	add	r3, pc, #560	@ (adr r3, 8007808 <__ieee754_rem_pio2+0x2f0>)
 80075d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075dc:	f7f8 fe0e 	bl	80001fc <__adddf3>
 80075e0:	4602      	mov	r2, r0
 80075e2:	460b      	mov	r3, r1
 80075e4:	4680      	mov	r8, r0
 80075e6:	4689      	mov	r9, r1
 80075e8:	4630      	mov	r0, r6
 80075ea:	4639      	mov	r1, r7
 80075ec:	f7f8 fe04 	bl	80001f8 <__aeabi_dsub>
 80075f0:	a385      	add	r3, pc, #532	@ (adr r3, 8007808 <__ieee754_rem_pio2+0x2f0>)
 80075f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075f6:	f7f8 fe01 	bl	80001fc <__adddf3>
 80075fa:	f04f 35ff 	mov.w	r5, #4294967295
 80075fe:	e9c4 8900 	strd	r8, r9, [r4]
 8007602:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007606:	e7c4      	b.n	8007592 <__ieee754_rem_pio2+0x7a>
 8007608:	a381      	add	r3, pc, #516	@ (adr r3, 8007810 <__ieee754_rem_pio2+0x2f8>)
 800760a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800760e:	f7f8 fdf5 	bl	80001fc <__adddf3>
 8007612:	a381      	add	r3, pc, #516	@ (adr r3, 8007818 <__ieee754_rem_pio2+0x300>)
 8007614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007618:	4606      	mov	r6, r0
 800761a:	460f      	mov	r7, r1
 800761c:	f7f8 fdee 	bl	80001fc <__adddf3>
 8007620:	4602      	mov	r2, r0
 8007622:	460b      	mov	r3, r1
 8007624:	4680      	mov	r8, r0
 8007626:	4689      	mov	r9, r1
 8007628:	4630      	mov	r0, r6
 800762a:	4639      	mov	r1, r7
 800762c:	f7f8 fde4 	bl	80001f8 <__aeabi_dsub>
 8007630:	a379      	add	r3, pc, #484	@ (adr r3, 8007818 <__ieee754_rem_pio2+0x300>)
 8007632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007636:	e7de      	b.n	80075f6 <__ieee754_rem_pio2+0xde>
 8007638:	4b82      	ldr	r3, [pc, #520]	@ (8007844 <__ieee754_rem_pio2+0x32c>)
 800763a:	4598      	cmp	r8, r3
 800763c:	f200 80d1 	bhi.w	80077e2 <__ieee754_rem_pio2+0x2ca>
 8007640:	f000 fafe 	bl	8007c40 <fabs>
 8007644:	ec57 6b10 	vmov	r6, r7, d0
 8007648:	a375      	add	r3, pc, #468	@ (adr r3, 8007820 <__ieee754_rem_pio2+0x308>)
 800764a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800764e:	4630      	mov	r0, r6
 8007650:	4639      	mov	r1, r7
 8007652:	f7f8 ff89 	bl	8000568 <__aeabi_dmul>
 8007656:	4b7c      	ldr	r3, [pc, #496]	@ (8007848 <__ieee754_rem_pio2+0x330>)
 8007658:	2200      	movs	r2, #0
 800765a:	f7f8 fdcf 	bl	80001fc <__adddf3>
 800765e:	f7f9 fa33 	bl	8000ac8 <__aeabi_d2iz>
 8007662:	4605      	mov	r5, r0
 8007664:	f7f8 ff16 	bl	8000494 <__aeabi_i2d>
 8007668:	4602      	mov	r2, r0
 800766a:	460b      	mov	r3, r1
 800766c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007670:	a363      	add	r3, pc, #396	@ (adr r3, 8007800 <__ieee754_rem_pio2+0x2e8>)
 8007672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007676:	f7f8 ff77 	bl	8000568 <__aeabi_dmul>
 800767a:	4602      	mov	r2, r0
 800767c:	460b      	mov	r3, r1
 800767e:	4630      	mov	r0, r6
 8007680:	4639      	mov	r1, r7
 8007682:	f7f8 fdb9 	bl	80001f8 <__aeabi_dsub>
 8007686:	a360      	add	r3, pc, #384	@ (adr r3, 8007808 <__ieee754_rem_pio2+0x2f0>)
 8007688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800768c:	4682      	mov	sl, r0
 800768e:	468b      	mov	fp, r1
 8007690:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007694:	f7f8 ff68 	bl	8000568 <__aeabi_dmul>
 8007698:	2d1f      	cmp	r5, #31
 800769a:	4606      	mov	r6, r0
 800769c:	460f      	mov	r7, r1
 800769e:	dc0c      	bgt.n	80076ba <__ieee754_rem_pio2+0x1a2>
 80076a0:	4b6a      	ldr	r3, [pc, #424]	@ (800784c <__ieee754_rem_pio2+0x334>)
 80076a2:	1e6a      	subs	r2, r5, #1
 80076a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076a8:	4543      	cmp	r3, r8
 80076aa:	d006      	beq.n	80076ba <__ieee754_rem_pio2+0x1a2>
 80076ac:	4632      	mov	r2, r6
 80076ae:	463b      	mov	r3, r7
 80076b0:	4650      	mov	r0, sl
 80076b2:	4659      	mov	r1, fp
 80076b4:	f7f8 fda0 	bl	80001f8 <__aeabi_dsub>
 80076b8:	e00e      	b.n	80076d8 <__ieee754_rem_pio2+0x1c0>
 80076ba:	463b      	mov	r3, r7
 80076bc:	4632      	mov	r2, r6
 80076be:	4650      	mov	r0, sl
 80076c0:	4659      	mov	r1, fp
 80076c2:	f7f8 fd99 	bl	80001f8 <__aeabi_dsub>
 80076c6:	ea4f 5328 	mov.w	r3, r8, asr #20
 80076ca:	9305      	str	r3, [sp, #20]
 80076cc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80076d0:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80076d4:	2b10      	cmp	r3, #16
 80076d6:	dc02      	bgt.n	80076de <__ieee754_rem_pio2+0x1c6>
 80076d8:	e9c4 0100 	strd	r0, r1, [r4]
 80076dc:	e039      	b.n	8007752 <__ieee754_rem_pio2+0x23a>
 80076de:	a34c      	add	r3, pc, #304	@ (adr r3, 8007810 <__ieee754_rem_pio2+0x2f8>)
 80076e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076e8:	f7f8 ff3e 	bl	8000568 <__aeabi_dmul>
 80076ec:	4606      	mov	r6, r0
 80076ee:	460f      	mov	r7, r1
 80076f0:	4602      	mov	r2, r0
 80076f2:	460b      	mov	r3, r1
 80076f4:	4650      	mov	r0, sl
 80076f6:	4659      	mov	r1, fp
 80076f8:	f7f8 fd7e 	bl	80001f8 <__aeabi_dsub>
 80076fc:	4602      	mov	r2, r0
 80076fe:	460b      	mov	r3, r1
 8007700:	4680      	mov	r8, r0
 8007702:	4689      	mov	r9, r1
 8007704:	4650      	mov	r0, sl
 8007706:	4659      	mov	r1, fp
 8007708:	f7f8 fd76 	bl	80001f8 <__aeabi_dsub>
 800770c:	4632      	mov	r2, r6
 800770e:	463b      	mov	r3, r7
 8007710:	f7f8 fd72 	bl	80001f8 <__aeabi_dsub>
 8007714:	a340      	add	r3, pc, #256	@ (adr r3, 8007818 <__ieee754_rem_pio2+0x300>)
 8007716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800771a:	4606      	mov	r6, r0
 800771c:	460f      	mov	r7, r1
 800771e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007722:	f7f8 ff21 	bl	8000568 <__aeabi_dmul>
 8007726:	4632      	mov	r2, r6
 8007728:	463b      	mov	r3, r7
 800772a:	f7f8 fd65 	bl	80001f8 <__aeabi_dsub>
 800772e:	4602      	mov	r2, r0
 8007730:	460b      	mov	r3, r1
 8007732:	4606      	mov	r6, r0
 8007734:	460f      	mov	r7, r1
 8007736:	4640      	mov	r0, r8
 8007738:	4649      	mov	r1, r9
 800773a:	f7f8 fd5d 	bl	80001f8 <__aeabi_dsub>
 800773e:	9a05      	ldr	r2, [sp, #20]
 8007740:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007744:	1ad3      	subs	r3, r2, r3
 8007746:	2b31      	cmp	r3, #49	@ 0x31
 8007748:	dc20      	bgt.n	800778c <__ieee754_rem_pio2+0x274>
 800774a:	e9c4 0100 	strd	r0, r1, [r4]
 800774e:	46c2      	mov	sl, r8
 8007750:	46cb      	mov	fp, r9
 8007752:	e9d4 8900 	ldrd	r8, r9, [r4]
 8007756:	4650      	mov	r0, sl
 8007758:	4642      	mov	r2, r8
 800775a:	464b      	mov	r3, r9
 800775c:	4659      	mov	r1, fp
 800775e:	f7f8 fd4b 	bl	80001f8 <__aeabi_dsub>
 8007762:	463b      	mov	r3, r7
 8007764:	4632      	mov	r2, r6
 8007766:	f7f8 fd47 	bl	80001f8 <__aeabi_dsub>
 800776a:	9b04      	ldr	r3, [sp, #16]
 800776c:	2b00      	cmp	r3, #0
 800776e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007772:	f6bf af0e 	bge.w	8007592 <__ieee754_rem_pio2+0x7a>
 8007776:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800777a:	6063      	str	r3, [r4, #4]
 800777c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007780:	f8c4 8000 	str.w	r8, [r4]
 8007784:	60a0      	str	r0, [r4, #8]
 8007786:	60e3      	str	r3, [r4, #12]
 8007788:	426d      	negs	r5, r5
 800778a:	e702      	b.n	8007592 <__ieee754_rem_pio2+0x7a>
 800778c:	a326      	add	r3, pc, #152	@ (adr r3, 8007828 <__ieee754_rem_pio2+0x310>)
 800778e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007792:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007796:	f7f8 fee7 	bl	8000568 <__aeabi_dmul>
 800779a:	4606      	mov	r6, r0
 800779c:	460f      	mov	r7, r1
 800779e:	4602      	mov	r2, r0
 80077a0:	460b      	mov	r3, r1
 80077a2:	4640      	mov	r0, r8
 80077a4:	4649      	mov	r1, r9
 80077a6:	f7f8 fd27 	bl	80001f8 <__aeabi_dsub>
 80077aa:	4602      	mov	r2, r0
 80077ac:	460b      	mov	r3, r1
 80077ae:	4682      	mov	sl, r0
 80077b0:	468b      	mov	fp, r1
 80077b2:	4640      	mov	r0, r8
 80077b4:	4649      	mov	r1, r9
 80077b6:	f7f8 fd1f 	bl	80001f8 <__aeabi_dsub>
 80077ba:	4632      	mov	r2, r6
 80077bc:	463b      	mov	r3, r7
 80077be:	f7f8 fd1b 	bl	80001f8 <__aeabi_dsub>
 80077c2:	a31b      	add	r3, pc, #108	@ (adr r3, 8007830 <__ieee754_rem_pio2+0x318>)
 80077c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077c8:	4606      	mov	r6, r0
 80077ca:	460f      	mov	r7, r1
 80077cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077d0:	f7f8 feca 	bl	8000568 <__aeabi_dmul>
 80077d4:	4632      	mov	r2, r6
 80077d6:	463b      	mov	r3, r7
 80077d8:	f7f8 fd0e 	bl	80001f8 <__aeabi_dsub>
 80077dc:	4606      	mov	r6, r0
 80077de:	460f      	mov	r7, r1
 80077e0:	e764      	b.n	80076ac <__ieee754_rem_pio2+0x194>
 80077e2:	4b1b      	ldr	r3, [pc, #108]	@ (8007850 <__ieee754_rem_pio2+0x338>)
 80077e4:	4598      	cmp	r8, r3
 80077e6:	d935      	bls.n	8007854 <__ieee754_rem_pio2+0x33c>
 80077e8:	4632      	mov	r2, r6
 80077ea:	463b      	mov	r3, r7
 80077ec:	4630      	mov	r0, r6
 80077ee:	4639      	mov	r1, r7
 80077f0:	f7f8 fd02 	bl	80001f8 <__aeabi_dsub>
 80077f4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80077f8:	e9c4 0100 	strd	r0, r1, [r4]
 80077fc:	e69e      	b.n	800753c <__ieee754_rem_pio2+0x24>
 80077fe:	bf00      	nop
 8007800:	54400000 	.word	0x54400000
 8007804:	3ff921fb 	.word	0x3ff921fb
 8007808:	1a626331 	.word	0x1a626331
 800780c:	3dd0b461 	.word	0x3dd0b461
 8007810:	1a600000 	.word	0x1a600000
 8007814:	3dd0b461 	.word	0x3dd0b461
 8007818:	2e037073 	.word	0x2e037073
 800781c:	3ba3198a 	.word	0x3ba3198a
 8007820:	6dc9c883 	.word	0x6dc9c883
 8007824:	3fe45f30 	.word	0x3fe45f30
 8007828:	2e000000 	.word	0x2e000000
 800782c:	3ba3198a 	.word	0x3ba3198a
 8007830:	252049c1 	.word	0x252049c1
 8007834:	397b839a 	.word	0x397b839a
 8007838:	3fe921fb 	.word	0x3fe921fb
 800783c:	4002d97b 	.word	0x4002d97b
 8007840:	3ff921fb 	.word	0x3ff921fb
 8007844:	413921fb 	.word	0x413921fb
 8007848:	3fe00000 	.word	0x3fe00000
 800784c:	080087b0 	.word	0x080087b0
 8007850:	7fefffff 	.word	0x7fefffff
 8007854:	ea4f 5528 	mov.w	r5, r8, asr #20
 8007858:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800785c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8007860:	4630      	mov	r0, r6
 8007862:	460f      	mov	r7, r1
 8007864:	f7f9 f930 	bl	8000ac8 <__aeabi_d2iz>
 8007868:	f7f8 fe14 	bl	8000494 <__aeabi_i2d>
 800786c:	4602      	mov	r2, r0
 800786e:	460b      	mov	r3, r1
 8007870:	4630      	mov	r0, r6
 8007872:	4639      	mov	r1, r7
 8007874:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007878:	f7f8 fcbe 	bl	80001f8 <__aeabi_dsub>
 800787c:	4b22      	ldr	r3, [pc, #136]	@ (8007908 <__ieee754_rem_pio2+0x3f0>)
 800787e:	2200      	movs	r2, #0
 8007880:	f7f8 fe72 	bl	8000568 <__aeabi_dmul>
 8007884:	460f      	mov	r7, r1
 8007886:	4606      	mov	r6, r0
 8007888:	f7f9 f91e 	bl	8000ac8 <__aeabi_d2iz>
 800788c:	f7f8 fe02 	bl	8000494 <__aeabi_i2d>
 8007890:	4602      	mov	r2, r0
 8007892:	460b      	mov	r3, r1
 8007894:	4630      	mov	r0, r6
 8007896:	4639      	mov	r1, r7
 8007898:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800789c:	f7f8 fcac 	bl	80001f8 <__aeabi_dsub>
 80078a0:	4b19      	ldr	r3, [pc, #100]	@ (8007908 <__ieee754_rem_pio2+0x3f0>)
 80078a2:	2200      	movs	r2, #0
 80078a4:	f7f8 fe60 	bl	8000568 <__aeabi_dmul>
 80078a8:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 80078ac:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 80078b0:	f04f 0803 	mov.w	r8, #3
 80078b4:	2600      	movs	r6, #0
 80078b6:	2700      	movs	r7, #0
 80078b8:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80078bc:	4632      	mov	r2, r6
 80078be:	463b      	mov	r3, r7
 80078c0:	46c2      	mov	sl, r8
 80078c2:	f108 38ff 	add.w	r8, r8, #4294967295
 80078c6:	f7f9 f8b7 	bl	8000a38 <__aeabi_dcmpeq>
 80078ca:	2800      	cmp	r0, #0
 80078cc:	d1f4      	bne.n	80078b8 <__ieee754_rem_pio2+0x3a0>
 80078ce:	4b0f      	ldr	r3, [pc, #60]	@ (800790c <__ieee754_rem_pio2+0x3f4>)
 80078d0:	9301      	str	r3, [sp, #4]
 80078d2:	2302      	movs	r3, #2
 80078d4:	9300      	str	r3, [sp, #0]
 80078d6:	462a      	mov	r2, r5
 80078d8:	4653      	mov	r3, sl
 80078da:	4621      	mov	r1, r4
 80078dc:	a806      	add	r0, sp, #24
 80078de:	f000 f9b7 	bl	8007c50 <__kernel_rem_pio2>
 80078e2:	9b04      	ldr	r3, [sp, #16]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	4605      	mov	r5, r0
 80078e8:	f6bf ae53 	bge.w	8007592 <__ieee754_rem_pio2+0x7a>
 80078ec:	e9d4 2100 	ldrd	r2, r1, [r4]
 80078f0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80078f4:	e9c4 2300 	strd	r2, r3, [r4]
 80078f8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80078fc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007900:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8007904:	e740      	b.n	8007788 <__ieee754_rem_pio2+0x270>
 8007906:	bf00      	nop
 8007908:	41700000 	.word	0x41700000
 800790c:	08008830 	.word	0x08008830

08007910 <atan>:
 8007910:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007914:	ec55 4b10 	vmov	r4, r5, d0
 8007918:	4bbf      	ldr	r3, [pc, #764]	@ (8007c18 <atan+0x308>)
 800791a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800791e:	429e      	cmp	r6, r3
 8007920:	46ab      	mov	fp, r5
 8007922:	d918      	bls.n	8007956 <atan+0x46>
 8007924:	4bbd      	ldr	r3, [pc, #756]	@ (8007c1c <atan+0x30c>)
 8007926:	429e      	cmp	r6, r3
 8007928:	d801      	bhi.n	800792e <atan+0x1e>
 800792a:	d109      	bne.n	8007940 <atan+0x30>
 800792c:	b144      	cbz	r4, 8007940 <atan+0x30>
 800792e:	4622      	mov	r2, r4
 8007930:	462b      	mov	r3, r5
 8007932:	4620      	mov	r0, r4
 8007934:	4629      	mov	r1, r5
 8007936:	f7f8 fc61 	bl	80001fc <__adddf3>
 800793a:	4604      	mov	r4, r0
 800793c:	460d      	mov	r5, r1
 800793e:	e006      	b.n	800794e <atan+0x3e>
 8007940:	f1bb 0f00 	cmp.w	fp, #0
 8007944:	f340 812b 	ble.w	8007b9e <atan+0x28e>
 8007948:	a597      	add	r5, pc, #604	@ (adr r5, 8007ba8 <atan+0x298>)
 800794a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800794e:	ec45 4b10 	vmov	d0, r4, r5
 8007952:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007956:	4bb2      	ldr	r3, [pc, #712]	@ (8007c20 <atan+0x310>)
 8007958:	429e      	cmp	r6, r3
 800795a:	d813      	bhi.n	8007984 <atan+0x74>
 800795c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8007960:	429e      	cmp	r6, r3
 8007962:	d80c      	bhi.n	800797e <atan+0x6e>
 8007964:	a392      	add	r3, pc, #584	@ (adr r3, 8007bb0 <atan+0x2a0>)
 8007966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800796a:	4620      	mov	r0, r4
 800796c:	4629      	mov	r1, r5
 800796e:	f7f8 fc45 	bl	80001fc <__adddf3>
 8007972:	4bac      	ldr	r3, [pc, #688]	@ (8007c24 <atan+0x314>)
 8007974:	2200      	movs	r2, #0
 8007976:	f7f9 f887 	bl	8000a88 <__aeabi_dcmpgt>
 800797a:	2800      	cmp	r0, #0
 800797c:	d1e7      	bne.n	800794e <atan+0x3e>
 800797e:	f04f 3aff 	mov.w	sl, #4294967295
 8007982:	e029      	b.n	80079d8 <atan+0xc8>
 8007984:	f000 f95c 	bl	8007c40 <fabs>
 8007988:	4ba7      	ldr	r3, [pc, #668]	@ (8007c28 <atan+0x318>)
 800798a:	429e      	cmp	r6, r3
 800798c:	ec55 4b10 	vmov	r4, r5, d0
 8007990:	f200 80bc 	bhi.w	8007b0c <atan+0x1fc>
 8007994:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8007998:	429e      	cmp	r6, r3
 800799a:	f200 809e 	bhi.w	8007ada <atan+0x1ca>
 800799e:	4622      	mov	r2, r4
 80079a0:	462b      	mov	r3, r5
 80079a2:	4620      	mov	r0, r4
 80079a4:	4629      	mov	r1, r5
 80079a6:	f7f8 fc29 	bl	80001fc <__adddf3>
 80079aa:	4b9e      	ldr	r3, [pc, #632]	@ (8007c24 <atan+0x314>)
 80079ac:	2200      	movs	r2, #0
 80079ae:	f7f8 fc23 	bl	80001f8 <__aeabi_dsub>
 80079b2:	2200      	movs	r2, #0
 80079b4:	4606      	mov	r6, r0
 80079b6:	460f      	mov	r7, r1
 80079b8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80079bc:	4620      	mov	r0, r4
 80079be:	4629      	mov	r1, r5
 80079c0:	f7f8 fc1c 	bl	80001fc <__adddf3>
 80079c4:	4602      	mov	r2, r0
 80079c6:	460b      	mov	r3, r1
 80079c8:	4630      	mov	r0, r6
 80079ca:	4639      	mov	r1, r7
 80079cc:	f7f8 fef6 	bl	80007bc <__aeabi_ddiv>
 80079d0:	f04f 0a00 	mov.w	sl, #0
 80079d4:	4604      	mov	r4, r0
 80079d6:	460d      	mov	r5, r1
 80079d8:	4622      	mov	r2, r4
 80079da:	462b      	mov	r3, r5
 80079dc:	4620      	mov	r0, r4
 80079de:	4629      	mov	r1, r5
 80079e0:	f7f8 fdc2 	bl	8000568 <__aeabi_dmul>
 80079e4:	4602      	mov	r2, r0
 80079e6:	460b      	mov	r3, r1
 80079e8:	4680      	mov	r8, r0
 80079ea:	4689      	mov	r9, r1
 80079ec:	f7f8 fdbc 	bl	8000568 <__aeabi_dmul>
 80079f0:	a371      	add	r3, pc, #452	@ (adr r3, 8007bb8 <atan+0x2a8>)
 80079f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079f6:	4606      	mov	r6, r0
 80079f8:	460f      	mov	r7, r1
 80079fa:	f7f8 fdb5 	bl	8000568 <__aeabi_dmul>
 80079fe:	a370      	add	r3, pc, #448	@ (adr r3, 8007bc0 <atan+0x2b0>)
 8007a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a04:	f7f8 fbfa 	bl	80001fc <__adddf3>
 8007a08:	4632      	mov	r2, r6
 8007a0a:	463b      	mov	r3, r7
 8007a0c:	f7f8 fdac 	bl	8000568 <__aeabi_dmul>
 8007a10:	a36d      	add	r3, pc, #436	@ (adr r3, 8007bc8 <atan+0x2b8>)
 8007a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a16:	f7f8 fbf1 	bl	80001fc <__adddf3>
 8007a1a:	4632      	mov	r2, r6
 8007a1c:	463b      	mov	r3, r7
 8007a1e:	f7f8 fda3 	bl	8000568 <__aeabi_dmul>
 8007a22:	a36b      	add	r3, pc, #428	@ (adr r3, 8007bd0 <atan+0x2c0>)
 8007a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a28:	f7f8 fbe8 	bl	80001fc <__adddf3>
 8007a2c:	4632      	mov	r2, r6
 8007a2e:	463b      	mov	r3, r7
 8007a30:	f7f8 fd9a 	bl	8000568 <__aeabi_dmul>
 8007a34:	a368      	add	r3, pc, #416	@ (adr r3, 8007bd8 <atan+0x2c8>)
 8007a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a3a:	f7f8 fbdf 	bl	80001fc <__adddf3>
 8007a3e:	4632      	mov	r2, r6
 8007a40:	463b      	mov	r3, r7
 8007a42:	f7f8 fd91 	bl	8000568 <__aeabi_dmul>
 8007a46:	a366      	add	r3, pc, #408	@ (adr r3, 8007be0 <atan+0x2d0>)
 8007a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a4c:	f7f8 fbd6 	bl	80001fc <__adddf3>
 8007a50:	4642      	mov	r2, r8
 8007a52:	464b      	mov	r3, r9
 8007a54:	f7f8 fd88 	bl	8000568 <__aeabi_dmul>
 8007a58:	a363      	add	r3, pc, #396	@ (adr r3, 8007be8 <atan+0x2d8>)
 8007a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a5e:	4680      	mov	r8, r0
 8007a60:	4689      	mov	r9, r1
 8007a62:	4630      	mov	r0, r6
 8007a64:	4639      	mov	r1, r7
 8007a66:	f7f8 fd7f 	bl	8000568 <__aeabi_dmul>
 8007a6a:	a361      	add	r3, pc, #388	@ (adr r3, 8007bf0 <atan+0x2e0>)
 8007a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a70:	f7f8 fbc2 	bl	80001f8 <__aeabi_dsub>
 8007a74:	4632      	mov	r2, r6
 8007a76:	463b      	mov	r3, r7
 8007a78:	f7f8 fd76 	bl	8000568 <__aeabi_dmul>
 8007a7c:	a35e      	add	r3, pc, #376	@ (adr r3, 8007bf8 <atan+0x2e8>)
 8007a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a82:	f7f8 fbb9 	bl	80001f8 <__aeabi_dsub>
 8007a86:	4632      	mov	r2, r6
 8007a88:	463b      	mov	r3, r7
 8007a8a:	f7f8 fd6d 	bl	8000568 <__aeabi_dmul>
 8007a8e:	a35c      	add	r3, pc, #368	@ (adr r3, 8007c00 <atan+0x2f0>)
 8007a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a94:	f7f8 fbb0 	bl	80001f8 <__aeabi_dsub>
 8007a98:	4632      	mov	r2, r6
 8007a9a:	463b      	mov	r3, r7
 8007a9c:	f7f8 fd64 	bl	8000568 <__aeabi_dmul>
 8007aa0:	a359      	add	r3, pc, #356	@ (adr r3, 8007c08 <atan+0x2f8>)
 8007aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa6:	f7f8 fba7 	bl	80001f8 <__aeabi_dsub>
 8007aaa:	4632      	mov	r2, r6
 8007aac:	463b      	mov	r3, r7
 8007aae:	f7f8 fd5b 	bl	8000568 <__aeabi_dmul>
 8007ab2:	4602      	mov	r2, r0
 8007ab4:	460b      	mov	r3, r1
 8007ab6:	4640      	mov	r0, r8
 8007ab8:	4649      	mov	r1, r9
 8007aba:	f7f8 fb9f 	bl	80001fc <__adddf3>
 8007abe:	4622      	mov	r2, r4
 8007ac0:	462b      	mov	r3, r5
 8007ac2:	f7f8 fd51 	bl	8000568 <__aeabi_dmul>
 8007ac6:	f1ba 3fff 	cmp.w	sl, #4294967295
 8007aca:	4602      	mov	r2, r0
 8007acc:	460b      	mov	r3, r1
 8007ace:	d148      	bne.n	8007b62 <atan+0x252>
 8007ad0:	4620      	mov	r0, r4
 8007ad2:	4629      	mov	r1, r5
 8007ad4:	f7f8 fb90 	bl	80001f8 <__aeabi_dsub>
 8007ad8:	e72f      	b.n	800793a <atan+0x2a>
 8007ada:	4b52      	ldr	r3, [pc, #328]	@ (8007c24 <atan+0x314>)
 8007adc:	2200      	movs	r2, #0
 8007ade:	4620      	mov	r0, r4
 8007ae0:	4629      	mov	r1, r5
 8007ae2:	f7f8 fb89 	bl	80001f8 <__aeabi_dsub>
 8007ae6:	4b4f      	ldr	r3, [pc, #316]	@ (8007c24 <atan+0x314>)
 8007ae8:	4606      	mov	r6, r0
 8007aea:	460f      	mov	r7, r1
 8007aec:	2200      	movs	r2, #0
 8007aee:	4620      	mov	r0, r4
 8007af0:	4629      	mov	r1, r5
 8007af2:	f7f8 fb83 	bl	80001fc <__adddf3>
 8007af6:	4602      	mov	r2, r0
 8007af8:	460b      	mov	r3, r1
 8007afa:	4630      	mov	r0, r6
 8007afc:	4639      	mov	r1, r7
 8007afe:	f7f8 fe5d 	bl	80007bc <__aeabi_ddiv>
 8007b02:	f04f 0a01 	mov.w	sl, #1
 8007b06:	4604      	mov	r4, r0
 8007b08:	460d      	mov	r5, r1
 8007b0a:	e765      	b.n	80079d8 <atan+0xc8>
 8007b0c:	4b47      	ldr	r3, [pc, #284]	@ (8007c2c <atan+0x31c>)
 8007b0e:	429e      	cmp	r6, r3
 8007b10:	d21c      	bcs.n	8007b4c <atan+0x23c>
 8007b12:	4b47      	ldr	r3, [pc, #284]	@ (8007c30 <atan+0x320>)
 8007b14:	2200      	movs	r2, #0
 8007b16:	4620      	mov	r0, r4
 8007b18:	4629      	mov	r1, r5
 8007b1a:	f7f8 fb6d 	bl	80001f8 <__aeabi_dsub>
 8007b1e:	4b44      	ldr	r3, [pc, #272]	@ (8007c30 <atan+0x320>)
 8007b20:	4606      	mov	r6, r0
 8007b22:	460f      	mov	r7, r1
 8007b24:	2200      	movs	r2, #0
 8007b26:	4620      	mov	r0, r4
 8007b28:	4629      	mov	r1, r5
 8007b2a:	f7f8 fd1d 	bl	8000568 <__aeabi_dmul>
 8007b2e:	4b3d      	ldr	r3, [pc, #244]	@ (8007c24 <atan+0x314>)
 8007b30:	2200      	movs	r2, #0
 8007b32:	f7f8 fb63 	bl	80001fc <__adddf3>
 8007b36:	4602      	mov	r2, r0
 8007b38:	460b      	mov	r3, r1
 8007b3a:	4630      	mov	r0, r6
 8007b3c:	4639      	mov	r1, r7
 8007b3e:	f7f8 fe3d 	bl	80007bc <__aeabi_ddiv>
 8007b42:	f04f 0a02 	mov.w	sl, #2
 8007b46:	4604      	mov	r4, r0
 8007b48:	460d      	mov	r5, r1
 8007b4a:	e745      	b.n	80079d8 <atan+0xc8>
 8007b4c:	4622      	mov	r2, r4
 8007b4e:	462b      	mov	r3, r5
 8007b50:	4938      	ldr	r1, [pc, #224]	@ (8007c34 <atan+0x324>)
 8007b52:	2000      	movs	r0, #0
 8007b54:	f7f8 fe32 	bl	80007bc <__aeabi_ddiv>
 8007b58:	f04f 0a03 	mov.w	sl, #3
 8007b5c:	4604      	mov	r4, r0
 8007b5e:	460d      	mov	r5, r1
 8007b60:	e73a      	b.n	80079d8 <atan+0xc8>
 8007b62:	4b35      	ldr	r3, [pc, #212]	@ (8007c38 <atan+0x328>)
 8007b64:	4e35      	ldr	r6, [pc, #212]	@ (8007c3c <atan+0x32c>)
 8007b66:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b6e:	f7f8 fb43 	bl	80001f8 <__aeabi_dsub>
 8007b72:	4622      	mov	r2, r4
 8007b74:	462b      	mov	r3, r5
 8007b76:	f7f8 fb3f 	bl	80001f8 <__aeabi_dsub>
 8007b7a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8007b7e:	4602      	mov	r2, r0
 8007b80:	460b      	mov	r3, r1
 8007b82:	e9d6 0100 	ldrd	r0, r1, [r6]
 8007b86:	f7f8 fb37 	bl	80001f8 <__aeabi_dsub>
 8007b8a:	f1bb 0f00 	cmp.w	fp, #0
 8007b8e:	4604      	mov	r4, r0
 8007b90:	460d      	mov	r5, r1
 8007b92:	f6bf aedc 	bge.w	800794e <atan+0x3e>
 8007b96:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007b9a:	461d      	mov	r5, r3
 8007b9c:	e6d7      	b.n	800794e <atan+0x3e>
 8007b9e:	a51c      	add	r5, pc, #112	@ (adr r5, 8007c10 <atan+0x300>)
 8007ba0:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007ba4:	e6d3      	b.n	800794e <atan+0x3e>
 8007ba6:	bf00      	nop
 8007ba8:	54442d18 	.word	0x54442d18
 8007bac:	3ff921fb 	.word	0x3ff921fb
 8007bb0:	8800759c 	.word	0x8800759c
 8007bb4:	7e37e43c 	.word	0x7e37e43c
 8007bb8:	e322da11 	.word	0xe322da11
 8007bbc:	3f90ad3a 	.word	0x3f90ad3a
 8007bc0:	24760deb 	.word	0x24760deb
 8007bc4:	3fa97b4b 	.word	0x3fa97b4b
 8007bc8:	a0d03d51 	.word	0xa0d03d51
 8007bcc:	3fb10d66 	.word	0x3fb10d66
 8007bd0:	c54c206e 	.word	0xc54c206e
 8007bd4:	3fb745cd 	.word	0x3fb745cd
 8007bd8:	920083ff 	.word	0x920083ff
 8007bdc:	3fc24924 	.word	0x3fc24924
 8007be0:	5555550d 	.word	0x5555550d
 8007be4:	3fd55555 	.word	0x3fd55555
 8007be8:	2c6a6c2f 	.word	0x2c6a6c2f
 8007bec:	bfa2b444 	.word	0xbfa2b444
 8007bf0:	52defd9a 	.word	0x52defd9a
 8007bf4:	3fadde2d 	.word	0x3fadde2d
 8007bf8:	af749a6d 	.word	0xaf749a6d
 8007bfc:	3fb3b0f2 	.word	0x3fb3b0f2
 8007c00:	fe231671 	.word	0xfe231671
 8007c04:	3fbc71c6 	.word	0x3fbc71c6
 8007c08:	9998ebc4 	.word	0x9998ebc4
 8007c0c:	3fc99999 	.word	0x3fc99999
 8007c10:	54442d18 	.word	0x54442d18
 8007c14:	bff921fb 	.word	0xbff921fb
 8007c18:	440fffff 	.word	0x440fffff
 8007c1c:	7ff00000 	.word	0x7ff00000
 8007c20:	3fdbffff 	.word	0x3fdbffff
 8007c24:	3ff00000 	.word	0x3ff00000
 8007c28:	3ff2ffff 	.word	0x3ff2ffff
 8007c2c:	40038000 	.word	0x40038000
 8007c30:	3ff80000 	.word	0x3ff80000
 8007c34:	bff00000 	.word	0xbff00000
 8007c38:	08008938 	.word	0x08008938
 8007c3c:	08008958 	.word	0x08008958

08007c40 <fabs>:
 8007c40:	ec51 0b10 	vmov	r0, r1, d0
 8007c44:	4602      	mov	r2, r0
 8007c46:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8007c4a:	ec43 2b10 	vmov	d0, r2, r3
 8007c4e:	4770      	bx	lr

08007c50 <__kernel_rem_pio2>:
 8007c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c54:	ed2d 8b02 	vpush	{d8}
 8007c58:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8007c5c:	f112 0f14 	cmn.w	r2, #20
 8007c60:	9306      	str	r3, [sp, #24]
 8007c62:	9104      	str	r1, [sp, #16]
 8007c64:	4bc2      	ldr	r3, [pc, #776]	@ (8007f70 <__kernel_rem_pio2+0x320>)
 8007c66:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8007c68:	9008      	str	r0, [sp, #32]
 8007c6a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007c6e:	9300      	str	r3, [sp, #0]
 8007c70:	9b06      	ldr	r3, [sp, #24]
 8007c72:	f103 33ff 	add.w	r3, r3, #4294967295
 8007c76:	bfa8      	it	ge
 8007c78:	1ed4      	subge	r4, r2, #3
 8007c7a:	9305      	str	r3, [sp, #20]
 8007c7c:	bfb2      	itee	lt
 8007c7e:	2400      	movlt	r4, #0
 8007c80:	2318      	movge	r3, #24
 8007c82:	fb94 f4f3 	sdivge	r4, r4, r3
 8007c86:	f06f 0317 	mvn.w	r3, #23
 8007c8a:	fb04 3303 	mla	r3, r4, r3, r3
 8007c8e:	eb03 0b02 	add.w	fp, r3, r2
 8007c92:	9b00      	ldr	r3, [sp, #0]
 8007c94:	9a05      	ldr	r2, [sp, #20]
 8007c96:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 8007f60 <__kernel_rem_pio2+0x310>
 8007c9a:	eb03 0802 	add.w	r8, r3, r2
 8007c9e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8007ca0:	1aa7      	subs	r7, r4, r2
 8007ca2:	ae20      	add	r6, sp, #128	@ 0x80
 8007ca4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8007ca8:	2500      	movs	r5, #0
 8007caa:	4545      	cmp	r5, r8
 8007cac:	dd12      	ble.n	8007cd4 <__kernel_rem_pio2+0x84>
 8007cae:	9b06      	ldr	r3, [sp, #24]
 8007cb0:	aa20      	add	r2, sp, #128	@ 0x80
 8007cb2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8007cb6:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8007cba:	2700      	movs	r7, #0
 8007cbc:	9b00      	ldr	r3, [sp, #0]
 8007cbe:	429f      	cmp	r7, r3
 8007cc0:	dc2e      	bgt.n	8007d20 <__kernel_rem_pio2+0xd0>
 8007cc2:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 8007f60 <__kernel_rem_pio2+0x310>
 8007cc6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007cca:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007cce:	46a8      	mov	r8, r5
 8007cd0:	2600      	movs	r6, #0
 8007cd2:	e01b      	b.n	8007d0c <__kernel_rem_pio2+0xbc>
 8007cd4:	42ef      	cmn	r7, r5
 8007cd6:	d407      	bmi.n	8007ce8 <__kernel_rem_pio2+0x98>
 8007cd8:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8007cdc:	f7f8 fbda 	bl	8000494 <__aeabi_i2d>
 8007ce0:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007ce4:	3501      	adds	r5, #1
 8007ce6:	e7e0      	b.n	8007caa <__kernel_rem_pio2+0x5a>
 8007ce8:	ec51 0b18 	vmov	r0, r1, d8
 8007cec:	e7f8      	b.n	8007ce0 <__kernel_rem_pio2+0x90>
 8007cee:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 8007cf2:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8007cf6:	f7f8 fc37 	bl	8000568 <__aeabi_dmul>
 8007cfa:	4602      	mov	r2, r0
 8007cfc:	460b      	mov	r3, r1
 8007cfe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d02:	f7f8 fa7b 	bl	80001fc <__adddf3>
 8007d06:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d0a:	3601      	adds	r6, #1
 8007d0c:	9b05      	ldr	r3, [sp, #20]
 8007d0e:	429e      	cmp	r6, r3
 8007d10:	dded      	ble.n	8007cee <__kernel_rem_pio2+0x9e>
 8007d12:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007d16:	3701      	adds	r7, #1
 8007d18:	ecaa 7b02 	vstmia	sl!, {d7}
 8007d1c:	3508      	adds	r5, #8
 8007d1e:	e7cd      	b.n	8007cbc <__kernel_rem_pio2+0x6c>
 8007d20:	9b00      	ldr	r3, [sp, #0]
 8007d22:	f8dd 8000 	ldr.w	r8, [sp]
 8007d26:	aa0c      	add	r2, sp, #48	@ 0x30
 8007d28:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007d2c:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d2e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8007d30:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007d34:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d36:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8007d3a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007d3c:	ab98      	add	r3, sp, #608	@ 0x260
 8007d3e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007d42:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8007d46:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007d4a:	ac0c      	add	r4, sp, #48	@ 0x30
 8007d4c:	ab70      	add	r3, sp, #448	@ 0x1c0
 8007d4e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8007d52:	46a1      	mov	r9, r4
 8007d54:	46c2      	mov	sl, r8
 8007d56:	f1ba 0f00 	cmp.w	sl, #0
 8007d5a:	dc77      	bgt.n	8007e4c <__kernel_rem_pio2+0x1fc>
 8007d5c:	4658      	mov	r0, fp
 8007d5e:	ed9d 0b02 	vldr	d0, [sp, #8]
 8007d62:	f000 fac5 	bl	80082f0 <scalbn>
 8007d66:	ec57 6b10 	vmov	r6, r7, d0
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8007d70:	4630      	mov	r0, r6
 8007d72:	4639      	mov	r1, r7
 8007d74:	f7f8 fbf8 	bl	8000568 <__aeabi_dmul>
 8007d78:	ec41 0b10 	vmov	d0, r0, r1
 8007d7c:	f000 fb34 	bl	80083e8 <floor>
 8007d80:	4b7c      	ldr	r3, [pc, #496]	@ (8007f74 <__kernel_rem_pio2+0x324>)
 8007d82:	ec51 0b10 	vmov	r0, r1, d0
 8007d86:	2200      	movs	r2, #0
 8007d88:	f7f8 fbee 	bl	8000568 <__aeabi_dmul>
 8007d8c:	4602      	mov	r2, r0
 8007d8e:	460b      	mov	r3, r1
 8007d90:	4630      	mov	r0, r6
 8007d92:	4639      	mov	r1, r7
 8007d94:	f7f8 fa30 	bl	80001f8 <__aeabi_dsub>
 8007d98:	460f      	mov	r7, r1
 8007d9a:	4606      	mov	r6, r0
 8007d9c:	f7f8 fe94 	bl	8000ac8 <__aeabi_d2iz>
 8007da0:	9002      	str	r0, [sp, #8]
 8007da2:	f7f8 fb77 	bl	8000494 <__aeabi_i2d>
 8007da6:	4602      	mov	r2, r0
 8007da8:	460b      	mov	r3, r1
 8007daa:	4630      	mov	r0, r6
 8007dac:	4639      	mov	r1, r7
 8007dae:	f7f8 fa23 	bl	80001f8 <__aeabi_dsub>
 8007db2:	f1bb 0f00 	cmp.w	fp, #0
 8007db6:	4606      	mov	r6, r0
 8007db8:	460f      	mov	r7, r1
 8007dba:	dd6c      	ble.n	8007e96 <__kernel_rem_pio2+0x246>
 8007dbc:	f108 31ff 	add.w	r1, r8, #4294967295
 8007dc0:	ab0c      	add	r3, sp, #48	@ 0x30
 8007dc2:	9d02      	ldr	r5, [sp, #8]
 8007dc4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007dc8:	f1cb 0018 	rsb	r0, fp, #24
 8007dcc:	fa43 f200 	asr.w	r2, r3, r0
 8007dd0:	4415      	add	r5, r2
 8007dd2:	4082      	lsls	r2, r0
 8007dd4:	1a9b      	subs	r3, r3, r2
 8007dd6:	aa0c      	add	r2, sp, #48	@ 0x30
 8007dd8:	9502      	str	r5, [sp, #8]
 8007dda:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8007dde:	f1cb 0217 	rsb	r2, fp, #23
 8007de2:	fa43 f902 	asr.w	r9, r3, r2
 8007de6:	f1b9 0f00 	cmp.w	r9, #0
 8007dea:	dd64      	ble.n	8007eb6 <__kernel_rem_pio2+0x266>
 8007dec:	9b02      	ldr	r3, [sp, #8]
 8007dee:	2200      	movs	r2, #0
 8007df0:	3301      	adds	r3, #1
 8007df2:	9302      	str	r3, [sp, #8]
 8007df4:	4615      	mov	r5, r2
 8007df6:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8007dfa:	4590      	cmp	r8, r2
 8007dfc:	f300 80a1 	bgt.w	8007f42 <__kernel_rem_pio2+0x2f2>
 8007e00:	f1bb 0f00 	cmp.w	fp, #0
 8007e04:	dd07      	ble.n	8007e16 <__kernel_rem_pio2+0x1c6>
 8007e06:	f1bb 0f01 	cmp.w	fp, #1
 8007e0a:	f000 80c1 	beq.w	8007f90 <__kernel_rem_pio2+0x340>
 8007e0e:	f1bb 0f02 	cmp.w	fp, #2
 8007e12:	f000 80c8 	beq.w	8007fa6 <__kernel_rem_pio2+0x356>
 8007e16:	f1b9 0f02 	cmp.w	r9, #2
 8007e1a:	d14c      	bne.n	8007eb6 <__kernel_rem_pio2+0x266>
 8007e1c:	4632      	mov	r2, r6
 8007e1e:	463b      	mov	r3, r7
 8007e20:	4955      	ldr	r1, [pc, #340]	@ (8007f78 <__kernel_rem_pio2+0x328>)
 8007e22:	2000      	movs	r0, #0
 8007e24:	f7f8 f9e8 	bl	80001f8 <__aeabi_dsub>
 8007e28:	4606      	mov	r6, r0
 8007e2a:	460f      	mov	r7, r1
 8007e2c:	2d00      	cmp	r5, #0
 8007e2e:	d042      	beq.n	8007eb6 <__kernel_rem_pio2+0x266>
 8007e30:	4658      	mov	r0, fp
 8007e32:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 8007f68 <__kernel_rem_pio2+0x318>
 8007e36:	f000 fa5b 	bl	80082f0 <scalbn>
 8007e3a:	4630      	mov	r0, r6
 8007e3c:	4639      	mov	r1, r7
 8007e3e:	ec53 2b10 	vmov	r2, r3, d0
 8007e42:	f7f8 f9d9 	bl	80001f8 <__aeabi_dsub>
 8007e46:	4606      	mov	r6, r0
 8007e48:	460f      	mov	r7, r1
 8007e4a:	e034      	b.n	8007eb6 <__kernel_rem_pio2+0x266>
 8007e4c:	4b4b      	ldr	r3, [pc, #300]	@ (8007f7c <__kernel_rem_pio2+0x32c>)
 8007e4e:	2200      	movs	r2, #0
 8007e50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e54:	f7f8 fb88 	bl	8000568 <__aeabi_dmul>
 8007e58:	f7f8 fe36 	bl	8000ac8 <__aeabi_d2iz>
 8007e5c:	f7f8 fb1a 	bl	8000494 <__aeabi_i2d>
 8007e60:	4b47      	ldr	r3, [pc, #284]	@ (8007f80 <__kernel_rem_pio2+0x330>)
 8007e62:	2200      	movs	r2, #0
 8007e64:	4606      	mov	r6, r0
 8007e66:	460f      	mov	r7, r1
 8007e68:	f7f8 fb7e 	bl	8000568 <__aeabi_dmul>
 8007e6c:	4602      	mov	r2, r0
 8007e6e:	460b      	mov	r3, r1
 8007e70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e74:	f7f8 f9c0 	bl	80001f8 <__aeabi_dsub>
 8007e78:	f7f8 fe26 	bl	8000ac8 <__aeabi_d2iz>
 8007e7c:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8007e80:	f849 0b04 	str.w	r0, [r9], #4
 8007e84:	4639      	mov	r1, r7
 8007e86:	4630      	mov	r0, r6
 8007e88:	f7f8 f9b8 	bl	80001fc <__adddf3>
 8007e8c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007e90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e94:	e75f      	b.n	8007d56 <__kernel_rem_pio2+0x106>
 8007e96:	d107      	bne.n	8007ea8 <__kernel_rem_pio2+0x258>
 8007e98:	f108 33ff 	add.w	r3, r8, #4294967295
 8007e9c:	aa0c      	add	r2, sp, #48	@ 0x30
 8007e9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ea2:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8007ea6:	e79e      	b.n	8007de6 <__kernel_rem_pio2+0x196>
 8007ea8:	4b36      	ldr	r3, [pc, #216]	@ (8007f84 <__kernel_rem_pio2+0x334>)
 8007eaa:	2200      	movs	r2, #0
 8007eac:	f7f8 fde2 	bl	8000a74 <__aeabi_dcmpge>
 8007eb0:	2800      	cmp	r0, #0
 8007eb2:	d143      	bne.n	8007f3c <__kernel_rem_pio2+0x2ec>
 8007eb4:	4681      	mov	r9, r0
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	2300      	movs	r3, #0
 8007eba:	4630      	mov	r0, r6
 8007ebc:	4639      	mov	r1, r7
 8007ebe:	f7f8 fdbb 	bl	8000a38 <__aeabi_dcmpeq>
 8007ec2:	2800      	cmp	r0, #0
 8007ec4:	f000 80c1 	beq.w	800804a <__kernel_rem_pio2+0x3fa>
 8007ec8:	f108 33ff 	add.w	r3, r8, #4294967295
 8007ecc:	2200      	movs	r2, #0
 8007ece:	9900      	ldr	r1, [sp, #0]
 8007ed0:	428b      	cmp	r3, r1
 8007ed2:	da70      	bge.n	8007fb6 <__kernel_rem_pio2+0x366>
 8007ed4:	2a00      	cmp	r2, #0
 8007ed6:	f000 808b 	beq.w	8007ff0 <__kernel_rem_pio2+0x3a0>
 8007eda:	f108 38ff 	add.w	r8, r8, #4294967295
 8007ede:	ab0c      	add	r3, sp, #48	@ 0x30
 8007ee0:	f1ab 0b18 	sub.w	fp, fp, #24
 8007ee4:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d0f6      	beq.n	8007eda <__kernel_rem_pio2+0x28a>
 8007eec:	4658      	mov	r0, fp
 8007eee:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 8007f68 <__kernel_rem_pio2+0x318>
 8007ef2:	f000 f9fd 	bl	80082f0 <scalbn>
 8007ef6:	f108 0301 	add.w	r3, r8, #1
 8007efa:	00da      	lsls	r2, r3, #3
 8007efc:	9205      	str	r2, [sp, #20]
 8007efe:	ec55 4b10 	vmov	r4, r5, d0
 8007f02:	aa70      	add	r2, sp, #448	@ 0x1c0
 8007f04:	f8df b074 	ldr.w	fp, [pc, #116]	@ 8007f7c <__kernel_rem_pio2+0x32c>
 8007f08:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8007f0c:	4646      	mov	r6, r8
 8007f0e:	f04f 0a00 	mov.w	sl, #0
 8007f12:	2e00      	cmp	r6, #0
 8007f14:	f280 80d1 	bge.w	80080ba <__kernel_rem_pio2+0x46a>
 8007f18:	4644      	mov	r4, r8
 8007f1a:	2c00      	cmp	r4, #0
 8007f1c:	f2c0 80ff 	blt.w	800811e <__kernel_rem_pio2+0x4ce>
 8007f20:	4b19      	ldr	r3, [pc, #100]	@ (8007f88 <__kernel_rem_pio2+0x338>)
 8007f22:	461f      	mov	r7, r3
 8007f24:	ab70      	add	r3, sp, #448	@ 0x1c0
 8007f26:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007f2a:	9306      	str	r3, [sp, #24]
 8007f2c:	f04f 0a00 	mov.w	sl, #0
 8007f30:	f04f 0b00 	mov.w	fp, #0
 8007f34:	2600      	movs	r6, #0
 8007f36:	eba8 0504 	sub.w	r5, r8, r4
 8007f3a:	e0e4      	b.n	8008106 <__kernel_rem_pio2+0x4b6>
 8007f3c:	f04f 0902 	mov.w	r9, #2
 8007f40:	e754      	b.n	8007dec <__kernel_rem_pio2+0x19c>
 8007f42:	f854 3b04 	ldr.w	r3, [r4], #4
 8007f46:	bb0d      	cbnz	r5, 8007f8c <__kernel_rem_pio2+0x33c>
 8007f48:	b123      	cbz	r3, 8007f54 <__kernel_rem_pio2+0x304>
 8007f4a:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8007f4e:	f844 3c04 	str.w	r3, [r4, #-4]
 8007f52:	2301      	movs	r3, #1
 8007f54:	3201      	adds	r2, #1
 8007f56:	461d      	mov	r5, r3
 8007f58:	e74f      	b.n	8007dfa <__kernel_rem_pio2+0x1aa>
 8007f5a:	bf00      	nop
 8007f5c:	f3af 8000 	nop.w
	...
 8007f6c:	3ff00000 	.word	0x3ff00000
 8007f70:	080089b8 	.word	0x080089b8
 8007f74:	40200000 	.word	0x40200000
 8007f78:	3ff00000 	.word	0x3ff00000
 8007f7c:	3e700000 	.word	0x3e700000
 8007f80:	41700000 	.word	0x41700000
 8007f84:	3fe00000 	.word	0x3fe00000
 8007f88:	08008978 	.word	0x08008978
 8007f8c:	1acb      	subs	r3, r1, r3
 8007f8e:	e7de      	b.n	8007f4e <__kernel_rem_pio2+0x2fe>
 8007f90:	f108 32ff 	add.w	r2, r8, #4294967295
 8007f94:	ab0c      	add	r3, sp, #48	@ 0x30
 8007f96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f9a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007f9e:	a90c      	add	r1, sp, #48	@ 0x30
 8007fa0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007fa4:	e737      	b.n	8007e16 <__kernel_rem_pio2+0x1c6>
 8007fa6:	f108 32ff 	add.w	r2, r8, #4294967295
 8007faa:	ab0c      	add	r3, sp, #48	@ 0x30
 8007fac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fb0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007fb4:	e7f3      	b.n	8007f9e <__kernel_rem_pio2+0x34e>
 8007fb6:	a90c      	add	r1, sp, #48	@ 0x30
 8007fb8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007fbc:	3b01      	subs	r3, #1
 8007fbe:	430a      	orrs	r2, r1
 8007fc0:	e785      	b.n	8007ece <__kernel_rem_pio2+0x27e>
 8007fc2:	3401      	adds	r4, #1
 8007fc4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007fc8:	2a00      	cmp	r2, #0
 8007fca:	d0fa      	beq.n	8007fc2 <__kernel_rem_pio2+0x372>
 8007fcc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007fce:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007fd2:	eb0d 0503 	add.w	r5, sp, r3
 8007fd6:	9b06      	ldr	r3, [sp, #24]
 8007fd8:	aa20      	add	r2, sp, #128	@ 0x80
 8007fda:	4443      	add	r3, r8
 8007fdc:	f108 0701 	add.w	r7, r8, #1
 8007fe0:	3d98      	subs	r5, #152	@ 0x98
 8007fe2:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8007fe6:	4444      	add	r4, r8
 8007fe8:	42bc      	cmp	r4, r7
 8007fea:	da04      	bge.n	8007ff6 <__kernel_rem_pio2+0x3a6>
 8007fec:	46a0      	mov	r8, r4
 8007fee:	e6a2      	b.n	8007d36 <__kernel_rem_pio2+0xe6>
 8007ff0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ff2:	2401      	movs	r4, #1
 8007ff4:	e7e6      	b.n	8007fc4 <__kernel_rem_pio2+0x374>
 8007ff6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ff8:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8007ffc:	f7f8 fa4a 	bl	8000494 <__aeabi_i2d>
 8008000:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 80082c0 <__kernel_rem_pio2+0x670>
 8008004:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008008:	ed8d 7b02 	vstr	d7, [sp, #8]
 800800c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008010:	46b2      	mov	sl, r6
 8008012:	f04f 0800 	mov.w	r8, #0
 8008016:	9b05      	ldr	r3, [sp, #20]
 8008018:	4598      	cmp	r8, r3
 800801a:	dd05      	ble.n	8008028 <__kernel_rem_pio2+0x3d8>
 800801c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008020:	3701      	adds	r7, #1
 8008022:	eca5 7b02 	vstmia	r5!, {d7}
 8008026:	e7df      	b.n	8007fe8 <__kernel_rem_pio2+0x398>
 8008028:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800802c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8008030:	f7f8 fa9a 	bl	8000568 <__aeabi_dmul>
 8008034:	4602      	mov	r2, r0
 8008036:	460b      	mov	r3, r1
 8008038:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800803c:	f7f8 f8de 	bl	80001fc <__adddf3>
 8008040:	f108 0801 	add.w	r8, r8, #1
 8008044:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008048:	e7e5      	b.n	8008016 <__kernel_rem_pio2+0x3c6>
 800804a:	f1cb 0000 	rsb	r0, fp, #0
 800804e:	ec47 6b10 	vmov	d0, r6, r7
 8008052:	f000 f94d 	bl	80082f0 <scalbn>
 8008056:	ec55 4b10 	vmov	r4, r5, d0
 800805a:	4b9b      	ldr	r3, [pc, #620]	@ (80082c8 <__kernel_rem_pio2+0x678>)
 800805c:	2200      	movs	r2, #0
 800805e:	4620      	mov	r0, r4
 8008060:	4629      	mov	r1, r5
 8008062:	f7f8 fd07 	bl	8000a74 <__aeabi_dcmpge>
 8008066:	b300      	cbz	r0, 80080aa <__kernel_rem_pio2+0x45a>
 8008068:	4b98      	ldr	r3, [pc, #608]	@ (80082cc <__kernel_rem_pio2+0x67c>)
 800806a:	2200      	movs	r2, #0
 800806c:	4620      	mov	r0, r4
 800806e:	4629      	mov	r1, r5
 8008070:	f7f8 fa7a 	bl	8000568 <__aeabi_dmul>
 8008074:	f7f8 fd28 	bl	8000ac8 <__aeabi_d2iz>
 8008078:	4606      	mov	r6, r0
 800807a:	f7f8 fa0b 	bl	8000494 <__aeabi_i2d>
 800807e:	4b92      	ldr	r3, [pc, #584]	@ (80082c8 <__kernel_rem_pio2+0x678>)
 8008080:	2200      	movs	r2, #0
 8008082:	f7f8 fa71 	bl	8000568 <__aeabi_dmul>
 8008086:	460b      	mov	r3, r1
 8008088:	4602      	mov	r2, r0
 800808a:	4629      	mov	r1, r5
 800808c:	4620      	mov	r0, r4
 800808e:	f7f8 f8b3 	bl	80001f8 <__aeabi_dsub>
 8008092:	f7f8 fd19 	bl	8000ac8 <__aeabi_d2iz>
 8008096:	ab0c      	add	r3, sp, #48	@ 0x30
 8008098:	f10b 0b18 	add.w	fp, fp, #24
 800809c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80080a0:	f108 0801 	add.w	r8, r8, #1
 80080a4:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 80080a8:	e720      	b.n	8007eec <__kernel_rem_pio2+0x29c>
 80080aa:	4620      	mov	r0, r4
 80080ac:	4629      	mov	r1, r5
 80080ae:	f7f8 fd0b 	bl	8000ac8 <__aeabi_d2iz>
 80080b2:	ab0c      	add	r3, sp, #48	@ 0x30
 80080b4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80080b8:	e718      	b.n	8007eec <__kernel_rem_pio2+0x29c>
 80080ba:	ab0c      	add	r3, sp, #48	@ 0x30
 80080bc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80080c0:	f7f8 f9e8 	bl	8000494 <__aeabi_i2d>
 80080c4:	4622      	mov	r2, r4
 80080c6:	462b      	mov	r3, r5
 80080c8:	f7f8 fa4e 	bl	8000568 <__aeabi_dmul>
 80080cc:	4652      	mov	r2, sl
 80080ce:	e967 0102 	strd	r0, r1, [r7, #-8]!
 80080d2:	465b      	mov	r3, fp
 80080d4:	4620      	mov	r0, r4
 80080d6:	4629      	mov	r1, r5
 80080d8:	f7f8 fa46 	bl	8000568 <__aeabi_dmul>
 80080dc:	3e01      	subs	r6, #1
 80080de:	4604      	mov	r4, r0
 80080e0:	460d      	mov	r5, r1
 80080e2:	e716      	b.n	8007f12 <__kernel_rem_pio2+0x2c2>
 80080e4:	9906      	ldr	r1, [sp, #24]
 80080e6:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 80080ea:	9106      	str	r1, [sp, #24]
 80080ec:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 80080f0:	f7f8 fa3a 	bl	8000568 <__aeabi_dmul>
 80080f4:	4602      	mov	r2, r0
 80080f6:	460b      	mov	r3, r1
 80080f8:	4650      	mov	r0, sl
 80080fa:	4659      	mov	r1, fp
 80080fc:	f7f8 f87e 	bl	80001fc <__adddf3>
 8008100:	3601      	adds	r6, #1
 8008102:	4682      	mov	sl, r0
 8008104:	468b      	mov	fp, r1
 8008106:	9b00      	ldr	r3, [sp, #0]
 8008108:	429e      	cmp	r6, r3
 800810a:	dc01      	bgt.n	8008110 <__kernel_rem_pio2+0x4c0>
 800810c:	42ae      	cmp	r6, r5
 800810e:	dde9      	ble.n	80080e4 <__kernel_rem_pio2+0x494>
 8008110:	ab48      	add	r3, sp, #288	@ 0x120
 8008112:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8008116:	e9c5 ab00 	strd	sl, fp, [r5]
 800811a:	3c01      	subs	r4, #1
 800811c:	e6fd      	b.n	8007f1a <__kernel_rem_pio2+0x2ca>
 800811e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8008120:	2b02      	cmp	r3, #2
 8008122:	dc0b      	bgt.n	800813c <__kernel_rem_pio2+0x4ec>
 8008124:	2b00      	cmp	r3, #0
 8008126:	dc35      	bgt.n	8008194 <__kernel_rem_pio2+0x544>
 8008128:	d059      	beq.n	80081de <__kernel_rem_pio2+0x58e>
 800812a:	9b02      	ldr	r3, [sp, #8]
 800812c:	f003 0007 	and.w	r0, r3, #7
 8008130:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8008134:	ecbd 8b02 	vpop	{d8}
 8008138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800813c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800813e:	2b03      	cmp	r3, #3
 8008140:	d1f3      	bne.n	800812a <__kernel_rem_pio2+0x4da>
 8008142:	9b05      	ldr	r3, [sp, #20]
 8008144:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008148:	eb0d 0403 	add.w	r4, sp, r3
 800814c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8008150:	4625      	mov	r5, r4
 8008152:	46c2      	mov	sl, r8
 8008154:	f1ba 0f00 	cmp.w	sl, #0
 8008158:	dc69      	bgt.n	800822e <__kernel_rem_pio2+0x5de>
 800815a:	4645      	mov	r5, r8
 800815c:	2d01      	cmp	r5, #1
 800815e:	f300 8087 	bgt.w	8008270 <__kernel_rem_pio2+0x620>
 8008162:	9c05      	ldr	r4, [sp, #20]
 8008164:	ab48      	add	r3, sp, #288	@ 0x120
 8008166:	441c      	add	r4, r3
 8008168:	2000      	movs	r0, #0
 800816a:	2100      	movs	r1, #0
 800816c:	f1b8 0f01 	cmp.w	r8, #1
 8008170:	f300 809c 	bgt.w	80082ac <__kernel_rem_pio2+0x65c>
 8008174:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 8008178:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 800817c:	f1b9 0f00 	cmp.w	r9, #0
 8008180:	f040 80a6 	bne.w	80082d0 <__kernel_rem_pio2+0x680>
 8008184:	9b04      	ldr	r3, [sp, #16]
 8008186:	e9c3 5600 	strd	r5, r6, [r3]
 800818a:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800818e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8008192:	e7ca      	b.n	800812a <__kernel_rem_pio2+0x4da>
 8008194:	9d05      	ldr	r5, [sp, #20]
 8008196:	ab48      	add	r3, sp, #288	@ 0x120
 8008198:	441d      	add	r5, r3
 800819a:	4644      	mov	r4, r8
 800819c:	2000      	movs	r0, #0
 800819e:	2100      	movs	r1, #0
 80081a0:	2c00      	cmp	r4, #0
 80081a2:	da35      	bge.n	8008210 <__kernel_rem_pio2+0x5c0>
 80081a4:	f1b9 0f00 	cmp.w	r9, #0
 80081a8:	d038      	beq.n	800821c <__kernel_rem_pio2+0x5cc>
 80081aa:	4602      	mov	r2, r0
 80081ac:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80081b0:	9c04      	ldr	r4, [sp, #16]
 80081b2:	e9c4 2300 	strd	r2, r3, [r4]
 80081b6:	4602      	mov	r2, r0
 80081b8:	460b      	mov	r3, r1
 80081ba:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 80081be:	f7f8 f81b 	bl	80001f8 <__aeabi_dsub>
 80081c2:	ad4a      	add	r5, sp, #296	@ 0x128
 80081c4:	2401      	movs	r4, #1
 80081c6:	45a0      	cmp	r8, r4
 80081c8:	da2b      	bge.n	8008222 <__kernel_rem_pio2+0x5d2>
 80081ca:	f1b9 0f00 	cmp.w	r9, #0
 80081ce:	d002      	beq.n	80081d6 <__kernel_rem_pio2+0x586>
 80081d0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80081d4:	4619      	mov	r1, r3
 80081d6:	9b04      	ldr	r3, [sp, #16]
 80081d8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80081dc:	e7a5      	b.n	800812a <__kernel_rem_pio2+0x4da>
 80081de:	9c05      	ldr	r4, [sp, #20]
 80081e0:	ab48      	add	r3, sp, #288	@ 0x120
 80081e2:	441c      	add	r4, r3
 80081e4:	2000      	movs	r0, #0
 80081e6:	2100      	movs	r1, #0
 80081e8:	f1b8 0f00 	cmp.w	r8, #0
 80081ec:	da09      	bge.n	8008202 <__kernel_rem_pio2+0x5b2>
 80081ee:	f1b9 0f00 	cmp.w	r9, #0
 80081f2:	d002      	beq.n	80081fa <__kernel_rem_pio2+0x5aa>
 80081f4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80081f8:	4619      	mov	r1, r3
 80081fa:	9b04      	ldr	r3, [sp, #16]
 80081fc:	e9c3 0100 	strd	r0, r1, [r3]
 8008200:	e793      	b.n	800812a <__kernel_rem_pio2+0x4da>
 8008202:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008206:	f7f7 fff9 	bl	80001fc <__adddf3>
 800820a:	f108 38ff 	add.w	r8, r8, #4294967295
 800820e:	e7eb      	b.n	80081e8 <__kernel_rem_pio2+0x598>
 8008210:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8008214:	f7f7 fff2 	bl	80001fc <__adddf3>
 8008218:	3c01      	subs	r4, #1
 800821a:	e7c1      	b.n	80081a0 <__kernel_rem_pio2+0x550>
 800821c:	4602      	mov	r2, r0
 800821e:	460b      	mov	r3, r1
 8008220:	e7c6      	b.n	80081b0 <__kernel_rem_pio2+0x560>
 8008222:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8008226:	f7f7 ffe9 	bl	80001fc <__adddf3>
 800822a:	3401      	adds	r4, #1
 800822c:	e7cb      	b.n	80081c6 <__kernel_rem_pio2+0x576>
 800822e:	ed35 7b02 	vldmdb	r5!, {d7}
 8008232:	ed8d 7b00 	vstr	d7, [sp]
 8008236:	ed95 7b02 	vldr	d7, [r5, #8]
 800823a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800823e:	ec53 2b17 	vmov	r2, r3, d7
 8008242:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008246:	f7f7 ffd9 	bl	80001fc <__adddf3>
 800824a:	4602      	mov	r2, r0
 800824c:	460b      	mov	r3, r1
 800824e:	4606      	mov	r6, r0
 8008250:	460f      	mov	r7, r1
 8008252:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008256:	f7f7 ffcf 	bl	80001f8 <__aeabi_dsub>
 800825a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800825e:	f7f7 ffcd 	bl	80001fc <__adddf3>
 8008262:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008266:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800826a:	e9c5 6700 	strd	r6, r7, [r5]
 800826e:	e771      	b.n	8008154 <__kernel_rem_pio2+0x504>
 8008270:	ed34 7b02 	vldmdb	r4!, {d7}
 8008274:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8008278:	ec51 0b17 	vmov	r0, r1, d7
 800827c:	4652      	mov	r2, sl
 800827e:	465b      	mov	r3, fp
 8008280:	ed8d 7b00 	vstr	d7, [sp]
 8008284:	f7f7 ffba 	bl	80001fc <__adddf3>
 8008288:	4602      	mov	r2, r0
 800828a:	460b      	mov	r3, r1
 800828c:	4606      	mov	r6, r0
 800828e:	460f      	mov	r7, r1
 8008290:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008294:	f7f7 ffb0 	bl	80001f8 <__aeabi_dsub>
 8008298:	4652      	mov	r2, sl
 800829a:	465b      	mov	r3, fp
 800829c:	f7f7 ffae 	bl	80001fc <__adddf3>
 80082a0:	3d01      	subs	r5, #1
 80082a2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80082a6:	e9c4 6700 	strd	r6, r7, [r4]
 80082aa:	e757      	b.n	800815c <__kernel_rem_pio2+0x50c>
 80082ac:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80082b0:	f7f7 ffa4 	bl	80001fc <__adddf3>
 80082b4:	f108 38ff 	add.w	r8, r8, #4294967295
 80082b8:	e758      	b.n	800816c <__kernel_rem_pio2+0x51c>
 80082ba:	bf00      	nop
 80082bc:	f3af 8000 	nop.w
	...
 80082c8:	41700000 	.word	0x41700000
 80082cc:	3e700000 	.word	0x3e700000
 80082d0:	9b04      	ldr	r3, [sp, #16]
 80082d2:	9a04      	ldr	r2, [sp, #16]
 80082d4:	601d      	str	r5, [r3, #0]
 80082d6:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 80082da:	605c      	str	r4, [r3, #4]
 80082dc:	609f      	str	r7, [r3, #8]
 80082de:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 80082e2:	60d3      	str	r3, [r2, #12]
 80082e4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80082e8:	6110      	str	r0, [r2, #16]
 80082ea:	6153      	str	r3, [r2, #20]
 80082ec:	e71d      	b.n	800812a <__kernel_rem_pio2+0x4da>
 80082ee:	bf00      	nop

080082f0 <scalbn>:
 80082f0:	b570      	push	{r4, r5, r6, lr}
 80082f2:	ec55 4b10 	vmov	r4, r5, d0
 80082f6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80082fa:	4606      	mov	r6, r0
 80082fc:	462b      	mov	r3, r5
 80082fe:	b991      	cbnz	r1, 8008326 <scalbn+0x36>
 8008300:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8008304:	4323      	orrs	r3, r4
 8008306:	d03b      	beq.n	8008380 <scalbn+0x90>
 8008308:	4b33      	ldr	r3, [pc, #204]	@ (80083d8 <scalbn+0xe8>)
 800830a:	4620      	mov	r0, r4
 800830c:	4629      	mov	r1, r5
 800830e:	2200      	movs	r2, #0
 8008310:	f7f8 f92a 	bl	8000568 <__aeabi_dmul>
 8008314:	4b31      	ldr	r3, [pc, #196]	@ (80083dc <scalbn+0xec>)
 8008316:	429e      	cmp	r6, r3
 8008318:	4604      	mov	r4, r0
 800831a:	460d      	mov	r5, r1
 800831c:	da0f      	bge.n	800833e <scalbn+0x4e>
 800831e:	a326      	add	r3, pc, #152	@ (adr r3, 80083b8 <scalbn+0xc8>)
 8008320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008324:	e01e      	b.n	8008364 <scalbn+0x74>
 8008326:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800832a:	4291      	cmp	r1, r2
 800832c:	d10b      	bne.n	8008346 <scalbn+0x56>
 800832e:	4622      	mov	r2, r4
 8008330:	4620      	mov	r0, r4
 8008332:	4629      	mov	r1, r5
 8008334:	f7f7 ff62 	bl	80001fc <__adddf3>
 8008338:	4604      	mov	r4, r0
 800833a:	460d      	mov	r5, r1
 800833c:	e020      	b.n	8008380 <scalbn+0x90>
 800833e:	460b      	mov	r3, r1
 8008340:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8008344:	3936      	subs	r1, #54	@ 0x36
 8008346:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800834a:	4296      	cmp	r6, r2
 800834c:	dd0d      	ble.n	800836a <scalbn+0x7a>
 800834e:	2d00      	cmp	r5, #0
 8008350:	a11b      	add	r1, pc, #108	@ (adr r1, 80083c0 <scalbn+0xd0>)
 8008352:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008356:	da02      	bge.n	800835e <scalbn+0x6e>
 8008358:	a11b      	add	r1, pc, #108	@ (adr r1, 80083c8 <scalbn+0xd8>)
 800835a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800835e:	a318      	add	r3, pc, #96	@ (adr r3, 80083c0 <scalbn+0xd0>)
 8008360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008364:	f7f8 f900 	bl	8000568 <__aeabi_dmul>
 8008368:	e7e6      	b.n	8008338 <scalbn+0x48>
 800836a:	1872      	adds	r2, r6, r1
 800836c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8008370:	428a      	cmp	r2, r1
 8008372:	dcec      	bgt.n	800834e <scalbn+0x5e>
 8008374:	2a00      	cmp	r2, #0
 8008376:	dd06      	ble.n	8008386 <scalbn+0x96>
 8008378:	f36f 531e 	bfc	r3, #20, #11
 800837c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008380:	ec45 4b10 	vmov	d0, r4, r5
 8008384:	bd70      	pop	{r4, r5, r6, pc}
 8008386:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800838a:	da08      	bge.n	800839e <scalbn+0xae>
 800838c:	2d00      	cmp	r5, #0
 800838e:	a10a      	add	r1, pc, #40	@ (adr r1, 80083b8 <scalbn+0xc8>)
 8008390:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008394:	dac3      	bge.n	800831e <scalbn+0x2e>
 8008396:	a10e      	add	r1, pc, #56	@ (adr r1, 80083d0 <scalbn+0xe0>)
 8008398:	e9d1 0100 	ldrd	r0, r1, [r1]
 800839c:	e7bf      	b.n	800831e <scalbn+0x2e>
 800839e:	3236      	adds	r2, #54	@ 0x36
 80083a0:	f36f 531e 	bfc	r3, #20, #11
 80083a4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80083a8:	4620      	mov	r0, r4
 80083aa:	4b0d      	ldr	r3, [pc, #52]	@ (80083e0 <scalbn+0xf0>)
 80083ac:	4629      	mov	r1, r5
 80083ae:	2200      	movs	r2, #0
 80083b0:	e7d8      	b.n	8008364 <scalbn+0x74>
 80083b2:	bf00      	nop
 80083b4:	f3af 8000 	nop.w
 80083b8:	c2f8f359 	.word	0xc2f8f359
 80083bc:	01a56e1f 	.word	0x01a56e1f
 80083c0:	8800759c 	.word	0x8800759c
 80083c4:	7e37e43c 	.word	0x7e37e43c
 80083c8:	8800759c 	.word	0x8800759c
 80083cc:	fe37e43c 	.word	0xfe37e43c
 80083d0:	c2f8f359 	.word	0xc2f8f359
 80083d4:	81a56e1f 	.word	0x81a56e1f
 80083d8:	43500000 	.word	0x43500000
 80083dc:	ffff3cb0 	.word	0xffff3cb0
 80083e0:	3c900000 	.word	0x3c900000
 80083e4:	00000000 	.word	0x00000000

080083e8 <floor>:
 80083e8:	ec51 0b10 	vmov	r0, r1, d0
 80083ec:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80083f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083f4:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 80083f8:	2e13      	cmp	r6, #19
 80083fa:	460c      	mov	r4, r1
 80083fc:	4605      	mov	r5, r0
 80083fe:	4680      	mov	r8, r0
 8008400:	dc34      	bgt.n	800846c <floor+0x84>
 8008402:	2e00      	cmp	r6, #0
 8008404:	da17      	bge.n	8008436 <floor+0x4e>
 8008406:	a332      	add	r3, pc, #200	@ (adr r3, 80084d0 <floor+0xe8>)
 8008408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800840c:	f7f7 fef6 	bl	80001fc <__adddf3>
 8008410:	2200      	movs	r2, #0
 8008412:	2300      	movs	r3, #0
 8008414:	f7f8 fb38 	bl	8000a88 <__aeabi_dcmpgt>
 8008418:	b150      	cbz	r0, 8008430 <floor+0x48>
 800841a:	2c00      	cmp	r4, #0
 800841c:	da55      	bge.n	80084ca <floor+0xe2>
 800841e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8008422:	432c      	orrs	r4, r5
 8008424:	2500      	movs	r5, #0
 8008426:	42ac      	cmp	r4, r5
 8008428:	4c2b      	ldr	r4, [pc, #172]	@ (80084d8 <floor+0xf0>)
 800842a:	bf08      	it	eq
 800842c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8008430:	4621      	mov	r1, r4
 8008432:	4628      	mov	r0, r5
 8008434:	e023      	b.n	800847e <floor+0x96>
 8008436:	4f29      	ldr	r7, [pc, #164]	@ (80084dc <floor+0xf4>)
 8008438:	4137      	asrs	r7, r6
 800843a:	ea01 0307 	and.w	r3, r1, r7
 800843e:	4303      	orrs	r3, r0
 8008440:	d01d      	beq.n	800847e <floor+0x96>
 8008442:	a323      	add	r3, pc, #140	@ (adr r3, 80084d0 <floor+0xe8>)
 8008444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008448:	f7f7 fed8 	bl	80001fc <__adddf3>
 800844c:	2200      	movs	r2, #0
 800844e:	2300      	movs	r3, #0
 8008450:	f7f8 fb1a 	bl	8000a88 <__aeabi_dcmpgt>
 8008454:	2800      	cmp	r0, #0
 8008456:	d0eb      	beq.n	8008430 <floor+0x48>
 8008458:	2c00      	cmp	r4, #0
 800845a:	bfbe      	ittt	lt
 800845c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8008460:	4133      	asrlt	r3, r6
 8008462:	18e4      	addlt	r4, r4, r3
 8008464:	ea24 0407 	bic.w	r4, r4, r7
 8008468:	2500      	movs	r5, #0
 800846a:	e7e1      	b.n	8008430 <floor+0x48>
 800846c:	2e33      	cmp	r6, #51	@ 0x33
 800846e:	dd0a      	ble.n	8008486 <floor+0x9e>
 8008470:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8008474:	d103      	bne.n	800847e <floor+0x96>
 8008476:	4602      	mov	r2, r0
 8008478:	460b      	mov	r3, r1
 800847a:	f7f7 febf 	bl	80001fc <__adddf3>
 800847e:	ec41 0b10 	vmov	d0, r0, r1
 8008482:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008486:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800848a:	f04f 37ff 	mov.w	r7, #4294967295
 800848e:	40df      	lsrs	r7, r3
 8008490:	4207      	tst	r7, r0
 8008492:	d0f4      	beq.n	800847e <floor+0x96>
 8008494:	a30e      	add	r3, pc, #56	@ (adr r3, 80084d0 <floor+0xe8>)
 8008496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800849a:	f7f7 feaf 	bl	80001fc <__adddf3>
 800849e:	2200      	movs	r2, #0
 80084a0:	2300      	movs	r3, #0
 80084a2:	f7f8 faf1 	bl	8000a88 <__aeabi_dcmpgt>
 80084a6:	2800      	cmp	r0, #0
 80084a8:	d0c2      	beq.n	8008430 <floor+0x48>
 80084aa:	2c00      	cmp	r4, #0
 80084ac:	da0a      	bge.n	80084c4 <floor+0xdc>
 80084ae:	2e14      	cmp	r6, #20
 80084b0:	d101      	bne.n	80084b6 <floor+0xce>
 80084b2:	3401      	adds	r4, #1
 80084b4:	e006      	b.n	80084c4 <floor+0xdc>
 80084b6:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 80084ba:	2301      	movs	r3, #1
 80084bc:	40b3      	lsls	r3, r6
 80084be:	441d      	add	r5, r3
 80084c0:	4545      	cmp	r5, r8
 80084c2:	d3f6      	bcc.n	80084b2 <floor+0xca>
 80084c4:	ea25 0507 	bic.w	r5, r5, r7
 80084c8:	e7b2      	b.n	8008430 <floor+0x48>
 80084ca:	2500      	movs	r5, #0
 80084cc:	462c      	mov	r4, r5
 80084ce:	e7af      	b.n	8008430 <floor+0x48>
 80084d0:	8800759c 	.word	0x8800759c
 80084d4:	7e37e43c 	.word	0x7e37e43c
 80084d8:	bff00000 	.word	0xbff00000
 80084dc:	000fffff 	.word	0x000fffff

080084e0 <_init>:
 80084e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084e2:	bf00      	nop
 80084e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084e6:	bc08      	pop	{r3}
 80084e8:	469e      	mov	lr, r3
 80084ea:	4770      	bx	lr

080084ec <_fini>:
 80084ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ee:	bf00      	nop
 80084f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084f2:	bc08      	pop	{r3}
 80084f4:	469e      	mov	lr, r3
 80084f6:	4770      	bx	lr
