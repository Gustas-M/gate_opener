
remote_gate_opener.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b8c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  08006d2c  08006d2c  00007d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e98  08006e98  00008060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006e98  08006e98  00007e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ea0  08006ea0  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ea0  08006ea0  00007ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006ea4  08006ea4  00007ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08006ea8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b34  20000060  08006f08  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004b94  08006f08  00008b94  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017555  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e0d  00000000  00000000  0001f5e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001788  00000000  00000000  000233f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011fd  00000000  00000000  00024b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005adc  00000000  00000000  00025d7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018689  00000000  00000000  0002b859  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a323c  00000000  00000000  00043ee2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e711e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065b0  00000000  00000000  000e7164  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000ed714  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006d14 	.word	0x08006d14

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08006d14 	.word	0x08006d14

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b988 	b.w	8000508 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	468e      	mov	lr, r1
 8000218:	4604      	mov	r4, r0
 800021a:	4688      	mov	r8, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d962      	bls.n	80002ec <__udivmoddi4+0xdc>
 8000226:	fab2 f682 	clz	r6, r2
 800022a:	b14e      	cbz	r6, 8000240 <__udivmoddi4+0x30>
 800022c:	f1c6 0320 	rsb	r3, r6, #32
 8000230:	fa01 f806 	lsl.w	r8, r1, r6
 8000234:	fa20 f303 	lsr.w	r3, r0, r3
 8000238:	40b7      	lsls	r7, r6
 800023a:	ea43 0808 	orr.w	r8, r3, r8
 800023e:	40b4      	lsls	r4, r6
 8000240:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000244:	fa1f fc87 	uxth.w	ip, r7
 8000248:	fbb8 f1fe 	udiv	r1, r8, lr
 800024c:	0c23      	lsrs	r3, r4, #16
 800024e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000252:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000256:	fb01 f20c 	mul.w	r2, r1, ip
 800025a:	429a      	cmp	r2, r3
 800025c:	d909      	bls.n	8000272 <__udivmoddi4+0x62>
 800025e:	18fb      	adds	r3, r7, r3
 8000260:	f101 30ff 	add.w	r0, r1, #4294967295
 8000264:	f080 80ea 	bcs.w	800043c <__udivmoddi4+0x22c>
 8000268:	429a      	cmp	r2, r3
 800026a:	f240 80e7 	bls.w	800043c <__udivmoddi4+0x22c>
 800026e:	3902      	subs	r1, #2
 8000270:	443b      	add	r3, r7
 8000272:	1a9a      	subs	r2, r3, r2
 8000274:	b2a3      	uxth	r3, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000282:	fb00 fc0c 	mul.w	ip, r0, ip
 8000286:	459c      	cmp	ip, r3
 8000288:	d909      	bls.n	800029e <__udivmoddi4+0x8e>
 800028a:	18fb      	adds	r3, r7, r3
 800028c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000290:	f080 80d6 	bcs.w	8000440 <__udivmoddi4+0x230>
 8000294:	459c      	cmp	ip, r3
 8000296:	f240 80d3 	bls.w	8000440 <__udivmoddi4+0x230>
 800029a:	443b      	add	r3, r7
 800029c:	3802      	subs	r0, #2
 800029e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a2:	eba3 030c 	sub.w	r3, r3, ip
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11d      	cbz	r5, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40f3      	lsrs	r3, r6
 80002ac:	2200      	movs	r2, #0
 80002ae:	e9c5 3200 	strd	r3, r2, [r5]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d905      	bls.n	80002c6 <__udivmoddi4+0xb6>
 80002ba:	b10d      	cbz	r5, 80002c0 <__udivmoddi4+0xb0>
 80002bc:	e9c5 0100 	strd	r0, r1, [r5]
 80002c0:	2100      	movs	r1, #0
 80002c2:	4608      	mov	r0, r1
 80002c4:	e7f5      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002c6:	fab3 f183 	clz	r1, r3
 80002ca:	2900      	cmp	r1, #0
 80002cc:	d146      	bne.n	800035c <__udivmoddi4+0x14c>
 80002ce:	4573      	cmp	r3, lr
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xc8>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 8105 	bhi.w	80004e2 <__udivmoddi4+0x2d2>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb6e 0203 	sbc.w	r2, lr, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4690      	mov	r8, r2
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e5      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002e6:	e9c5 4800 	strd	r4, r8, [r5]
 80002ea:	e7e2      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f000 8090 	beq.w	8000412 <__udivmoddi4+0x202>
 80002f2:	fab2 f682 	clz	r6, r2
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	f040 80a4 	bne.w	8000444 <__udivmoddi4+0x234>
 80002fc:	1a8a      	subs	r2, r1, r2
 80002fe:	0c03      	lsrs	r3, r0, #16
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	b280      	uxth	r0, r0
 8000306:	b2bc      	uxth	r4, r7
 8000308:	2101      	movs	r1, #1
 800030a:	fbb2 fcfe 	udiv	ip, r2, lr
 800030e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000312:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000316:	fb04 f20c 	mul.w	r2, r4, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d907      	bls.n	800032e <__udivmoddi4+0x11e>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000324:	d202      	bcs.n	800032c <__udivmoddi4+0x11c>
 8000326:	429a      	cmp	r2, r3
 8000328:	f200 80e0 	bhi.w	80004ec <__udivmoddi4+0x2dc>
 800032c:	46c4      	mov	ip, r8
 800032e:	1a9b      	subs	r3, r3, r2
 8000330:	fbb3 f2fe 	udiv	r2, r3, lr
 8000334:	fb0e 3312 	mls	r3, lr, r2, r3
 8000338:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800033c:	fb02 f404 	mul.w	r4, r2, r4
 8000340:	429c      	cmp	r4, r3
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x144>
 8000344:	18fb      	adds	r3, r7, r3
 8000346:	f102 30ff 	add.w	r0, r2, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x142>
 800034c:	429c      	cmp	r4, r3
 800034e:	f200 80ca 	bhi.w	80004e6 <__udivmoddi4+0x2d6>
 8000352:	4602      	mov	r2, r0
 8000354:	1b1b      	subs	r3, r3, r4
 8000356:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0x98>
 800035c:	f1c1 0620 	rsb	r6, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 f706 	lsr.w	r7, r2, r6
 8000366:	431f      	orrs	r7, r3
 8000368:	fa0e f401 	lsl.w	r4, lr, r1
 800036c:	fa20 f306 	lsr.w	r3, r0, r6
 8000370:	fa2e fe06 	lsr.w	lr, lr, r6
 8000374:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	fa1f fc87 	uxth.w	ip, r7
 8000382:	fbbe f0f9 	udiv	r0, lr, r9
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	fb09 ee10 	mls	lr, r9, r0, lr
 800038c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000390:	fb00 fe0c 	mul.w	lr, r0, ip
 8000394:	45a6      	cmp	lr, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	d909      	bls.n	80003b0 <__udivmoddi4+0x1a0>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 3aff 	add.w	sl, r0, #4294967295
 80003a2:	f080 809c 	bcs.w	80004de <__udivmoddi4+0x2ce>
 80003a6:	45a6      	cmp	lr, r4
 80003a8:	f240 8099 	bls.w	80004de <__udivmoddi4+0x2ce>
 80003ac:	3802      	subs	r0, #2
 80003ae:	443c      	add	r4, r7
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	fa1f fe83 	uxth.w	lr, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c8:	45a4      	cmp	ip, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1ce>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80003d2:	f080 8082 	bcs.w	80004da <__udivmoddi4+0x2ca>
 80003d6:	45a4      	cmp	ip, r4
 80003d8:	d97f      	bls.n	80004da <__udivmoddi4+0x2ca>
 80003da:	3b02      	subs	r3, #2
 80003dc:	443c      	add	r4, r7
 80003de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003ea:	4564      	cmp	r4, ip
 80003ec:	4673      	mov	r3, lr
 80003ee:	46e1      	mov	r9, ip
 80003f0:	d362      	bcc.n	80004b8 <__udivmoddi4+0x2a8>
 80003f2:	d05f      	beq.n	80004b4 <__udivmoddi4+0x2a4>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x1fe>
 80003f6:	ebb8 0203 	subs.w	r2, r8, r3
 80003fa:	eb64 0409 	sbc.w	r4, r4, r9
 80003fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000402:	fa22 f301 	lsr.w	r3, r2, r1
 8000406:	431e      	orrs	r6, r3
 8000408:	40cc      	lsrs	r4, r1
 800040a:	e9c5 6400 	strd	r6, r4, [r5]
 800040e:	2100      	movs	r1, #0
 8000410:	e74f      	b.n	80002b2 <__udivmoddi4+0xa2>
 8000412:	fbb1 fcf2 	udiv	ip, r1, r2
 8000416:	0c01      	lsrs	r1, r0, #16
 8000418:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800041c:	b280      	uxth	r0, r0
 800041e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000422:	463b      	mov	r3, r7
 8000424:	4638      	mov	r0, r7
 8000426:	463c      	mov	r4, r7
 8000428:	46b8      	mov	r8, r7
 800042a:	46be      	mov	lr, r7
 800042c:	2620      	movs	r6, #32
 800042e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000432:	eba2 0208 	sub.w	r2, r2, r8
 8000436:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800043a:	e766      	b.n	800030a <__udivmoddi4+0xfa>
 800043c:	4601      	mov	r1, r0
 800043e:	e718      	b.n	8000272 <__udivmoddi4+0x62>
 8000440:	4610      	mov	r0, r2
 8000442:	e72c      	b.n	800029e <__udivmoddi4+0x8e>
 8000444:	f1c6 0220 	rsb	r2, r6, #32
 8000448:	fa2e f302 	lsr.w	r3, lr, r2
 800044c:	40b7      	lsls	r7, r6
 800044e:	40b1      	lsls	r1, r6
 8000450:	fa20 f202 	lsr.w	r2, r0, r2
 8000454:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000458:	430a      	orrs	r2, r1
 800045a:	fbb3 f8fe 	udiv	r8, r3, lr
 800045e:	b2bc      	uxth	r4, r7
 8000460:	fb0e 3318 	mls	r3, lr, r8, r3
 8000464:	0c11      	lsrs	r1, r2, #16
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb08 f904 	mul.w	r9, r8, r4
 800046e:	40b0      	lsls	r0, r6
 8000470:	4589      	cmp	r9, r1
 8000472:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000476:	b280      	uxth	r0, r0
 8000478:	d93e      	bls.n	80004f8 <__udivmoddi4+0x2e8>
 800047a:	1879      	adds	r1, r7, r1
 800047c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000480:	d201      	bcs.n	8000486 <__udivmoddi4+0x276>
 8000482:	4589      	cmp	r9, r1
 8000484:	d81f      	bhi.n	80004c6 <__udivmoddi4+0x2b6>
 8000486:	eba1 0109 	sub.w	r1, r1, r9
 800048a:	fbb1 f9fe 	udiv	r9, r1, lr
 800048e:	fb09 f804 	mul.w	r8, r9, r4
 8000492:	fb0e 1119 	mls	r1, lr, r9, r1
 8000496:	b292      	uxth	r2, r2
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	4542      	cmp	r2, r8
 800049e:	d229      	bcs.n	80004f4 <__udivmoddi4+0x2e4>
 80004a0:	18ba      	adds	r2, r7, r2
 80004a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004a6:	d2c4      	bcs.n	8000432 <__udivmoddi4+0x222>
 80004a8:	4542      	cmp	r2, r8
 80004aa:	d2c2      	bcs.n	8000432 <__udivmoddi4+0x222>
 80004ac:	f1a9 0102 	sub.w	r1, r9, #2
 80004b0:	443a      	add	r2, r7
 80004b2:	e7be      	b.n	8000432 <__udivmoddi4+0x222>
 80004b4:	45f0      	cmp	r8, lr
 80004b6:	d29d      	bcs.n	80003f4 <__udivmoddi4+0x1e4>
 80004b8:	ebbe 0302 	subs.w	r3, lr, r2
 80004bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004c0:	3801      	subs	r0, #1
 80004c2:	46e1      	mov	r9, ip
 80004c4:	e796      	b.n	80003f4 <__udivmoddi4+0x1e4>
 80004c6:	eba7 0909 	sub.w	r9, r7, r9
 80004ca:	4449      	add	r1, r9
 80004cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d4:	fb09 f804 	mul.w	r8, r9, r4
 80004d8:	e7db      	b.n	8000492 <__udivmoddi4+0x282>
 80004da:	4673      	mov	r3, lr
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1ce>
 80004de:	4650      	mov	r0, sl
 80004e0:	e766      	b.n	80003b0 <__udivmoddi4+0x1a0>
 80004e2:	4608      	mov	r0, r1
 80004e4:	e6fd      	b.n	80002e2 <__udivmoddi4+0xd2>
 80004e6:	443b      	add	r3, r7
 80004e8:	3a02      	subs	r2, #2
 80004ea:	e733      	b.n	8000354 <__udivmoddi4+0x144>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	443b      	add	r3, r7
 80004f2:	e71c      	b.n	800032e <__udivmoddi4+0x11e>
 80004f4:	4649      	mov	r1, r9
 80004f6:	e79c      	b.n	8000432 <__udivmoddi4+0x222>
 80004f8:	eba1 0109 	sub.w	r1, r1, r9
 80004fc:	46c4      	mov	ip, r8
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fb09 f804 	mul.w	r8, r9, r4
 8000506:	e7c4      	b.n	8000492 <__udivmoddi4+0x282>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <HEAP_API_Init>:
 *********************************************************************************************************************/

/**********************************************************************************************************************
 * Definitions of exported functions
 *********************************************************************************************************************/
bool HEAP_API_Init (void) {
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
    if (heap_mutex != NULL) {
 8000510:	4b0a      	ldr	r3, [pc, #40]	@ (800053c <HEAP_API_Init+0x30>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	2b00      	cmp	r3, #0
 8000516:	d001      	beq.n	800051c <HEAP_API_Init+0x10>
        return false;
 8000518:	2300      	movs	r3, #0
 800051a:	e00c      	b.n	8000536 <HEAP_API_Init+0x2a>
    }

    heap_mutex = osMutexNew(&g_static_uart_mutex_attr);
 800051c:	4808      	ldr	r0, [pc, #32]	@ (8000540 <HEAP_API_Init+0x34>)
 800051e:	f003 f8da 	bl	80036d6 <osMutexNew>
 8000522:	4603      	mov	r3, r0
 8000524:	4a05      	ldr	r2, [pc, #20]	@ (800053c <HEAP_API_Init+0x30>)
 8000526:	6013      	str	r3, [r2, #0]
    if (heap_mutex == NULL) {
 8000528:	4b04      	ldr	r3, [pc, #16]	@ (800053c <HEAP_API_Init+0x30>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	2b00      	cmp	r3, #0
 800052e:	d101      	bne.n	8000534 <HEAP_API_Init+0x28>
        return false;
 8000530:	2300      	movs	r3, #0
 8000532:	e000      	b.n	8000536 <HEAP_API_Init+0x2a>
    }

    return true;
 8000534:	2301      	movs	r3, #1
}
 8000536:	4618      	mov	r0, r3
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	2000007c 	.word	0x2000007c
 8000540:	08006d90 	.word	0x08006d90

08000544 <HEAP_API_Alloc>:

void *HEAP_API_Alloc (bool is_calloc, size_t number, size_t size) {
 8000544:	b580      	push	{r7, lr}
 8000546:	b086      	sub	sp, #24
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	60b9      	str	r1, [r7, #8]
 800054e:	607a      	str	r2, [r7, #4]
 8000550:	73fb      	strb	r3, [r7, #15]
    if ((number <= 0) || (size <= 0)) {
 8000552:	68bb      	ldr	r3, [r7, #8]
 8000554:	2b00      	cmp	r3, #0
 8000556:	d002      	beq.n	800055e <HEAP_API_Alloc+0x1a>
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	2b00      	cmp	r3, #0
 800055c:	d101      	bne.n	8000562 <HEAP_API_Alloc+0x1e>
        return NULL;
 800055e:	2300      	movs	r3, #0
 8000560:	e02e      	b.n	80005c0 <HEAP_API_Alloc+0x7c>
    }

    if (heap_mutex == NULL) {
 8000562:	4b19      	ldr	r3, [pc, #100]	@ (80005c8 <HEAP_API_Alloc+0x84>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	2b00      	cmp	r3, #0
 8000568:	d101      	bne.n	800056e <HEAP_API_Alloc+0x2a>
        return NULL;
 800056a:	2300      	movs	r3, #0
 800056c:	e028      	b.n	80005c0 <HEAP_API_Alloc+0x7c>
    }

    if (osMutexAcquire(heap_mutex, osWaitForever) != osOK) {
 800056e:	4b16      	ldr	r3, [pc, #88]	@ (80005c8 <HEAP_API_Alloc+0x84>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	f04f 31ff 	mov.w	r1, #4294967295
 8000576:	4618      	mov	r0, r3
 8000578:	f003 f933 	bl	80037e2 <osMutexAcquire>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <HEAP_API_Alloc+0x42>
        return NULL;
 8000582:	2300      	movs	r3, #0
 8000584:	e01c      	b.n	80005c0 <HEAP_API_Alloc+0x7c>
    }

    void *ptr = is_calloc ? calloc(number, size) : malloc(number * size);
 8000586:	7bfb      	ldrb	r3, [r7, #15]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d005      	beq.n	8000598 <HEAP_API_Alloc+0x54>
 800058c:	6879      	ldr	r1, [r7, #4]
 800058e:	68b8      	ldr	r0, [r7, #8]
 8000590:	f006 fa3a 	bl	8006a08 <calloc>
 8000594:	4603      	mov	r3, r0
 8000596:	e007      	b.n	80005a8 <HEAP_API_Alloc+0x64>
 8000598:	68bb      	ldr	r3, [r7, #8]
 800059a:	687a      	ldr	r2, [r7, #4]
 800059c:	fb02 f303 	mul.w	r3, r2, r3
 80005a0:	4618      	mov	r0, r3
 80005a2:	f006 fa4d 	bl	8006a40 <malloc>
 80005a6:	4603      	mov	r3, r0
 80005a8:	617b      	str	r3, [r7, #20]

    if (osMutexRelease(heap_mutex) != osOK){
 80005aa:	4b07      	ldr	r3, [pc, #28]	@ (80005c8 <HEAP_API_Alloc+0x84>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4618      	mov	r0, r3
 80005b0:	f003 f962 	bl	8003878 <osMutexRelease>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <HEAP_API_Alloc+0x7a>
        return NULL;
 80005ba:	2300      	movs	r3, #0
 80005bc:	e000      	b.n	80005c0 <HEAP_API_Alloc+0x7c>
    }

    return ptr;
 80005be:	697b      	ldr	r3, [r7, #20]
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	3718      	adds	r7, #24
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	2000007c 	.word	0x2000007c

080005cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005d0:	4b04      	ldr	r3, [pc, #16]	@ (80005e4 <__NVIC_GetPriorityGrouping+0x18>)
 80005d2:	68db      	ldr	r3, [r3, #12]
 80005d4:	0a1b      	lsrs	r3, r3, #8
 80005d6:	f003 0307 	and.w	r3, r3, #7
}
 80005da:	4618      	mov	r0, r3
 80005dc:	46bd      	mov	sp, r7
 80005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e2:	4770      	bx	lr
 80005e4:	e000ed00 	.word	0xe000ed00

080005e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b083      	sub	sp, #12
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	db0b      	blt.n	8000612 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	f003 021f 	and.w	r2, r3, #31
 8000600:	4907      	ldr	r1, [pc, #28]	@ (8000620 <__NVIC_EnableIRQ+0x38>)
 8000602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000606:	095b      	lsrs	r3, r3, #5
 8000608:	2001      	movs	r0, #1
 800060a:	fa00 f202 	lsl.w	r2, r0, r2
 800060e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000612:	bf00      	nop
 8000614:	370c      	adds	r7, #12
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	e000e100 	.word	0xe000e100

08000624 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
 800062a:	4603      	mov	r3, r0
 800062c:	6039      	str	r1, [r7, #0]
 800062e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000630:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000634:	2b00      	cmp	r3, #0
 8000636:	db0a      	blt.n	800064e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	b2da      	uxtb	r2, r3
 800063c:	490c      	ldr	r1, [pc, #48]	@ (8000670 <__NVIC_SetPriority+0x4c>)
 800063e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000642:	0112      	lsls	r2, r2, #4
 8000644:	b2d2      	uxtb	r2, r2
 8000646:	440b      	add	r3, r1
 8000648:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800064c:	e00a      	b.n	8000664 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800064e:	683b      	ldr	r3, [r7, #0]
 8000650:	b2da      	uxtb	r2, r3
 8000652:	4908      	ldr	r1, [pc, #32]	@ (8000674 <__NVIC_SetPriority+0x50>)
 8000654:	79fb      	ldrb	r3, [r7, #7]
 8000656:	f003 030f 	and.w	r3, r3, #15
 800065a:	3b04      	subs	r3, #4
 800065c:	0112      	lsls	r2, r2, #4
 800065e:	b2d2      	uxtb	r2, r2
 8000660:	440b      	add	r3, r1
 8000662:	761a      	strb	r2, [r3, #24]
}
 8000664:	bf00      	nop
 8000666:	370c      	adds	r7, #12
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr
 8000670:	e000e100 	.word	0xe000e100
 8000674:	e000ed00 	.word	0xe000ed00

08000678 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000678:	b480      	push	{r7}
 800067a:	b089      	sub	sp, #36	@ 0x24
 800067c:	af00      	add	r7, sp, #0
 800067e:	60f8      	str	r0, [r7, #12]
 8000680:	60b9      	str	r1, [r7, #8]
 8000682:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	f003 0307 	and.w	r3, r3, #7
 800068a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800068c:	69fb      	ldr	r3, [r7, #28]
 800068e:	f1c3 0307 	rsb	r3, r3, #7
 8000692:	2b04      	cmp	r3, #4
 8000694:	bf28      	it	cs
 8000696:	2304      	movcs	r3, #4
 8000698:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800069a:	69fb      	ldr	r3, [r7, #28]
 800069c:	3304      	adds	r3, #4
 800069e:	2b06      	cmp	r3, #6
 80006a0:	d902      	bls.n	80006a8 <NVIC_EncodePriority+0x30>
 80006a2:	69fb      	ldr	r3, [r7, #28]
 80006a4:	3b03      	subs	r3, #3
 80006a6:	e000      	b.n	80006aa <NVIC_EncodePriority+0x32>
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006ac:	f04f 32ff 	mov.w	r2, #4294967295
 80006b0:	69bb      	ldr	r3, [r7, #24]
 80006b2:	fa02 f303 	lsl.w	r3, r2, r3
 80006b6:	43da      	mvns	r2, r3
 80006b8:	68bb      	ldr	r3, [r7, #8]
 80006ba:	401a      	ands	r2, r3
 80006bc:	697b      	ldr	r3, [r7, #20]
 80006be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006c0:	f04f 31ff 	mov.w	r1, #4294967295
 80006c4:	697b      	ldr	r3, [r7, #20]
 80006c6:	fa01 f303 	lsl.w	r3, r1, r3
 80006ca:	43d9      	mvns	r1, r3
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006d0:	4313      	orrs	r3, r2
         );
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	3724      	adds	r7, #36	@ 0x24
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr
	...

080006e0 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Direction)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b085      	sub	sp, #20
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	60f8      	str	r0, [r7, #12]
 80006e8:	60b9      	str	r1, [r7, #8]
 80006ea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_DIR, Direction);
 80006ec:	4a0d      	ldr	r2, [pc, #52]	@ (8000724 <LL_DMA_SetDataTransferDirection+0x44>)
 80006ee:	68bb      	ldr	r3, [r7, #8]
 80006f0:	4413      	add	r3, r2
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	461a      	mov	r2, r3
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	4413      	add	r3, r2
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8000700:	4908      	ldr	r1, [pc, #32]	@ (8000724 <LL_DMA_SetDataTransferDirection+0x44>)
 8000702:	68bb      	ldr	r3, [r7, #8]
 8000704:	440b      	add	r3, r1
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	4619      	mov	r1, r3
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	440b      	add	r3, r1
 800070e:	4619      	mov	r1, r3
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	4313      	orrs	r3, r2
 8000714:	600b      	str	r3, [r1, #0]
}
 8000716:	bf00      	nop
 8000718:	3714      	adds	r7, #20
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	08006da0 	.word	0x08006da0

08000728 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  *         @arg @ref LL_DMA_MODE_PFCTRL
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Mode)
{
 8000728:	b480      	push	{r7}
 800072a:	b085      	sub	sp, #20
 800072c:	af00      	add	r7, sp, #0
 800072e:	60f8      	str	r0, [r7, #12]
 8000730:	60b9      	str	r1, [r7, #8]
 8000732:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 8000734:	4a0d      	ldr	r2, [pc, #52]	@ (800076c <LL_DMA_SetMode+0x44>)
 8000736:	68bb      	ldr	r3, [r7, #8]
 8000738:	4413      	add	r3, r2
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	461a      	mov	r2, r3
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	4413      	add	r3, r2
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	f423 7290 	bic.w	r2, r3, #288	@ 0x120
 8000748:	4908      	ldr	r1, [pc, #32]	@ (800076c <LL_DMA_SetMode+0x44>)
 800074a:	68bb      	ldr	r3, [r7, #8]
 800074c:	440b      	add	r3, r1
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	4619      	mov	r1, r3
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	440b      	add	r3, r1
 8000756:	4619      	mov	r1, r3
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	4313      	orrs	r3, r2
 800075c:	600b      	str	r3, [r1, #0]
}
 800075e:	bf00      	nop
 8000760:	3714      	adds	r7, #20
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	08006da0 	.word	0x08006da0

08000770 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 8000770:	b480      	push	{r7}
 8000772:	b085      	sub	sp, #20
 8000774:	af00      	add	r7, sp, #0
 8000776:	60f8      	str	r0, [r7, #12]
 8000778:	60b9      	str	r1, [r7, #8]
 800077a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PINC, IncrementMode);
 800077c:	4a0d      	ldr	r2, [pc, #52]	@ (80007b4 <LL_DMA_SetPeriphIncMode+0x44>)
 800077e:	68bb      	ldr	r3, [r7, #8]
 8000780:	4413      	add	r3, r2
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	461a      	mov	r2, r3
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	4413      	add	r3, r2
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8000790:	4908      	ldr	r1, [pc, #32]	@ (80007b4 <LL_DMA_SetPeriphIncMode+0x44>)
 8000792:	68bb      	ldr	r3, [r7, #8]
 8000794:	440b      	add	r3, r1
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	4619      	mov	r1, r3
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	440b      	add	r3, r1
 800079e:	4619      	mov	r1, r3
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	4313      	orrs	r3, r2
 80007a4:	600b      	str	r3, [r1, #0]
}
 80007a6:	bf00      	nop
 80007a8:	3714      	adds	r7, #20
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	08006da0 	.word	0x08006da0

080007b8 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b085      	sub	sp, #20
 80007bc:	af00      	add	r7, sp, #0
 80007be:	60f8      	str	r0, [r7, #12]
 80007c0:	60b9      	str	r1, [r7, #8]
 80007c2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MINC, IncrementMode);
 80007c4:	4a0d      	ldr	r2, [pc, #52]	@ (80007fc <LL_DMA_SetMemoryIncMode+0x44>)
 80007c6:	68bb      	ldr	r3, [r7, #8]
 80007c8:	4413      	add	r3, r2
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	461a      	mov	r2, r3
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	4413      	add	r3, r2
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80007d8:	4908      	ldr	r1, [pc, #32]	@ (80007fc <LL_DMA_SetMemoryIncMode+0x44>)
 80007da:	68bb      	ldr	r3, [r7, #8]
 80007dc:	440b      	add	r3, r1
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	4619      	mov	r1, r3
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	440b      	add	r3, r1
 80007e6:	4619      	mov	r1, r3
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	4313      	orrs	r3, r2
 80007ec:	600b      	str	r3, [r1, #0]
}
 80007ee:	bf00      	nop
 80007f0:	3714      	adds	r7, #20
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	08006da0 	.word	0x08006da0

08000800 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 8000800:	b480      	push	{r7}
 8000802:	b085      	sub	sp, #20
 8000804:	af00      	add	r7, sp, #0
 8000806:	60f8      	str	r0, [r7, #12]
 8000808:	60b9      	str	r1, [r7, #8]
 800080a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PSIZE, Size);
 800080c:	4a0d      	ldr	r2, [pc, #52]	@ (8000844 <LL_DMA_SetPeriphSize+0x44>)
 800080e:	68bb      	ldr	r3, [r7, #8]
 8000810:	4413      	add	r3, r2
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	461a      	mov	r2, r3
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	4413      	add	r3, r2
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8000820:	4908      	ldr	r1, [pc, #32]	@ (8000844 <LL_DMA_SetPeriphSize+0x44>)
 8000822:	68bb      	ldr	r3, [r7, #8]
 8000824:	440b      	add	r3, r1
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	4619      	mov	r1, r3
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	440b      	add	r3, r1
 800082e:	4619      	mov	r1, r3
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	4313      	orrs	r3, r2
 8000834:	600b      	str	r3, [r1, #0]
}
 8000836:	bf00      	nop
 8000838:	3714      	adds	r7, #20
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	08006da0 	.word	0x08006da0

08000848 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 8000848:	b480      	push	{r7}
 800084a:	b085      	sub	sp, #20
 800084c:	af00      	add	r7, sp, #0
 800084e:	60f8      	str	r0, [r7, #12]
 8000850:	60b9      	str	r1, [r7, #8]
 8000852:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_MSIZE, Size);
 8000854:	4a0d      	ldr	r2, [pc, #52]	@ (800088c <LL_DMA_SetMemorySize+0x44>)
 8000856:	68bb      	ldr	r3, [r7, #8]
 8000858:	4413      	add	r3, r2
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	461a      	mov	r2, r3
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	4413      	add	r3, r2
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	f423 42c0 	bic.w	r2, r3, #24576	@ 0x6000
 8000868:	4908      	ldr	r1, [pc, #32]	@ (800088c <LL_DMA_SetMemorySize+0x44>)
 800086a:	68bb      	ldr	r3, [r7, #8]
 800086c:	440b      	add	r3, r1
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	4619      	mov	r1, r3
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	440b      	add	r3, r1
 8000876:	4619      	mov	r1, r3
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	4313      	orrs	r3, r2
 800087c:	600b      	str	r3, [r1, #0]
}
 800087e:	bf00      	nop
 8000880:	3714      	adds	r7, #20
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	08006da0 	.word	0x08006da0

08000890 <LL_DMA_SetStreamPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetStreamPriorityLevel(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Priority)
{
 8000890:	b480      	push	{r7}
 8000892:	b085      	sub	sp, #20
 8000894:	af00      	add	r7, sp, #0
 8000896:	60f8      	str	r0, [r7, #12]
 8000898:	60b9      	str	r1, [r7, #8]
 800089a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_PL, Priority);
 800089c:	4a0d      	ldr	r2, [pc, #52]	@ (80008d4 <LL_DMA_SetStreamPriorityLevel+0x44>)
 800089e:	68bb      	ldr	r3, [r7, #8]
 80008a0:	4413      	add	r3, r2
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	461a      	mov	r2, r3
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	4413      	add	r3, r2
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80008b0:	4908      	ldr	r1, [pc, #32]	@ (80008d4 <LL_DMA_SetStreamPriorityLevel+0x44>)
 80008b2:	68bb      	ldr	r3, [r7, #8]
 80008b4:	440b      	add	r3, r1
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	4619      	mov	r1, r3
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	440b      	add	r3, r1
 80008be:	4619      	mov	r1, r3
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	4313      	orrs	r3, r2
 80008c4:	600b      	str	r3, [r1, #0]
}
 80008c6:	bf00      	nop
 80008c8:	3714      	adds	r7, #20
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	08006da0 	.word	0x08006da0

080008d8 <LL_DMA_SetChannelSelection>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelSelection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Channel)
{
 80008d8:	b480      	push	{r7}
 80008da:	b085      	sub	sp, #20
 80008dc:	af00      	add	r7, sp, #0
 80008de:	60f8      	str	r0, [r7, #12]
 80008e0:	60b9      	str	r1, [r7, #8]
 80008e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_CHSEL, Channel);
 80008e4:	4a0d      	ldr	r2, [pc, #52]	@ (800091c <LL_DMA_SetChannelSelection+0x44>)
 80008e6:	68bb      	ldr	r3, [r7, #8]
 80008e8:	4413      	add	r3, r2
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	461a      	mov	r2, r3
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	4413      	add	r3, r2
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 80008f8:	4908      	ldr	r1, [pc, #32]	@ (800091c <LL_DMA_SetChannelSelection+0x44>)
 80008fa:	68bb      	ldr	r3, [r7, #8]
 80008fc:	440b      	add	r3, r1
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	4619      	mov	r1, r3
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	440b      	add	r3, r1
 8000906:	4619      	mov	r1, r3
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	4313      	orrs	r3, r2
 800090c:	600b      	str	r3, [r1, #0]
}
 800090e:	bf00      	nop
 8000910:	3714      	adds	r7, #20
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	08006da0 	.word	0x08006da0

08000920 <LL_DMA_DisableFifoMode>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableFifoMode(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
 8000928:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->FCR, DMA_SxFCR_DMDIS);
 800092a:	4a0c      	ldr	r2, [pc, #48]	@ (800095c <LL_DMA_DisableFifoMode+0x3c>)
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	4413      	add	r3, r2
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	461a      	mov	r2, r3
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	4413      	add	r3, r2
 8000938:	695b      	ldr	r3, [r3, #20]
 800093a:	4908      	ldr	r1, [pc, #32]	@ (800095c <LL_DMA_DisableFifoMode+0x3c>)
 800093c:	683a      	ldr	r2, [r7, #0]
 800093e:	440a      	add	r2, r1
 8000940:	7812      	ldrb	r2, [r2, #0]
 8000942:	4611      	mov	r1, r2
 8000944:	687a      	ldr	r2, [r7, #4]
 8000946:	440a      	add	r2, r1
 8000948:	f023 0304 	bic.w	r3, r3, #4
 800094c:	6153      	str	r3, [r2, #20]
}
 800094e:	bf00      	nop
 8000950:	370c      	adds	r7, #12
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	08006da0 	.word	0x08006da0

08000960 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	601a      	str	r2, [r3, #0]
}
 8000974:	bf00      	nop
 8000976:	370c      	adds	r7, #12
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr

08000980 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          ENGC          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	601a      	str	r2, [r3, #0]
}
 8000994:	bf00      	nop
 8000996:	370c      	adds	r7, #12
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr

080009a0 <LL_I2C_SetOwnAddress2>:
  * @param  I2Cx I2C Instance.
  * @param  OwnAddress2 This parameter must be a value between Min_Data=0 and Max_Data=0x7F.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
 80009a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	68db      	ldr	r3, [r3, #12]
 80009ae:	f023 02fe 	bic.w	r2, r3, #254	@ 0xfe
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	431a      	orrs	r2, r3
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	60da      	str	r2, [r3, #12]
}
 80009ba:	bf00      	nop
 80009bc:	370c      	adds	r7, #12
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr

080009c6 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         ENDUAL        LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 80009c6:	b480      	push	{r7}
 80009c8:	b083      	sub	sp, #12
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	68db      	ldr	r3, [r3, #12]
 80009d2:	f023 0201 	bic.w	r2, r3, #1
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	60da      	str	r2, [r3, #12]
}
 80009da:	bf00      	nop
 80009dc:	370c      	adds	r7, #12
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
	...

080009e8 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80009ec:	4b05      	ldr	r3, [pc, #20]	@ (8000a04 <LL_RCC_HSI_Enable+0x1c>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a04      	ldr	r2, [pc, #16]	@ (8000a04 <LL_RCC_HSI_Enable+0x1c>)
 80009f2:	f043 0301 	orr.w	r3, r3, #1
 80009f6:	6013      	str	r3, [r2, #0]
}
 80009f8:	bf00      	nop
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	40023800 	.word	0x40023800

08000a08 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000a0c:	4b06      	ldr	r3, [pc, #24]	@ (8000a28 <LL_RCC_HSI_IsReady+0x20>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f003 0302 	and.w	r3, r3, #2
 8000a14:	2b02      	cmp	r3, #2
 8000a16:	bf0c      	ite	eq
 8000a18:	2301      	moveq	r3, #1
 8000a1a:	2300      	movne	r3, #0
 8000a1c:	b2db      	uxtb	r3, r3
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr
 8000a28:	40023800 	.word	0x40023800

08000a2c <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000a34:	4b07      	ldr	r3, [pc, #28]	@ (8000a54 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	00db      	lsls	r3, r3, #3
 8000a40:	4904      	ldr	r1, [pc, #16]	@ (8000a54 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000a42:	4313      	orrs	r3, r2
 8000a44:	600b      	str	r3, [r1, #0]
}
 8000a46:	bf00      	nop
 8000a48:	370c      	adds	r7, #12
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	40023800 	.word	0x40023800

08000a58 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000a60:	4b06      	ldr	r3, [pc, #24]	@ (8000a7c <LL_RCC_SetSysClkSource+0x24>)
 8000a62:	689b      	ldr	r3, [r3, #8]
 8000a64:	f023 0203 	bic.w	r2, r3, #3
 8000a68:	4904      	ldr	r1, [pc, #16]	@ (8000a7c <LL_RCC_SetSysClkSource+0x24>)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	608b      	str	r3, [r1, #8]
}
 8000a70:	bf00      	nop
 8000a72:	370c      	adds	r7, #12
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr
 8000a7c:	40023800 	.word	0x40023800

08000a80 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000a84:	4b04      	ldr	r3, [pc, #16]	@ (8000a98 <LL_RCC_GetSysClkSource+0x18>)
 8000a86:	689b      	ldr	r3, [r3, #8]
 8000a88:	f003 030c 	and.w	r3, r3, #12
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	40023800 	.word	0x40023800

08000a9c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000aa4:	4b06      	ldr	r3, [pc, #24]	@ (8000ac0 <LL_RCC_SetAHBPrescaler+0x24>)
 8000aa6:	689b      	ldr	r3, [r3, #8]
 8000aa8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000aac:	4904      	ldr	r1, [pc, #16]	@ (8000ac0 <LL_RCC_SetAHBPrescaler+0x24>)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	4313      	orrs	r3, r2
 8000ab2:	608b      	str	r3, [r1, #8]
}
 8000ab4:	bf00      	nop
 8000ab6:	370c      	adds	r7, #12
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr
 8000ac0:	40023800 	.word	0x40023800

08000ac4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000acc:	4b06      	ldr	r3, [pc, #24]	@ (8000ae8 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000ace:	689b      	ldr	r3, [r3, #8]
 8000ad0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8000ad4:	4904      	ldr	r1, [pc, #16]	@ (8000ae8 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	608b      	str	r3, [r1, #8]
}
 8000adc:	bf00      	nop
 8000ade:	370c      	adds	r7, #12
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr
 8000ae8:	40023800 	.word	0x40023800

08000aec <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000af4:	4b06      	ldr	r3, [pc, #24]	@ (8000b10 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000af6:	689b      	ldr	r3, [r3, #8]
 8000af8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8000afc:	4904      	ldr	r1, [pc, #16]	@ (8000b10 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	4313      	orrs	r3, r2
 8000b02:	608b      	str	r3, [r1, #8]
}
 8000b04:	bf00      	nop
 8000b06:	370c      	adds	r7, #12
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr
 8000b10:	40023800 	.word	0x40023800

08000b14 <LL_RCC_SetTIMPrescaler>:
  *         @arg @ref LL_RCC_TIM_PRESCALER_TWICE
  *         @arg @ref LL_RCC_TIM_PRESCALER_FOUR_TIMES
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMPrescaler(uint32_t Prescaler)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 8000b1c:	4b07      	ldr	r3, [pc, #28]	@ (8000b3c <LL_RCC_SetTIMPrescaler+0x28>)
 8000b1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000b22:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8000b26:	4905      	ldr	r1, [pc, #20]	@ (8000b3c <LL_RCC_SetTIMPrescaler+0x28>)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	4313      	orrs	r3, r2
 8000b2c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
}
 8000b30:	bf00      	nop
 8000b32:	370c      	adds	r7, #12
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr
 8000b3c:	40023800 	.word	0x40023800

08000b40 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000b44:	4b05      	ldr	r3, [pc, #20]	@ (8000b5c <LL_RCC_PLL_Enable+0x1c>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a04      	ldr	r2, [pc, #16]	@ (8000b5c <LL_RCC_PLL_Enable+0x1c>)
 8000b4a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000b4e:	6013      	str	r3, [r2, #0]
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	40023800 	.word	0x40023800

08000b60 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000b64:	4b07      	ldr	r3, [pc, #28]	@ (8000b84 <LL_RCC_PLL_IsReady+0x24>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000b6c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8000b70:	bf0c      	ite	eq
 8000b72:	2301      	moveq	r3, #1
 8000b74:	2300      	movne	r3, #0
 8000b76:	b2db      	uxtb	r3, r3
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	40023800 	.word	0x40023800

08000b88 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b085      	sub	sp, #20
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	60f8      	str	r0, [r7, #12]
 8000b90:	60b9      	str	r1, [r7, #8]
 8000b92:	607a      	str	r2, [r7, #4]
 8000b94:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8000b96:	4b0d      	ldr	r3, [pc, #52]	@ (8000bcc <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000b98:	685a      	ldr	r2, [r3, #4]
 8000b9a:	4b0d      	ldr	r3, [pc, #52]	@ (8000bd0 <LL_RCC_PLL_ConfigDomain_SYS+0x48>)
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	68f9      	ldr	r1, [r7, #12]
 8000ba0:	68ba      	ldr	r2, [r7, #8]
 8000ba2:	4311      	orrs	r1, r2
 8000ba4:	687a      	ldr	r2, [r7, #4]
 8000ba6:	0192      	lsls	r2, r2, #6
 8000ba8:	430a      	orrs	r2, r1
 8000baa:	4908      	ldr	r1, [pc, #32]	@ (8000bcc <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000bac:	4313      	orrs	r3, r2
 8000bae:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8000bb0:	4b06      	ldr	r3, [pc, #24]	@ (8000bcc <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8000bb8:	4904      	ldr	r1, [pc, #16]	@ (8000bcc <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 8000bc0:	bf00      	nop
 8000bc2:	3714      	adds	r7, #20
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	40023800 	.word	0x40023800
 8000bd0:	ffbf8000 	.word	0xffbf8000

08000bd4 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000bdc:	4b08      	ldr	r3, [pc, #32]	@ (8000c00 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000bde:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000be0:	4907      	ldr	r1, [pc, #28]	@ (8000c00 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	4313      	orrs	r3, r2
 8000be6:	630b      	str	r3, [r1, #48]	@ 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000be8:	4b05      	ldr	r3, [pc, #20]	@ (8000c00 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000bea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	4013      	ands	r3, r2
 8000bf0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000bf2:	68fb      	ldr	r3, [r7, #12]
}
 8000bf4:	bf00      	nop
 8000bf6:	3714      	adds	r7, #20
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr
 8000c00:	40023800 	.word	0x40023800

08000c04 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b085      	sub	sp, #20
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000c0c:	4b08      	ldr	r3, [pc, #32]	@ (8000c30 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000c0e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000c10:	4907      	ldr	r1, [pc, #28]	@ (8000c30 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	4313      	orrs	r3, r2
 8000c16:	640b      	str	r3, [r1, #64]	@ 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000c18:	4b05      	ldr	r3, [pc, #20]	@ (8000c30 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000c1a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	4013      	ands	r3, r2
 8000c20:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c22:	68fb      	ldr	r3, [r7, #12]
}
 8000c24:	bf00      	nop
 8000c26:	3714      	adds	r7, #20
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr
 8000c30:	40023800 	.word	0x40023800

08000c34 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000c3c:	4b08      	ldr	r3, [pc, #32]	@ (8000c60 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000c3e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000c40:	4907      	ldr	r1, [pc, #28]	@ (8000c60 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	4313      	orrs	r3, r2
 8000c46:	644b      	str	r3, [r1, #68]	@ 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000c48:	4b05      	ldr	r3, [pc, #20]	@ (8000c60 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000c4a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	4013      	ands	r3, r2
 8000c50:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c52:	68fb      	ldr	r3, [r7, #12]
}
 8000c54:	bf00      	nop
 8000c56:	3714      	adds	r7, #20
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr
 8000c60:	40023800 	.word	0x40023800

08000c64 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000c6c:	4b06      	ldr	r3, [pc, #24]	@ (8000c88 <LL_FLASH_SetLatency+0x24>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f023 0207 	bic.w	r2, r3, #7
 8000c74:	4904      	ldr	r1, [pc, #16]	@ (8000c88 <LL_FLASH_SetLatency+0x24>)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4313      	orrs	r3, r2
 8000c7a:	600b      	str	r3, [r1, #0]
}
 8000c7c:	bf00      	nop
 8000c7e:	370c      	adds	r7, #12
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr
 8000c88:	40023c00 	.word	0x40023c00

08000c8c <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000c90:	4b04      	ldr	r3, [pc, #16]	@ (8000ca4 <LL_FLASH_GetLatency+0x18>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f003 0307 	and.w	r3, r3, #7
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	40023c00 	.word	0x40023c00

08000ca8 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000cb0:	4b06      	ldr	r3, [pc, #24]	@ (8000ccc <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8000cb8:	4904      	ldr	r1, [pc, #16]	@ (8000ccc <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	600b      	str	r3, [r1, #0]
}
 8000cc0:	bf00      	nop
 8000cc2:	370c      	adds	r7, #12
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	40007000 	.word	0x40007000

08000cd0 <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the Regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll CSR   VOS       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  return (READ_BIT(PWR->CSR, LL_PWR_CSR_VOS) == (LL_PWR_CSR_VOS));
 8000cd4:	4b07      	ldr	r3, [pc, #28]	@ (8000cf4 <LL_PWR_IsActiveFlag_VOS+0x24>)
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cdc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000ce0:	bf0c      	ite	eq
 8000ce2:	2301      	moveq	r3, #1
 8000ce4:	2300      	movne	r3, #0
 8000ce6:	b2db      	uxtb	r3, r3
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	40007000 	.word	0x40007000

08000cf8 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	60da      	str	r2, [r3, #12]
}
 8000d0c:	bf00      	nop
 8000d0e:	370c      	adds	r7, #12
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	691b      	ldr	r3, [r3, #16]
 8000d24:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	695b      	ldr	r3, [r3, #20]
 8000d30:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	615a      	str	r2, [r3, #20]
}
 8000d38:	bf00      	nop
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr

08000d44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d48:	f001 f88a 	bl	8001e60 <HAL_Init>

  /* USER CODE BEGIN Init */
  HEAP_API_Init();
 8000d4c:	f7ff fbde 	bl	800050c <HEAP_API_Init>
  UART_API_Init(eUartApiPort_Usart1, 0, (uint8_t*)"\n", 1);
 8000d50:	2301      	movs	r3, #1
 8000d52:	4a0e      	ldr	r2, [pc, #56]	@ (8000d8c <main+0x48>)
 8000d54:	2100      	movs	r1, #0
 8000d56:	2000      	movs	r0, #0
 8000d58:	f000 fcfe 	bl	8001758 <UART_API_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d5c:	f000 f81e 	bl	8000d9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d60:	f000 f962 	bl	8001028 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d64:	f000 f948 	bl	8000ff8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000d68:	f000 f8c4 	bl	8000ef4 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000d6c:	f000 f86c 	bl	8000e48 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000d70:	f002 fbba 	bl	80034e8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000d74:	4a06      	ldr	r2, [pc, #24]	@ (8000d90 <main+0x4c>)
 8000d76:	2100      	movs	r1, #0
 8000d78:	4806      	ldr	r0, [pc, #24]	@ (8000d94 <main+0x50>)
 8000d7a:	f002 fbff 	bl	800357c <osThreadNew>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	4a05      	ldr	r2, [pc, #20]	@ (8000d98 <main+0x54>)
 8000d82:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000d84:	f002 fbd4 	bl	8003530 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d88:	bf00      	nop
 8000d8a:	e7fd      	b.n	8000d88 <main+0x44>
 8000d8c:	08006d48 	.word	0x08006d48
 8000d90:	08006da8 	.word	0x08006da8
 8000d94:	08001049 	.word	0x08001049
 8000d98:	20000080 	.word	0x20000080

08000d9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 8000da0:	2002      	movs	r0, #2
 8000da2:	f7ff ff5f 	bl	8000c64 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 8000da6:	bf00      	nop
 8000da8:	f7ff ff70 	bl	8000c8c <LL_FLASH_GetLatency>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b02      	cmp	r3, #2
 8000db0:	d1fa      	bne.n	8000da8 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE2);
 8000db2:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8000db6:	f7ff ff77 	bl	8000ca8 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_SetCalibTrimming(16);
 8000dba:	2010      	movs	r0, #16
 8000dbc:	f7ff fe36 	bl	8000a2c <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 8000dc0:	f7ff fe12 	bl	80009e8 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000dc4:	bf00      	nop
 8000dc6:	f7ff fe1f 	bl	8000a08 <LL_RCC_HSI_IsReady>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d1fa      	bne.n	8000dc6 <SystemClock_Config+0x2a>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_16, 336, LL_RCC_PLLP_DIV_4);
 8000dd0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000dd4:	f44f 72a8 	mov.w	r2, #336	@ 0x150
 8000dd8:	2110      	movs	r1, #16
 8000dda:	2000      	movs	r0, #0
 8000ddc:	f7ff fed4 	bl	8000b88 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000de0:	f7ff feae 	bl	8000b40 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000de4:	bf00      	nop
 8000de6:	f7ff febb 	bl	8000b60 <LL_RCC_PLL_IsReady>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b01      	cmp	r3, #1
 8000dee:	d1fa      	bne.n	8000de6 <SystemClock_Config+0x4a>
  {

  }
  while (LL_PWR_IsActiveFlag_VOS() == 0)
 8000df0:	bf00      	nop
 8000df2:	f7ff ff6d 	bl	8000cd0 <LL_PWR_IsActiveFlag_VOS>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d0fa      	beq.n	8000df2 <SystemClock_Config+0x56>
  {
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000dfc:	2000      	movs	r0, #0
 8000dfe:	f7ff fe4d 	bl	8000a9c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8000e02:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8000e06:	f7ff fe5d 	bl	8000ac4 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000e0a:	2000      	movs	r0, #0
 8000e0c:	f7ff fe6e 	bl	8000aec <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000e10:	2002      	movs	r0, #2
 8000e12:	f7ff fe21 	bl	8000a58 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000e16:	bf00      	nop
 8000e18:	f7ff fe32 	bl	8000a80 <LL_RCC_GetSysClkSource>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b08      	cmp	r3, #8
 8000e20:	d1fa      	bne.n	8000e18 <SystemClock_Config+0x7c>
  {

  }
  LL_SetSystemCoreClock(84000000);
 8000e22:	4808      	ldr	r0, [pc, #32]	@ (8000e44 <SystemClock_Config+0xa8>)
 8000e24:	f002 fb0c 	bl	8003440 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8000e28:	200f      	movs	r0, #15
 8000e2a:	f000 fa2b 	bl	8001284 <HAL_InitTick>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000e34:	f000 f922 	bl	800107c <Error_Handler>
  }
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
 8000e38:	2000      	movs	r0, #0
 8000e3a:	f7ff fe6b 	bl	8000b14 <LL_RCC_SetTIMPrescaler>
}
 8000e3e:	bf00      	nop
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	0501bd00 	.word	0x0501bd00

08000e48 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08e      	sub	sp, #56	@ 0x38
 8000e4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8000e4e:	f107 0318 	add.w	r3, r7, #24
 8000e52:	2220      	movs	r2, #32
 8000e54:	2100      	movs	r1, #0
 8000e56:	4618      	mov	r0, r3
 8000e58:	f005 fec0 	bl	8006bdc <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5c:	463b      	mov	r3, r7
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	605a      	str	r2, [r3, #4]
 8000e64:	609a      	str	r2, [r3, #8]
 8000e66:	60da      	str	r2, [r3, #12]
 8000e68:	611a      	str	r2, [r3, #16]
 8000e6a:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000e6c:	2002      	movs	r0, #2
 8000e6e:	f7ff feb1 	bl	8000bd4 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration
  PB6   ------> I2C1_SCL
  PB7   ------> I2C1_SDA
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8000e72:	23c0      	movs	r3, #192	@ 0xc0
 8000e74:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000e76:	2302      	movs	r3, #2
 8000e78:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000e7a:	2303      	movs	r3, #3
 8000e7c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e82:	2300      	movs	r3, #0
 8000e84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8000e86:	2304      	movs	r3, #4
 8000e88:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e8a:	463b      	mov	r3, r7
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4816      	ldr	r0, [pc, #88]	@ (8000ee8 <MX_I2C1_Init+0xa0>)
 8000e90:	f001 fd09 	bl	80028a6 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8000e94:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8000e98:	f7ff feb4 	bl	8000c04 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C1_Init 1 */

  /** I2C Initialization
  */
  LL_I2C_DisableOwnAddress2(I2C1);
 8000e9c:	4813      	ldr	r0, [pc, #76]	@ (8000eec <MX_I2C1_Init+0xa4>)
 8000e9e:	f7ff fd92 	bl	80009c6 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8000ea2:	4812      	ldr	r0, [pc, #72]	@ (8000eec <MX_I2C1_Init+0xa4>)
 8000ea4:	f7ff fd6c 	bl	8000980 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8000ea8:	4810      	ldr	r0, [pc, #64]	@ (8000eec <MX_I2C1_Init+0xa4>)
 8000eaa:	f7ff fd59 	bl	8000960 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 8000eb2:	4b0f      	ldr	r3, [pc, #60]	@ (8000ef0 <MX_I2C1_Init+0xa8>)
 8000eb4:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.OwnAddress1 = 0;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8000ebe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ec2:	633b      	str	r3, [r7, #48]	@ 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8000ec4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000ec8:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8000eca:	f107 0318 	add.w	r3, r7, #24
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4806      	ldr	r0, [pc, #24]	@ (8000eec <MX_I2C1_Init+0xa4>)
 8000ed2:	f001 fe75 	bl	8002bc0 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0);
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	4804      	ldr	r0, [pc, #16]	@ (8000eec <MX_I2C1_Init+0xa4>)
 8000eda:	f7ff fd61 	bl	80009a0 <LL_I2C_SetOwnAddress2>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ede:	bf00      	nop
 8000ee0:	3738      	adds	r7, #56	@ 0x38
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40020400 	.word	0x40020400
 8000eec:	40005400 	.word	0x40005400
 8000ef0:	000186a0 	.word	0x000186a0

08000ef4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b08e      	sub	sp, #56	@ 0x38
 8000ef8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000efa:	f107 031c 	add.w	r3, r7, #28
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	605a      	str	r2, [r3, #4]
 8000f04:	609a      	str	r2, [r3, #8]
 8000f06:	60da      	str	r2, [r3, #12]
 8000f08:	611a      	str	r2, [r3, #16]
 8000f0a:	615a      	str	r2, [r3, #20]
 8000f0c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0e:	1d3b      	adds	r3, r7, #4
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	60da      	str	r2, [r3, #12]
 8000f1a:	611a      	str	r2, [r3, #16]
 8000f1c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8000f1e:	2010      	movs	r0, #16
 8000f20:	f7ff fe88 	bl	8000c34 <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000f24:	2001      	movs	r0, #1
 8000f26:	f7ff fe55 	bl	8000bd4 <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 8000f2a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000f2e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000f30:	2302      	movs	r3, #2
 8000f32:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000f34:	2303      	movs	r3, #3
 8000f36:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000f40:	2307      	movs	r3, #7
 8000f42:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f44:	1d3b      	adds	r3, r7, #4
 8000f46:	4619      	mov	r1, r3
 8000f48:	4828      	ldr	r0, [pc, #160]	@ (8000fec <MX_USART1_UART_Init+0xf8>)
 8000f4a:	f001 fcac 	bl	80028a6 <LL_GPIO_Init>

  /* USART1 DMA Init */

  /* USART1_TX Init */
  LL_DMA_SetChannelSelection(DMA2, LL_DMA_STREAM_7, LL_DMA_CHANNEL_4);
 8000f4e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000f52:	2107      	movs	r1, #7
 8000f54:	4826      	ldr	r0, [pc, #152]	@ (8000ff0 <MX_USART1_UART_Init+0xfc>)
 8000f56:	f7ff fcbf 	bl	80008d8 <LL_DMA_SetChannelSelection>

  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_7, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8000f5a:	2240      	movs	r2, #64	@ 0x40
 8000f5c:	2107      	movs	r1, #7
 8000f5e:	4824      	ldr	r0, [pc, #144]	@ (8000ff0 <MX_USART1_UART_Init+0xfc>)
 8000f60:	f7ff fbbe 	bl	80006e0 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_7, LL_DMA_PRIORITY_MEDIUM);
 8000f64:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000f68:	2107      	movs	r1, #7
 8000f6a:	4821      	ldr	r0, [pc, #132]	@ (8000ff0 <MX_USART1_UART_Init+0xfc>)
 8000f6c:	f7ff fc90 	bl	8000890 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_STREAM_7, LL_DMA_MODE_NORMAL);
 8000f70:	2200      	movs	r2, #0
 8000f72:	2107      	movs	r1, #7
 8000f74:	481e      	ldr	r0, [pc, #120]	@ (8000ff0 <MX_USART1_UART_Init+0xfc>)
 8000f76:	f7ff fbd7 	bl	8000728 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_7, LL_DMA_PERIPH_NOINCREMENT);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2107      	movs	r1, #7
 8000f7e:	481c      	ldr	r0, [pc, #112]	@ (8000ff0 <MX_USART1_UART_Init+0xfc>)
 8000f80:	f7ff fbf6 	bl	8000770 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_7, LL_DMA_MEMORY_INCREMENT);
 8000f84:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f88:	2107      	movs	r1, #7
 8000f8a:	4819      	ldr	r0, [pc, #100]	@ (8000ff0 <MX_USART1_UART_Init+0xfc>)
 8000f8c:	f7ff fc14 	bl	80007b8 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_7, LL_DMA_PDATAALIGN_BYTE);
 8000f90:	2200      	movs	r2, #0
 8000f92:	2107      	movs	r1, #7
 8000f94:	4816      	ldr	r0, [pc, #88]	@ (8000ff0 <MX_USART1_UART_Init+0xfc>)
 8000f96:	f7ff fc33 	bl	8000800 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_7, LL_DMA_MDATAALIGN_BYTE);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2107      	movs	r1, #7
 8000f9e:	4814      	ldr	r0, [pc, #80]	@ (8000ff0 <MX_USART1_UART_Init+0xfc>)
 8000fa0:	f7ff fc52 	bl	8000848 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_7);
 8000fa4:	2107      	movs	r1, #7
 8000fa6:	4812      	ldr	r0, [pc, #72]	@ (8000ff0 <MX_USART1_UART_Init+0xfc>)
 8000fa8:	f7ff fcba 	bl	8000920 <LL_DMA_DisableFifoMode>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8000fac:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000fb0:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000fbe:	230c      	movs	r3, #12
 8000fc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 8000fca:	f107 031c 	add.w	r3, r7, #28
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4808      	ldr	r0, [pc, #32]	@ (8000ff4 <MX_USART1_UART_Init+0x100>)
 8000fd2:	f002 f9d1 	bl	8003378 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8000fd6:	4807      	ldr	r0, [pc, #28]	@ (8000ff4 <MX_USART1_UART_Init+0x100>)
 8000fd8:	f7ff fe9e 	bl	8000d18 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8000fdc:	4805      	ldr	r0, [pc, #20]	@ (8000ff4 <MX_USART1_UART_Init+0x100>)
 8000fde:	f7ff fe8b 	bl	8000cf8 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fe2:	bf00      	nop
 8000fe4:	3738      	adds	r7, #56	@ 0x38
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40020000 	.word	0x40020000
 8000ff0:	40026400 	.word	0x40026400
 8000ff4:	40011000 	.word	0x40011000

08000ff8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA2);
 8000ffc:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 8001000:	f7ff fde8 	bl	8000bd4 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA2_Stream7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Stream7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8001004:	f7ff fae2 	bl	80005cc <__NVIC_GetPriorityGrouping>
 8001008:	4603      	mov	r3, r0
 800100a:	2200      	movs	r2, #0
 800100c:	2105      	movs	r1, #5
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff fb32 	bl	8000678 <NVIC_EncodePriority>
 8001014:	4603      	mov	r3, r0
 8001016:	4619      	mov	r1, r3
 8001018:	2046      	movs	r0, #70	@ 0x46
 800101a:	f7ff fb03 	bl	8000624 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800101e:	2046      	movs	r0, #70	@ 0x46
 8001020:	f7ff fae2 	bl	80005e8 <__NVIC_EnableIRQ>

}
 8001024:	bf00      	nop
 8001026:	bd80      	pop	{r7, pc}

08001028 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800102c:	2004      	movs	r0, #4
 800102e:	f7ff fdd1 	bl	8000bd4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8001032:	2080      	movs	r0, #128	@ 0x80
 8001034:	f7ff fdce 	bl	8000bd4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001038:	2001      	movs	r0, #1
 800103a:	f7ff fdcb 	bl	8000bd4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800103e:	2002      	movs	r0, #2
 8001040:	f7ff fdc8 	bl	8000bd4 <LL_AHB1_GRP1_EnableClock>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001044:	bf00      	nop
 8001046:	bd80      	pop	{r7, pc}

08001048 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001050:	2001      	movs	r0, #1
 8001052:	f002 fb25 	bl	80036a0 <osDelay>
 8001056:	e7fb      	b.n	8001050 <StartDefaultTask+0x8>

08001058 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a04      	ldr	r2, [pc, #16]	@ (8001078 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d101      	bne.n	800106e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800106a:	f000 ff1b 	bl	8001ea4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800106e:	bf00      	nop
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40010000 	.word	0x40010000

0800107c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001080:	b672      	cpsid	i
}
 8001082:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001084:	bf00      	nop
 8001086:	e7fd      	b.n	8001084 <Error_Handler+0x8>

08001088 <RingBufferInit>:
 *********************************************************************************************************************/

/**********************************************************************************************************************
 * Definitions of exported functions
 *********************************************************************************************************************/
sRingBuffer_t *RingBufferInit (size_t capacity) {
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
    if (capacity <= 0) {
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d101      	bne.n	800109a <RingBufferInit+0x12>
        return NULL;
 8001096:	2300      	movs	r3, #0
 8001098:	e028      	b.n	80010ec <RingBufferInit+0x64>
    }

    sRingBuffer_t *r_buffer = (sRingBuffer_t *)calloc(1, sizeof(sRingBuffer_t));
 800109a:	2114      	movs	r1, #20
 800109c:	2001      	movs	r0, #1
 800109e:	f005 fcb3 	bl	8006a08 <calloc>
 80010a2:	4603      	mov	r3, r0
 80010a4:	60fb      	str	r3, [r7, #12]
    if (r_buffer == NULL) {
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d101      	bne.n	80010b0 <RingBufferInit+0x28>
        return NULL;
 80010ac:	2300      	movs	r3, #0
 80010ae:	e01d      	b.n	80010ec <RingBufferInit+0x64>
    }

    r_buffer->buffer = (uint8_t *)calloc(capacity, sizeof(uint8_t));
 80010b0:	2101      	movs	r1, #1
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f005 fca8 	bl	8006a08 <calloc>
 80010b8:	4603      	mov	r3, r0
 80010ba:	461a      	mov	r2, r3
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	601a      	str	r2, [r3, #0]
    if (r_buffer->buffer == NULL) {
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d104      	bne.n	80010d2 <RingBufferInit+0x4a>
        free(r_buffer);
 80010c8:	68f8      	ldr	r0, [r7, #12]
 80010ca:	f005 fcc1 	bl	8006a50 <free>
        return NULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	e00c      	b.n	80010ec <RingBufferInit+0x64>
    }

    r_buffer->capacity = capacity;
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	687a      	ldr	r2, [r7, #4]
 80010d6:	605a      	str	r2, [r3, #4]
    r_buffer->head = 0;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	2200      	movs	r2, #0
 80010dc:	609a      	str	r2, [r3, #8]
    r_buffer->tail = 0;
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	2200      	movs	r2, #0
 80010e2:	60da      	str	r2, [r3, #12]
    r_buffer->count = 0;
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	2200      	movs	r2, #0
 80010e8:	611a      	str	r2, [r3, #16]

    return r_buffer;
 80010ea:	68fb      	ldr	r3, [r7, #12]
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	3710      	adds	r7, #16
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <RingBufferIsEmpty>:


bool RingBufferIsEmpty (sRingBuffer_t *r_buffer) {
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
    if (r_buffer == NULL) {
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d101      	bne.n	8001106 <RingBufferIsEmpty+0x12>
        return true;
 8001102:	2301      	movs	r3, #1
 8001104:	e006      	b.n	8001114 <RingBufferIsEmpty+0x20>
    }

    return r_buffer->count == 0;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	691b      	ldr	r3, [r3, #16]
 800110a:	2b00      	cmp	r3, #0
 800110c:	bf0c      	ite	eq
 800110e:	2301      	moveq	r3, #1
 8001110:	2300      	movne	r3, #0
 8001112:	b2db      	uxtb	r3, r3
}
 8001114:	4618      	mov	r0, r3
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <RingBufferIsFull>:

bool RingBufferIsFull (sRingBuffer_t *r_buffer) {
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
    if (r_buffer == NULL) {
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d101      	bne.n	8001132 <RingBufferIsFull+0x12>
        return true;
 800112e:	2301      	movs	r3, #1
 8001130:	e008      	b.n	8001144 <RingBufferIsFull+0x24>
    }

    return r_buffer->count == r_buffer->capacity;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	691a      	ldr	r2, [r3, #16]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	429a      	cmp	r2, r3
 800113c:	bf0c      	ite	eq
 800113e:	2301      	moveq	r3, #1
 8001140:	2300      	movne	r3, #0
 8001142:	b2db      	uxtb	r3, r3
}
 8001144:	4618      	mov	r0, r3
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <RingBufferEnqueue>:


bool RingBufferEnqueue (sRingBuffer_t *r_buffer, uint8_t data) {
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	460b      	mov	r3, r1
 800115a:	70fb      	strb	r3, [r7, #3]
    if (r_buffer == NULL) {
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d101      	bne.n	8001166 <RingBufferEnqueue+0x16>
        return false;
 8001162:	2300      	movs	r3, #0
 8001164:	e030      	b.n	80011c8 <RingBufferEnqueue+0x78>
    }

    if (RingBufferIsFull(r_buffer)) {
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f7ff ffda 	bl	8001120 <RingBufferIsFull>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d00b      	beq.n	800118a <RingBufferEnqueue+0x3a>
        r_buffer->tail = (r_buffer->tail + 1) % r_buffer->capacity;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	68db      	ldr	r3, [r3, #12]
 8001176:	3301      	adds	r3, #1
 8001178:	687a      	ldr	r2, [r7, #4]
 800117a:	6852      	ldr	r2, [r2, #4]
 800117c:	fbb3 f1f2 	udiv	r1, r3, r2
 8001180:	fb01 f202 	mul.w	r2, r1, r2
 8001184:	1a9a      	subs	r2, r3, r2
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	60da      	str	r2, [r3, #12]
    }

    r_buffer->buffer[r_buffer->head] = data;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	4413      	add	r3, r2
 8001194:	78fa      	ldrb	r2, [r7, #3]
 8001196:	701a      	strb	r2, [r3, #0]
    r_buffer->head = (r_buffer->head + 1) % r_buffer->capacity;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	3301      	adds	r3, #1
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	6852      	ldr	r2, [r2, #4]
 80011a2:	fbb3 f1f2 	udiv	r1, r3, r2
 80011a6:	fb01 f202 	mul.w	r2, r1, r2
 80011aa:	1a9a      	subs	r2, r3, r2
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	609a      	str	r2, [r3, #8]

    if (r_buffer->count < r_buffer->capacity) {
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	691a      	ldr	r2, [r3, #16]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d204      	bcs.n	80011c6 <RingBufferEnqueue+0x76>
        r_buffer->count++;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	691b      	ldr	r3, [r3, #16]
 80011c0:	1c5a      	adds	r2, r3, #1
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	611a      	str	r2, [r3, #16]
    }

    return true;
 80011c6:	2301      	movs	r3, #1
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <RingBufferDequeue>:

bool RingBufferDequeue (sRingBuffer_t *r_buffer, uint8_t *data) {
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	6039      	str	r1, [r7, #0]
    if ((RingBufferIsEmpty(r_buffer)) || (data == NULL)) {
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f7ff ff8a 	bl	80010f4 <RingBufferIsEmpty>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d102      	bne.n	80011ec <RingBufferDequeue+0x1c>
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d101      	bne.n	80011f0 <RingBufferDequeue+0x20>
        return false;
 80011ec:	2300      	movs	r3, #0
 80011ee:	e019      	b.n	8001224 <RingBufferDequeue+0x54>
    }

    *data = r_buffer->buffer[r_buffer->tail];
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	4413      	add	r3, r2
 80011fa:	781a      	ldrb	r2, [r3, #0]
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	701a      	strb	r2, [r3, #0]
    r_buffer->tail = (r_buffer->tail + 1) % r_buffer->capacity;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	3301      	adds	r3, #1
 8001206:	687a      	ldr	r2, [r7, #4]
 8001208:	6852      	ldr	r2, [r2, #4]
 800120a:	fbb3 f1f2 	udiv	r1, r3, r2
 800120e:	fb01 f202 	mul.w	r2, r1, r2
 8001212:	1a9a      	subs	r2, r3, r2
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	60da      	str	r2, [r3, #12]
    r_buffer->count--;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	691b      	ldr	r3, [r3, #16]
 800121c:	1e5a      	subs	r2, r3, #1
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	611a      	str	r2, [r3, #16]

    return true;
 8001222:	2301      	movs	r3, #1
}
 8001224:	4618      	mov	r0, r3
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	607b      	str	r3, [r7, #4]
 8001236:	4b12      	ldr	r3, [pc, #72]	@ (8001280 <HAL_MspInit+0x54>)
 8001238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800123a:	4a11      	ldr	r2, [pc, #68]	@ (8001280 <HAL_MspInit+0x54>)
 800123c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001240:	6453      	str	r3, [r2, #68]	@ 0x44
 8001242:	4b0f      	ldr	r3, [pc, #60]	@ (8001280 <HAL_MspInit+0x54>)
 8001244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001246:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800124a:	607b      	str	r3, [r7, #4]
 800124c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	603b      	str	r3, [r7, #0]
 8001252:	4b0b      	ldr	r3, [pc, #44]	@ (8001280 <HAL_MspInit+0x54>)
 8001254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001256:	4a0a      	ldr	r2, [pc, #40]	@ (8001280 <HAL_MspInit+0x54>)
 8001258:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800125c:	6413      	str	r3, [r2, #64]	@ 0x40
 800125e:	4b08      	ldr	r3, [pc, #32]	@ (8001280 <HAL_MspInit+0x54>)
 8001260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001262:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001266:	603b      	str	r3, [r7, #0]
 8001268:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800126a:	2200      	movs	r2, #0
 800126c:	210f      	movs	r1, #15
 800126e:	f06f 0001 	mvn.w	r0, #1
 8001272:	f000 fee3 	bl	800203c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001276:	bf00      	nop
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	40023800 	.word	0x40023800

08001284 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b08c      	sub	sp, #48	@ 0x30
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800128c:	2300      	movs	r3, #0
 800128e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001290:	2300      	movs	r3, #0
 8001292:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001294:	2300      	movs	r3, #0
 8001296:	60bb      	str	r3, [r7, #8]
 8001298:	4b2e      	ldr	r3, [pc, #184]	@ (8001354 <HAL_InitTick+0xd0>)
 800129a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800129c:	4a2d      	ldr	r2, [pc, #180]	@ (8001354 <HAL_InitTick+0xd0>)
 800129e:	f043 0301 	orr.w	r3, r3, #1
 80012a2:	6453      	str	r3, [r2, #68]	@ 0x44
 80012a4:	4b2b      	ldr	r3, [pc, #172]	@ (8001354 <HAL_InitTick+0xd0>)
 80012a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012a8:	f003 0301 	and.w	r3, r3, #1
 80012ac:	60bb      	str	r3, [r7, #8]
 80012ae:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80012b0:	f107 020c 	add.w	r2, r7, #12
 80012b4:	f107 0310 	add.w	r3, r7, #16
 80012b8:	4611      	mov	r1, r2
 80012ba:	4618      	mov	r0, r3
 80012bc:	f000 ff08 	bl	80020d0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80012c0:	f000 fef2 	bl	80020a8 <HAL_RCC_GetPCLK2Freq>
 80012c4:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80012c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012c8:	4a23      	ldr	r2, [pc, #140]	@ (8001358 <HAL_InitTick+0xd4>)
 80012ca:	fba2 2303 	umull	r2, r3, r2, r3
 80012ce:	0c9b      	lsrs	r3, r3, #18
 80012d0:	3b01      	subs	r3, #1
 80012d2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80012d4:	4b21      	ldr	r3, [pc, #132]	@ (800135c <HAL_InitTick+0xd8>)
 80012d6:	4a22      	ldr	r2, [pc, #136]	@ (8001360 <HAL_InitTick+0xdc>)
 80012d8:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80012da:	4b20      	ldr	r3, [pc, #128]	@ (800135c <HAL_InitTick+0xd8>)
 80012dc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80012e0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80012e2:	4a1e      	ldr	r2, [pc, #120]	@ (800135c <HAL_InitTick+0xd8>)
 80012e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012e6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80012e8:	4b1c      	ldr	r3, [pc, #112]	@ (800135c <HAL_InitTick+0xd8>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ee:	4b1b      	ldr	r3, [pc, #108]	@ (800135c <HAL_InitTick+0xd8>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012f4:	4b19      	ldr	r3, [pc, #100]	@ (800135c <HAL_InitTick+0xd8>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80012fa:	4818      	ldr	r0, [pc, #96]	@ (800135c <HAL_InitTick+0xd8>)
 80012fc:	f000 ff1a 	bl	8002134 <HAL_TIM_Base_Init>
 8001300:	4603      	mov	r3, r0
 8001302:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001306:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800130a:	2b00      	cmp	r3, #0
 800130c:	d11b      	bne.n	8001346 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800130e:	4813      	ldr	r0, [pc, #76]	@ (800135c <HAL_InitTick+0xd8>)
 8001310:	f000 ff6a 	bl	80021e8 <HAL_TIM_Base_Start_IT>
 8001314:	4603      	mov	r3, r0
 8001316:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800131a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800131e:	2b00      	cmp	r3, #0
 8001320:	d111      	bne.n	8001346 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001322:	2019      	movs	r0, #25
 8001324:	f000 fea6 	bl	8002074 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2b0f      	cmp	r3, #15
 800132c:	d808      	bhi.n	8001340 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800132e:	2200      	movs	r2, #0
 8001330:	6879      	ldr	r1, [r7, #4]
 8001332:	2019      	movs	r0, #25
 8001334:	f000 fe82 	bl	800203c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001338:	4a0a      	ldr	r2, [pc, #40]	@ (8001364 <HAL_InitTick+0xe0>)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6013      	str	r3, [r2, #0]
 800133e:	e002      	b.n	8001346 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001346:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800134a:	4618      	mov	r0, r3
 800134c:	3730      	adds	r7, #48	@ 0x30
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40023800 	.word	0x40023800
 8001358:	431bde83 	.word	0x431bde83
 800135c:	20000084 	.word	0x20000084
 8001360:	40010000 	.word	0x40010000
 8001364:	20000004 	.word	0x20000004

08001368 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800136c:	bf00      	nop
 800136e:	e7fd      	b.n	800136c <NMI_Handler+0x4>

08001370 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001374:	bf00      	nop
 8001376:	e7fd      	b.n	8001374 <HardFault_Handler+0x4>

08001378 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800137c:	bf00      	nop
 800137e:	e7fd      	b.n	800137c <MemManage_Handler+0x4>

08001380 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001384:	bf00      	nop
 8001386:	e7fd      	b.n	8001384 <BusFault_Handler+0x4>

08001388 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800138c:	bf00      	nop
 800138e:	e7fd      	b.n	800138c <UsageFault_Handler+0x4>

08001390 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001394:	bf00      	nop
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
	...

080013a0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80013a4:	4802      	ldr	r0, [pc, #8]	@ (80013b0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80013a6:	f000 ff81 	bl	80022ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	20000084 	.word	0x20000084

080013b4 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80013b8:	bf00      	nop
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
	...

080013c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013cc:	4a14      	ldr	r2, [pc, #80]	@ (8001420 <_sbrk+0x5c>)
 80013ce:	4b15      	ldr	r3, [pc, #84]	@ (8001424 <_sbrk+0x60>)
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013d8:	4b13      	ldr	r3, [pc, #76]	@ (8001428 <_sbrk+0x64>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d102      	bne.n	80013e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013e0:	4b11      	ldr	r3, [pc, #68]	@ (8001428 <_sbrk+0x64>)
 80013e2:	4a12      	ldr	r2, [pc, #72]	@ (800142c <_sbrk+0x68>)
 80013e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013e6:	4b10      	ldr	r3, [pc, #64]	@ (8001428 <_sbrk+0x64>)
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4413      	add	r3, r2
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d207      	bcs.n	8001404 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013f4:	f005 fc0a 	bl	8006c0c <__errno>
 80013f8:	4603      	mov	r3, r0
 80013fa:	220c      	movs	r2, #12
 80013fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001402:	e009      	b.n	8001418 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001404:	4b08      	ldr	r3, [pc, #32]	@ (8001428 <_sbrk+0x64>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800140a:	4b07      	ldr	r3, [pc, #28]	@ (8001428 <_sbrk+0x64>)
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4413      	add	r3, r2
 8001412:	4a05      	ldr	r2, [pc, #20]	@ (8001428 <_sbrk+0x64>)
 8001414:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001416:	68fb      	ldr	r3, [r7, #12]
}
 8001418:	4618      	mov	r0, r3
 800141a:	3718      	adds	r7, #24
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	20018000 	.word	0x20018000
 8001424:	00000400 	.word	0x00000400
 8001428:	200000cc 	.word	0x200000cc
 800142c:	20004b98 	.word	0x20004b98

08001430 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001434:	4b06      	ldr	r3, [pc, #24]	@ (8001450 <SystemInit+0x20>)
 8001436:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800143a:	4a05      	ldr	r2, [pc, #20]	@ (8001450 <SystemInit+0x20>)
 800143c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001440:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001444:	bf00      	nop
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	e000ed00 	.word	0xe000ed00

08001454 <UART_API_Task>:
static void UART_API_Task (void *argument);
static bool UART_API_IsDelimiterReceived (sUartApiTaskData_t *task_data);
/**********************************************************************************************************************
 * Definitions of private functions
 *********************************************************************************************************************/
static void UART_API_Task (void *argument) {
 8001454:	b590      	push	{r4, r7, lr}
 8001456:	b089      	sub	sp, #36	@ 0x24
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
    while (1) {
        for (eUartApiPort_t port = eUartApiPort_First; port < eUartApiPort_Last; port++) {
 800145c:	2300      	movs	r3, #0
 800145e:	77fb      	strb	r3, [r7, #31]
 8001460:	e13d      	b.n	80016de <UART_API_Task+0x28a>
            if (g_dynamic_uart_api_lut[port].is_initialized == false) {
 8001462:	7ffa      	ldrb	r2, [r7, #31]
 8001464:	49a0      	ldr	r1, [pc, #640]	@ (80016e8 <UART_API_Task+0x294>)
 8001466:	4613      	mov	r3, r2
 8001468:	00db      	lsls	r3, r3, #3
 800146a:	1a9b      	subs	r3, r3, r2
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	440b      	add	r3, r1
 8001470:	3315      	adds	r3, #21
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	f083 0301 	eor.w	r3, r3, #1
 8001478:	b2db      	uxtb	r3, r3
 800147a:	2b00      	cmp	r3, #0
 800147c:	f040 8123 	bne.w	80016c6 <UART_API_Task+0x272>
                continue;
            }

            switch (g_dynamic_uart_api_lut[port].state) {
 8001480:	7ffa      	ldrb	r2, [r7, #31]
 8001482:	4999      	ldr	r1, [pc, #612]	@ (80016e8 <UART_API_Task+0x294>)
 8001484:	4613      	mov	r3, r2
 8001486:	00db      	lsls	r3, r3, #3
 8001488:	1a9b      	subs	r3, r3, r2
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	440b      	add	r3, r1
 800148e:	3314      	adds	r3, #20
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	2b02      	cmp	r3, #2
 8001494:	f000 80e5 	beq.w	8001662 <UART_API_Task+0x20e>
 8001498:	2b02      	cmp	r3, #2
 800149a:	f300 8116 	bgt.w	80016ca <UART_API_Task+0x276>
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d003      	beq.n	80014aa <UART_API_Task+0x56>
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	f000 80c7 	beq.w	8001636 <UART_API_Task+0x1e2>
                    g_dynamic_uart_api_lut[port].state = eUartApiState_Initialize;
                    break;
                }
                default: {
//                    DEBUG_API_Print(g_static_uart_api_lut[port].uart_port, "API Task state was not found\n");
                    break;
 80014a8:	e10f      	b.n	80016ca <UART_API_Task+0x276>
                    g_dynamic_uart_api_lut[port].buffer = HEAP_API_Calloc(g_static_uart_api_lut[port].buffer_size, sizeof(char));
 80014aa:	7ffa      	ldrb	r2, [r7, #31]
 80014ac:	498f      	ldr	r1, [pc, #572]	@ (80016ec <UART_API_Task+0x298>)
 80014ae:	4613      	mov	r3, r2
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	4413      	add	r3, r2
 80014b4:	011b      	lsls	r3, r3, #4
 80014b6:	440b      	add	r3, r1
 80014b8:	3304      	adds	r3, #4
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	7ffc      	ldrb	r4, [r7, #31]
 80014be:	2201      	movs	r2, #1
 80014c0:	4619      	mov	r1, r3
 80014c2:	2001      	movs	r0, #1
 80014c4:	f7ff f83e 	bl	8000544 <HEAP_API_Alloc>
 80014c8:	4602      	mov	r2, r0
 80014ca:	4987      	ldr	r1, [pc, #540]	@ (80016e8 <UART_API_Task+0x294>)
 80014cc:	4623      	mov	r3, r4
 80014ce:	00db      	lsls	r3, r3, #3
 80014d0:	1b1b      	subs	r3, r3, r4
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	440b      	add	r3, r1
 80014d6:	3304      	adds	r3, #4
 80014d8:	601a      	str	r2, [r3, #0]
                    if (g_dynamic_uart_api_lut[port].buffer == NULL) {
 80014da:	7ffa      	ldrb	r2, [r7, #31]
 80014dc:	4982      	ldr	r1, [pc, #520]	@ (80016e8 <UART_API_Task+0x294>)
 80014de:	4613      	mov	r3, r2
 80014e0:	00db      	lsls	r3, r3, #3
 80014e2:	1a9b      	subs	r3, r3, r2
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	440b      	add	r3, r1
 80014e8:	3304      	adds	r3, #4
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	f000 80ee 	beq.w	80016ce <UART_API_Task+0x27a>
                    g_dynamic_uart_api_lut[port].index = 0;
 80014f2:	7ffa      	ldrb	r2, [r7, #31]
 80014f4:	497c      	ldr	r1, [pc, #496]	@ (80016e8 <UART_API_Task+0x294>)
 80014f6:	4613      	mov	r3, r2
 80014f8:	00db      	lsls	r3, r3, #3
 80014fa:	1a9b      	subs	r3, r3, r2
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	440b      	add	r3, r1
 8001500:	3308      	adds	r3, #8
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]
                    g_dynamic_uart_api_lut[port].state = eUartApiState_Collect;
 8001506:	7ffa      	ldrb	r2, [r7, #31]
 8001508:	4977      	ldr	r1, [pc, #476]	@ (80016e8 <UART_API_Task+0x294>)
 800150a:	4613      	mov	r3, r2
 800150c:	00db      	lsls	r3, r3, #3
 800150e:	1a9b      	subs	r3, r3, r2
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	440b      	add	r3, r1
 8001514:	3314      	adds	r3, #20
 8001516:	2201      	movs	r2, #1
 8001518:	701a      	strb	r2, [r3, #0]
                    while (UART_Driver_Read(port, &symbol) == true) {
 800151a:	e08c      	b.n	8001636 <UART_API_Task+0x1e2>
                        g_dynamic_uart_api_lut[port].buffer[g_dynamic_uart_api_lut[port].index] = symbol;
 800151c:	7ffa      	ldrb	r2, [r7, #31]
 800151e:	4972      	ldr	r1, [pc, #456]	@ (80016e8 <UART_API_Task+0x294>)
 8001520:	4613      	mov	r3, r2
 8001522:	00db      	lsls	r3, r3, #3
 8001524:	1a9b      	subs	r3, r3, r2
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	440b      	add	r3, r1
 800152a:	3304      	adds	r3, #4
 800152c:	6819      	ldr	r1, [r3, #0]
 800152e:	7ffa      	ldrb	r2, [r7, #31]
 8001530:	486d      	ldr	r0, [pc, #436]	@ (80016e8 <UART_API_Task+0x294>)
 8001532:	4613      	mov	r3, r2
 8001534:	00db      	lsls	r3, r3, #3
 8001536:	1a9b      	subs	r3, r3, r2
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	4403      	add	r3, r0
 800153c:	3308      	adds	r3, #8
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	440b      	add	r3, r1
 8001542:	7dfa      	ldrb	r2, [r7, #23]
 8001544:	701a      	strb	r2, [r3, #0]
                        g_dynamic_uart_api_lut[port].index++;
 8001546:	7ffa      	ldrb	r2, [r7, #31]
 8001548:	4967      	ldr	r1, [pc, #412]	@ (80016e8 <UART_API_Task+0x294>)
 800154a:	4613      	mov	r3, r2
 800154c:	00db      	lsls	r3, r3, #3
 800154e:	1a9b      	subs	r3, r3, r2
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	440b      	add	r3, r1
 8001554:	3308      	adds	r3, #8
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	1c59      	adds	r1, r3, #1
 800155a:	4863      	ldr	r0, [pc, #396]	@ (80016e8 <UART_API_Task+0x294>)
 800155c:	4613      	mov	r3, r2
 800155e:	00db      	lsls	r3, r3, #3
 8001560:	1a9b      	subs	r3, r3, r2
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	4403      	add	r3, r0
 8001566:	3308      	adds	r3, #8
 8001568:	6019      	str	r1, [r3, #0]
                        if (g_dynamic_uart_api_lut[port].index >= g_static_uart_api_lut[port].buffer_size) {
 800156a:	7ffa      	ldrb	r2, [r7, #31]
 800156c:	495e      	ldr	r1, [pc, #376]	@ (80016e8 <UART_API_Task+0x294>)
 800156e:	4613      	mov	r3, r2
 8001570:	00db      	lsls	r3, r3, #3
 8001572:	1a9b      	subs	r3, r3, r2
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	440b      	add	r3, r1
 8001578:	3308      	adds	r3, #8
 800157a:	6819      	ldr	r1, [r3, #0]
 800157c:	7ffa      	ldrb	r2, [r7, #31]
 800157e:	485b      	ldr	r0, [pc, #364]	@ (80016ec <UART_API_Task+0x298>)
 8001580:	4613      	mov	r3, r2
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	4413      	add	r3, r2
 8001586:	011b      	lsls	r3, r3, #4
 8001588:	4403      	add	r3, r0
 800158a:	3304      	adds	r3, #4
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4299      	cmp	r1, r3
 8001590:	d320      	bcc.n	80015d4 <UART_API_Task+0x180>
                            memset(g_dynamic_uart_api_lut[port].buffer, 0, g_static_uart_api_lut[port].buffer_size);
 8001592:	7ffa      	ldrb	r2, [r7, #31]
 8001594:	4954      	ldr	r1, [pc, #336]	@ (80016e8 <UART_API_Task+0x294>)
 8001596:	4613      	mov	r3, r2
 8001598:	00db      	lsls	r3, r3, #3
 800159a:	1a9b      	subs	r3, r3, r2
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	440b      	add	r3, r1
 80015a0:	3304      	adds	r3, #4
 80015a2:	6818      	ldr	r0, [r3, #0]
 80015a4:	7ffa      	ldrb	r2, [r7, #31]
 80015a6:	4951      	ldr	r1, [pc, #324]	@ (80016ec <UART_API_Task+0x298>)
 80015a8:	4613      	mov	r3, r2
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	4413      	add	r3, r2
 80015ae:	011b      	lsls	r3, r3, #4
 80015b0:	440b      	add	r3, r1
 80015b2:	3304      	adds	r3, #4
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	461a      	mov	r2, r3
 80015b8:	2100      	movs	r1, #0
 80015ba:	f005 fb0f 	bl	8006bdc <memset>
                            g_dynamic_uart_api_lut[port].index = 0;
 80015be:	7ffa      	ldrb	r2, [r7, #31]
 80015c0:	4949      	ldr	r1, [pc, #292]	@ (80016e8 <UART_API_Task+0x294>)
 80015c2:	4613      	mov	r3, r2
 80015c4:	00db      	lsls	r3, r3, #3
 80015c6:	1a9b      	subs	r3, r3, r2
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	440b      	add	r3, r1
 80015cc:	3308      	adds	r3, #8
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]
                            break;
 80015d2:	e03b      	b.n	800164c <UART_API_Task+0x1f8>
                        if (symbol != g_dynamic_uart_api_lut[port].delimiter[g_dynamic_uart_api_lut[port].delimiter_length - 1]) {
 80015d4:	7ffa      	ldrb	r2, [r7, #31]
 80015d6:	4944      	ldr	r1, [pc, #272]	@ (80016e8 <UART_API_Task+0x294>)
 80015d8:	4613      	mov	r3, r2
 80015da:	00db      	lsls	r3, r3, #3
 80015dc:	1a9b      	subs	r3, r3, r2
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	440b      	add	r3, r1
 80015e2:	330c      	adds	r3, #12
 80015e4:	6819      	ldr	r1, [r3, #0]
 80015e6:	7ffa      	ldrb	r2, [r7, #31]
 80015e8:	483f      	ldr	r0, [pc, #252]	@ (80016e8 <UART_API_Task+0x294>)
 80015ea:	4613      	mov	r3, r2
 80015ec:	00db      	lsls	r3, r3, #3
 80015ee:	1a9b      	subs	r3, r3, r2
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	4403      	add	r3, r0
 80015f4:	3310      	adds	r3, #16
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	3b01      	subs	r3, #1
 80015fa:	440b      	add	r3, r1
 80015fc:	781a      	ldrb	r2, [r3, #0]
 80015fe:	7dfb      	ldrb	r3, [r7, #23]
 8001600:	429a      	cmp	r2, r3
 8001602:	d117      	bne.n	8001634 <UART_API_Task+0x1e0>
                        if (UART_API_IsDelimiterReceived(&g_dynamic_uart_api_lut[port]) == true) {
 8001604:	7ffa      	ldrb	r2, [r7, #31]
 8001606:	4613      	mov	r3, r2
 8001608:	00db      	lsls	r3, r3, #3
 800160a:	1a9b      	subs	r3, r3, r2
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	4a36      	ldr	r2, [pc, #216]	@ (80016e8 <UART_API_Task+0x294>)
 8001610:	4413      	add	r3, r2
 8001612:	4618      	mov	r0, r3
 8001614:	f000 f86c 	bl	80016f0 <UART_API_IsDelimiterReceived>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d00b      	beq.n	8001636 <UART_API_Task+0x1e2>
                            g_dynamic_uart_api_lut[port].state = eUartApiState_Flush;
 800161e:	7ffa      	ldrb	r2, [r7, #31]
 8001620:	4931      	ldr	r1, [pc, #196]	@ (80016e8 <UART_API_Task+0x294>)
 8001622:	4613      	mov	r3, r2
 8001624:	00db      	lsls	r3, r3, #3
 8001626:	1a9b      	subs	r3, r3, r2
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	440b      	add	r3, r1
 800162c:	3314      	adds	r3, #20
 800162e:	2202      	movs	r2, #2
 8001630:	701a      	strb	r2, [r3, #0]
 8001632:	e000      	b.n	8001636 <UART_API_Task+0x1e2>
                            continue;
 8001634:	bf00      	nop
                    while (UART_Driver_Read(port, &symbol) == true) {
 8001636:	f107 0217 	add.w	r2, r7, #23
 800163a:	7ffb      	ldrb	r3, [r7, #31]
 800163c:	4611      	mov	r1, r2
 800163e:	4618      	mov	r0, r3
 8001640:	f000 fbc0 	bl	8001dc4 <UART_Driver_Read>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	f47f af68 	bne.w	800151c <UART_API_Task+0xc8>
                    if (g_dynamic_uart_api_lut[port].state != eUartApiState_Flush) {
 800164c:	7ffa      	ldrb	r2, [r7, #31]
 800164e:	4926      	ldr	r1, [pc, #152]	@ (80016e8 <UART_API_Task+0x294>)
 8001650:	4613      	mov	r3, r2
 8001652:	00db      	lsls	r3, r3, #3
 8001654:	1a9b      	subs	r3, r3, r2
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	440b      	add	r3, r1
 800165a:	3314      	adds	r3, #20
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	2b02      	cmp	r3, #2
 8001660:	d137      	bne.n	80016d2 <UART_API_Task+0x27e>
                    sMessage_t message = {.message = g_dynamic_uart_api_lut[port].buffer, .message_length = g_dynamic_uart_api_lut[port].index};
 8001662:	7ffa      	ldrb	r2, [r7, #31]
 8001664:	4920      	ldr	r1, [pc, #128]	@ (80016e8 <UART_API_Task+0x294>)
 8001666:	4613      	mov	r3, r2
 8001668:	00db      	lsls	r3, r3, #3
 800166a:	1a9b      	subs	r3, r3, r2
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	440b      	add	r3, r1
 8001670:	3304      	adds	r3, #4
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	60fb      	str	r3, [r7, #12]
 8001676:	7ffa      	ldrb	r2, [r7, #31]
 8001678:	491b      	ldr	r1, [pc, #108]	@ (80016e8 <UART_API_Task+0x294>)
 800167a:	4613      	mov	r3, r2
 800167c:	00db      	lsls	r3, r3, #3
 800167e:	1a9b      	subs	r3, r3, r2
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	440b      	add	r3, r1
 8001684:	3308      	adds	r3, #8
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	613b      	str	r3, [r7, #16]
                    osStatus_t status = osMessageQueuePut(g_dynamic_uart_api_lut[port].message_queue_id, &message, MESSAGE_PRIORITY, osWaitForever);
 800168a:	7ffa      	ldrb	r2, [r7, #31]
 800168c:	4916      	ldr	r1, [pc, #88]	@ (80016e8 <UART_API_Task+0x294>)
 800168e:	4613      	mov	r3, r2
 8001690:	00db      	lsls	r3, r3, #3
 8001692:	1a9b      	subs	r3, r3, r2
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	440b      	add	r3, r1
 8001698:	6818      	ldr	r0, [r3, #0]
 800169a:	f107 010c 	add.w	r1, r7, #12
 800169e:	f04f 33ff 	mov.w	r3, #4294967295
 80016a2:	2200      	movs	r2, #0
 80016a4:	f002 f998 	bl	80039d8 <osMessageQueuePut>
 80016a8:	61b8      	str	r0, [r7, #24]
                    if (status != osOK) {
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d112      	bne.n	80016d6 <UART_API_Task+0x282>
                    g_dynamic_uart_api_lut[port].state = eUartApiState_Initialize;
 80016b0:	7ffa      	ldrb	r2, [r7, #31]
 80016b2:	490d      	ldr	r1, [pc, #52]	@ (80016e8 <UART_API_Task+0x294>)
 80016b4:	4613      	mov	r3, r2
 80016b6:	00db      	lsls	r3, r3, #3
 80016b8:	1a9b      	subs	r3, r3, r2
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	440b      	add	r3, r1
 80016be:	3314      	adds	r3, #20
 80016c0:	2200      	movs	r2, #0
 80016c2:	701a      	strb	r2, [r3, #0]
                    break;
 80016c4:	e008      	b.n	80016d8 <UART_API_Task+0x284>
                continue;
 80016c6:	bf00      	nop
 80016c8:	e006      	b.n	80016d8 <UART_API_Task+0x284>
                    break;
 80016ca:	bf00      	nop
 80016cc:	e004      	b.n	80016d8 <UART_API_Task+0x284>
                        continue;
 80016ce:	bf00      	nop
 80016d0:	e002      	b.n	80016d8 <UART_API_Task+0x284>
                        break;
 80016d2:	bf00      	nop
 80016d4:	e000      	b.n	80016d8 <UART_API_Task+0x284>
                        break;
 80016d6:	bf00      	nop
        for (eUartApiPort_t port = eUartApiPort_First; port < eUartApiPort_Last; port++) {
 80016d8:	7ffb      	ldrb	r3, [r7, #31]
 80016da:	3301      	adds	r3, #1
 80016dc:	77fb      	strb	r3, [r7, #31]
 80016de:	7ffb      	ldrb	r3, [r7, #31]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	f43f aebe 	beq.w	8001462 <UART_API_Task+0xe>
 80016e6:	e6b9      	b.n	800145c <UART_API_Task+0x8>
 80016e8:	200000d4 	.word	0x200000d4
 80016ec:	08006e08 	.word	0x08006e08

080016f0 <UART_API_IsDelimiterReceived>:
            }
        }
    }
}

static bool UART_API_IsDelimiterReceived (sUartApiTaskData_t *task_data) {
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
    if ((task_data->buffer == NULL) || (task_data->index < task_data->delimiter_length) || (task_data->delimiter == NULL) || (task_data->delimiter_length <= 0)) {
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d00d      	beq.n	800171c <UART_API_IsDelimiterReceived+0x2c>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	689a      	ldr	r2, [r3, #8]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	691b      	ldr	r3, [r3, #16]
 8001708:	429a      	cmp	r2, r3
 800170a:	d307      	bcc.n	800171c <UART_API_IsDelimiterReceived+0x2c>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d003      	beq.n	800171c <UART_API_IsDelimiterReceived+0x2c>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	691b      	ldr	r3, [r3, #16]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d101      	bne.n	8001720 <UART_API_IsDelimiterReceived+0x30>
        return false;
 800171c:	2300      	movs	r3, #0
 800171e:	e016      	b.n	800174e <UART_API_IsDelimiterReceived+0x5e>
    }

    uint8_t *start_index = task_data->buffer + task_data->index - task_data->delimiter_length;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	685a      	ldr	r2, [r3, #4]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6899      	ldr	r1, [r3, #8]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	691b      	ldr	r3, [r3, #16]
 800172c:	1acb      	subs	r3, r1, r3
 800172e:	4413      	add	r3, r2
 8001730:	60fb      	str	r3, [r7, #12]

    return memcmp(start_index, task_data->delimiter, task_data->delimiter_length);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	68d9      	ldr	r1, [r3, #12]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	691b      	ldr	r3, [r3, #16]
 800173a:	461a      	mov	r2, r3
 800173c:	68f8      	ldr	r0, [r7, #12]
 800173e:	f005 fa3d 	bl	8006bbc <memcmp>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	bf14      	ite	ne
 8001748:	2301      	movne	r3, #1
 800174a:	2300      	moveq	r3, #0
 800174c:	b2db      	uxtb	r3, r3
}
 800174e:	4618      	mov	r0, r3
 8001750:	3710      	adds	r7, #16
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
	...

08001758 <UART_API_Init>:
/**********************************************************************************************************************
 * Definitions of exported functions
 *********************************************************************************************************************/

bool UART_API_Init (eUartApiPort_t port, uint32_t baudrate, uint8_t *delimiter, size_t delimiter_length) {
 8001758:	b590      	push	{r4, r7, lr}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	60b9      	str	r1, [r7, #8]
 8001760:	607a      	str	r2, [r7, #4]
 8001762:	603b      	str	r3, [r7, #0]
 8001764:	4603      	mov	r3, r0
 8001766:	73fb      	strb	r3, [r7, #15]
    if ((port < eUartApiPort_First) || (port >= eUartApiPort_Last)) {
 8001768:	7bfb      	ldrb	r3, [r7, #15]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <UART_API_Init+0x1a>
        return false;
 800176e:	2300      	movs	r3, #0
 8001770:	e086      	b.n	8001880 <UART_API_Init+0x128>
    }

    if (UART_Driver_Init(port, baudrate) == false) {
 8001772:	7bfb      	ldrb	r3, [r7, #15]
 8001774:	68b9      	ldr	r1, [r7, #8]
 8001776:	4618      	mov	r0, r3
 8001778:	f000 fa16 	bl	8001ba8 <UART_Driver_Init>
 800177c:	4603      	mov	r3, r0
 800177e:	f083 0301 	eor.w	r3, r3, #1
 8001782:	b2db      	uxtb	r3, r3
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <UART_API_Init+0x34>
        return false;
 8001788:	2300      	movs	r3, #0
 800178a:	e079      	b.n	8001880 <UART_API_Init+0x128>
    }

    if (delimiter_length <= 0) {
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d101      	bne.n	8001796 <UART_API_Init+0x3e>
        return false;
 8001792:	2300      	movs	r3, #0
 8001794:	e074      	b.n	8001880 <UART_API_Init+0x128>
    }

    g_dynamic_uart_api_lut[port].delimiter = delimiter;
 8001796:	7bfa      	ldrb	r2, [r7, #15]
 8001798:	493b      	ldr	r1, [pc, #236]	@ (8001888 <UART_API_Init+0x130>)
 800179a:	4613      	mov	r3, r2
 800179c:	00db      	lsls	r3, r3, #3
 800179e:	1a9b      	subs	r3, r3, r2
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	440b      	add	r3, r1
 80017a4:	330c      	adds	r3, #12
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	601a      	str	r2, [r3, #0]
    g_dynamic_uart_api_lut[port].delimiter_length = delimiter_length;
 80017aa:	7bfa      	ldrb	r2, [r7, #15]
 80017ac:	4936      	ldr	r1, [pc, #216]	@ (8001888 <UART_API_Init+0x130>)
 80017ae:	4613      	mov	r3, r2
 80017b0:	00db      	lsls	r3, r3, #3
 80017b2:	1a9b      	subs	r3, r3, r2
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	440b      	add	r3, r1
 80017b8:	3310      	adds	r3, #16
 80017ba:	683a      	ldr	r2, [r7, #0]
 80017bc:	601a      	str	r2, [r3, #0]

    g_dynamic_uart_api_lut[port].message_queue_id = osMessageQueueNew(MESSAGE_QUEUE_SIZE, sizeof(sMessage_t), &g_static_uart_api_lut[port].queue_attributes);
 80017be:	7bfa      	ldrb	r2, [r7, #15]
 80017c0:	4613      	mov	r3, r2
 80017c2:	005b      	lsls	r3, r3, #1
 80017c4:	4413      	add	r3, r2
 80017c6:	011b      	lsls	r3, r3, #4
 80017c8:	3308      	adds	r3, #8
 80017ca:	4a30      	ldr	r2, [pc, #192]	@ (800188c <UART_API_Init+0x134>)
 80017cc:	4413      	add	r3, r2
 80017ce:	7bfc      	ldrb	r4, [r7, #15]
 80017d0:	461a      	mov	r2, r3
 80017d2:	2108      	movs	r1, #8
 80017d4:	2008      	movs	r0, #8
 80017d6:	f002 f88c 	bl	80038f2 <osMessageQueueNew>
 80017da:	4602      	mov	r2, r0
 80017dc:	492a      	ldr	r1, [pc, #168]	@ (8001888 <UART_API_Init+0x130>)
 80017de:	4623      	mov	r3, r4
 80017e0:	00db      	lsls	r3, r3, #3
 80017e2:	1b1b      	subs	r3, r3, r4
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	440b      	add	r3, r1
 80017e8:	601a      	str	r2, [r3, #0]
    if (g_dynamic_uart_api_lut[port].message_queue_id == NULL) {
 80017ea:	7bfa      	ldrb	r2, [r7, #15]
 80017ec:	4926      	ldr	r1, [pc, #152]	@ (8001888 <UART_API_Init+0x130>)
 80017ee:	4613      	mov	r3, r2
 80017f0:	00db      	lsls	r3, r3, #3
 80017f2:	1a9b      	subs	r3, r3, r2
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	440b      	add	r3, r1
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d101      	bne.n	8001802 <UART_API_Init+0xaa>
        return false;
 80017fe:	2300      	movs	r3, #0
 8001800:	e03e      	b.n	8001880 <UART_API_Init+0x128>
    }

    g_dynamic_uart_api_lut[port].mutex_id = osMutexNew(&g_static_uart_api_lut[port].mutex_attributes);
 8001802:	7bfa      	ldrb	r2, [r7, #15]
 8001804:	4613      	mov	r3, r2
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	4413      	add	r3, r2
 800180a:	011b      	lsls	r3, r3, #4
 800180c:	3320      	adds	r3, #32
 800180e:	4a1f      	ldr	r2, [pc, #124]	@ (800188c <UART_API_Init+0x134>)
 8001810:	4413      	add	r3, r2
 8001812:	7bfc      	ldrb	r4, [r7, #15]
 8001814:	4618      	mov	r0, r3
 8001816:	f001 ff5e 	bl	80036d6 <osMutexNew>
 800181a:	4602      	mov	r2, r0
 800181c:	491a      	ldr	r1, [pc, #104]	@ (8001888 <UART_API_Init+0x130>)
 800181e:	4623      	mov	r3, r4
 8001820:	00db      	lsls	r3, r3, #3
 8001822:	1b1b      	subs	r3, r3, r4
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	440b      	add	r3, r1
 8001828:	3318      	adds	r3, #24
 800182a:	601a      	str	r2, [r3, #0]
    if (g_dynamic_uart_api_lut[port].mutex_id == NULL) {
 800182c:	7bfa      	ldrb	r2, [r7, #15]
 800182e:	4916      	ldr	r1, [pc, #88]	@ (8001888 <UART_API_Init+0x130>)
 8001830:	4613      	mov	r3, r2
 8001832:	00db      	lsls	r3, r3, #3
 8001834:	1a9b      	subs	r3, r3, r2
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	440b      	add	r3, r1
 800183a:	3318      	adds	r3, #24
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d101      	bne.n	8001846 <UART_API_Init+0xee>
        return false;
 8001842:	2300      	movs	r3, #0
 8001844:	e01c      	b.n	8001880 <UART_API_Init+0x128>
    }

    if (g_uart_api_task_handle == NULL) {
 8001846:	4b12      	ldr	r3, [pc, #72]	@ (8001890 <UART_API_Init+0x138>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d10d      	bne.n	800186a <UART_API_Init+0x112>
        g_uart_api_task_handle = osThreadNew(UART_API_Task, NULL, &g_uart_api_task_attr);
 800184e:	4a11      	ldr	r2, [pc, #68]	@ (8001894 <UART_API_Init+0x13c>)
 8001850:	2100      	movs	r1, #0
 8001852:	4811      	ldr	r0, [pc, #68]	@ (8001898 <UART_API_Init+0x140>)
 8001854:	f001 fe92 	bl	800357c <osThreadNew>
 8001858:	4603      	mov	r3, r0
 800185a:	4a0d      	ldr	r2, [pc, #52]	@ (8001890 <UART_API_Init+0x138>)
 800185c:	6013      	str	r3, [r2, #0]
        if (g_uart_api_task_handle == NULL) {
 800185e:	4b0c      	ldr	r3, [pc, #48]	@ (8001890 <UART_API_Init+0x138>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d101      	bne.n	800186a <UART_API_Init+0x112>
            return false;
 8001866:	2300      	movs	r3, #0
 8001868:	e00a      	b.n	8001880 <UART_API_Init+0x128>
        }
    }

    g_dynamic_uart_api_lut[port].is_initialized = true;
 800186a:	7bfa      	ldrb	r2, [r7, #15]
 800186c:	4906      	ldr	r1, [pc, #24]	@ (8001888 <UART_API_Init+0x130>)
 800186e:	4613      	mov	r3, r2
 8001870:	00db      	lsls	r3, r3, #3
 8001872:	1a9b      	subs	r3, r3, r2
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	440b      	add	r3, r1
 8001878:	3315      	adds	r3, #21
 800187a:	2201      	movs	r2, #1
 800187c:	701a      	strb	r2, [r3, #0]
    return true;
 800187e:	2301      	movs	r3, #1
}
 8001880:	4618      	mov	r0, r3
 8001882:	3714      	adds	r7, #20
 8001884:	46bd      	mov	sp, r7
 8001886:	bd90      	pop	{r4, r7, pc}
 8001888:	200000d4 	.word	0x200000d4
 800188c:	08006e08 	.word	0x08006e08
 8001890:	200000d0 	.word	0x200000d0
 8001894:	08006de4 	.word	0x08006de4
 8001898:	08001455 	.word	0x08001455

0800189c <__NVIC_GetPriorityGrouping>:
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018a0:	4b04      	ldr	r3, [pc, #16]	@ (80018b4 <__NVIC_GetPriorityGrouping+0x18>)
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	0a1b      	lsrs	r3, r3, #8
 80018a6:	f003 0307 	and.w	r3, r3, #7
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr
 80018b4:	e000ed00 	.word	0xe000ed00

080018b8 <__NVIC_EnableIRQ>:
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	db0b      	blt.n	80018e2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018ca:	79fb      	ldrb	r3, [r7, #7]
 80018cc:	f003 021f 	and.w	r2, r3, #31
 80018d0:	4907      	ldr	r1, [pc, #28]	@ (80018f0 <__NVIC_EnableIRQ+0x38>)
 80018d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d6:	095b      	lsrs	r3, r3, #5
 80018d8:	2001      	movs	r0, #1
 80018da:	fa00 f202 	lsl.w	r2, r0, r2
 80018de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80018e2:	bf00      	nop
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	e000e100 	.word	0xe000e100

080018f4 <__NVIC_SetPriority>:
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4603      	mov	r3, r0
 80018fc:	6039      	str	r1, [r7, #0]
 80018fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001904:	2b00      	cmp	r3, #0
 8001906:	db0a      	blt.n	800191e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	b2da      	uxtb	r2, r3
 800190c:	490c      	ldr	r1, [pc, #48]	@ (8001940 <__NVIC_SetPriority+0x4c>)
 800190e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001912:	0112      	lsls	r2, r2, #4
 8001914:	b2d2      	uxtb	r2, r2
 8001916:	440b      	add	r3, r1
 8001918:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800191c:	e00a      	b.n	8001934 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	b2da      	uxtb	r2, r3
 8001922:	4908      	ldr	r1, [pc, #32]	@ (8001944 <__NVIC_SetPriority+0x50>)
 8001924:	79fb      	ldrb	r3, [r7, #7]
 8001926:	f003 030f 	and.w	r3, r3, #15
 800192a:	3b04      	subs	r3, #4
 800192c:	0112      	lsls	r2, r2, #4
 800192e:	b2d2      	uxtb	r2, r2
 8001930:	440b      	add	r3, r1
 8001932:	761a      	strb	r2, [r3, #24]
}
 8001934:	bf00      	nop
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	e000e100 	.word	0xe000e100
 8001944:	e000ed00 	.word	0xe000ed00

08001948 <NVIC_EncodePriority>:
{
 8001948:	b480      	push	{r7}
 800194a:	b089      	sub	sp, #36	@ 0x24
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	f003 0307 	and.w	r3, r3, #7
 800195a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	f1c3 0307 	rsb	r3, r3, #7
 8001962:	2b04      	cmp	r3, #4
 8001964:	bf28      	it	cs
 8001966:	2304      	movcs	r3, #4
 8001968:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	3304      	adds	r3, #4
 800196e:	2b06      	cmp	r3, #6
 8001970:	d902      	bls.n	8001978 <NVIC_EncodePriority+0x30>
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	3b03      	subs	r3, #3
 8001976:	e000      	b.n	800197a <NVIC_EncodePriority+0x32>
 8001978:	2300      	movs	r3, #0
 800197a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800197c:	f04f 32ff 	mov.w	r2, #4294967295
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	fa02 f303 	lsl.w	r3, r2, r3
 8001986:	43da      	mvns	r2, r3
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	401a      	ands	r2, r3
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001990:	f04f 31ff 	mov.w	r1, #4294967295
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	fa01 f303 	lsl.w	r3, r1, r3
 800199a:	43d9      	mvns	r1, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a0:	4313      	orrs	r3, r2
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3724      	adds	r7, #36	@ 0x24
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr

080019ae <LL_USART_Enable>:
{
 80019ae:	b480      	push	{r7}
 80019b0:	b083      	sub	sp, #12
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	60da      	str	r2, [r3, #12]
}
 80019c2:	bf00      	nop
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr

080019ce <LL_USART_IsEnabled>:
{
 80019ce:	b480      	push	{r7}
 80019d0:	b083      	sub	sp, #12
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	68db      	ldr	r3, [r3, #12]
 80019da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80019de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80019e2:	bf0c      	ite	eq
 80019e4:	2301      	moveq	r3, #1
 80019e6:	2300      	movne	r3, #0
 80019e8:	b2db      	uxtb	r3, r3
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr

080019f6 <LL_USART_ConfigAsyncMode>:
{
 80019f6:	b480      	push	{r7}
 80019f8:	b083      	sub	sp, #12
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	691b      	ldr	r3, [r3, #16]
 8001a02:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	695b      	ldr	r3, [r3, #20]
 8001a0e:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	615a      	str	r2, [r3, #20]
}
 8001a16:	bf00      	nop
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr

08001a22 <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(const USART_TypeDef *USARTx)
{
 8001a22:	b480      	push	{r7}
 8001a24:	b083      	sub	sp, #12
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0320 	and.w	r3, r3, #32
 8001a32:	2b20      	cmp	r3, #32
 8001a34:	bf0c      	ite	eq
 8001a36:	2301      	moveq	r3, #1
 8001a38:	2300      	movne	r3, #0
 8001a3a:	b2db      	uxtb	r3, r3
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <LL_USART_EnableIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b089      	sub	sp, #36	@ 0x24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	330c      	adds	r3, #12
 8001a54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	e853 3f00 	ldrex	r3, [r3]
 8001a5c:	60bb      	str	r3, [r7, #8]
   return(result);
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	f043 0320 	orr.w	r3, r3, #32
 8001a64:	61fb      	str	r3, [r7, #28]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	330c      	adds	r3, #12
 8001a6a:	69fa      	ldr	r2, [r7, #28]
 8001a6c:	61ba      	str	r2, [r7, #24]
 8001a6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001a70:	6979      	ldr	r1, [r7, #20]
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	e841 2300 	strex	r3, r2, [r1]
 8001a78:	613b      	str	r3, [r7, #16]
   return(result);
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d1e7      	bne.n	8001a50 <LL_USART_EnableIT_RXNE+0x8>
}
 8001a80:	bf00      	nop
 8001a82:	bf00      	nop
 8001a84:	3724      	adds	r7, #36	@ 0x24
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr

08001a8e <LL_USART_IsEnabledIT_RXNE>:
  * @rmtoll CR1          RXNEIE        LL_USART_IsEnabledIT_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE(const USART_TypeDef *USARTx)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	b083      	sub	sp, #12
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	68db      	ldr	r3, [r3, #12]
 8001a9a:	f003 0320 	and.w	r3, r3, #32
 8001a9e:	2b20      	cmp	r3, #32
 8001aa0:	bf0c      	ite	eq
 8001aa2:	2301      	moveq	r3, #1
 8001aa4:	2300      	movne	r3, #0
 8001aa6:	b2db      	uxtb	r3, r3
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <LL_USART_ReceiveData8>:
  * @rmtoll DR           DR            LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	b2db      	uxtb	r3, r3
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	370c      	adds	r7, #12
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
	...

08001ad0 <LL_APB2_GRP1_EnableClock>:
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001ad8:	4b08      	ldr	r3, [pc, #32]	@ (8001afc <LL_APB2_GRP1_EnableClock+0x2c>)
 8001ada:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001adc:	4907      	ldr	r1, [pc, #28]	@ (8001afc <LL_APB2_GRP1_EnableClock+0x2c>)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	644b      	str	r3, [r1, #68]	@ 0x44
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001ae4:	4b05      	ldr	r3, [pc, #20]	@ (8001afc <LL_APB2_GRP1_EnableClock+0x2c>)
 8001ae6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	4013      	ands	r3, r2
 8001aec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001aee:	68fb      	ldr	r3, [r7, #12]
}
 8001af0:	bf00      	nop
 8001af2:	3714      	adds	r7, #20
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr
 8001afc:	40023800 	.word	0x40023800

08001b00 <UART_Driver_IRQReceive>:
 *********************************************************************************************************************/
static void UART_Driver_IRQReceive (eUartPort_t port);
/**********************************************************************************************************************
 * Definitions of private functions
 *********************************************************************************************************************/
static void UART_Driver_IRQReceive (eUartPort_t port) {
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	4603      	mov	r3, r0
 8001b08:	71fb      	strb	r3, [r7, #7]
    if ((port < eUartPort_First) || (port >= eUartPort_Last)) {
 8001b0a:	79fb      	ldrb	r3, [r7, #7]
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d838      	bhi.n	8001b82 <UART_Driver_IRQReceive+0x82>
        return;
    }

    if (g_static_uart_rb[port] != NULL) {
 8001b10:	79fb      	ldrb	r3, [r7, #7]
 8001b12:	4a1f      	ldr	r2, [pc, #124]	@ (8001b90 <UART_Driver_IRQReceive+0x90>)
 8001b14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d034      	beq.n	8001b86 <UART_Driver_IRQReceive+0x86>
        if ((LL_USART_IsActiveFlag_RXNE(g_static_uart_lut[port].port)) && (LL_USART_IsEnabledIT_RXNE(g_static_uart_lut[port].port))) {
 8001b1c:	79fa      	ldrb	r2, [r7, #7]
 8001b1e:	491d      	ldr	r1, [pc, #116]	@ (8001b94 <UART_Driver_IRQReceive+0x94>)
 8001b20:	4613      	mov	r3, r2
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	4413      	add	r3, r2
 8001b26:	011b      	lsls	r3, r3, #4
 8001b28:	440b      	add	r3, r1
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7ff ff78 	bl	8001a22 <LL_USART_IsActiveFlag_RXNE>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d026      	beq.n	8001b86 <UART_Driver_IRQReceive+0x86>
 8001b38:	79fa      	ldrb	r2, [r7, #7]
 8001b3a:	4916      	ldr	r1, [pc, #88]	@ (8001b94 <UART_Driver_IRQReceive+0x94>)
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	005b      	lsls	r3, r3, #1
 8001b40:	4413      	add	r3, r2
 8001b42:	011b      	lsls	r3, r3, #4
 8001b44:	440b      	add	r3, r1
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff ffa0 	bl	8001a8e <LL_USART_IsEnabledIT_RXNE>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d018      	beq.n	8001b86 <UART_Driver_IRQReceive+0x86>
            uint8_t data = LL_USART_ReceiveData8(g_static_uart_lut[port].port);
 8001b54:	79fa      	ldrb	r2, [r7, #7]
 8001b56:	490f      	ldr	r1, [pc, #60]	@ (8001b94 <UART_Driver_IRQReceive+0x94>)
 8001b58:	4613      	mov	r3, r2
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	4413      	add	r3, r2
 8001b5e:	011b      	lsls	r3, r3, #4
 8001b60:	440b      	add	r3, r1
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff ffa5 	bl	8001ab4 <LL_USART_ReceiveData8>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	73fb      	strb	r3, [r7, #15]
            RingBufferEnqueue(g_static_uart_rb[port], data);
 8001b6e:	79fb      	ldrb	r3, [r7, #7]
 8001b70:	4a07      	ldr	r2, [pc, #28]	@ (8001b90 <UART_Driver_IRQReceive+0x90>)
 8001b72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b76:	7bfa      	ldrb	r2, [r7, #15]
 8001b78:	4611      	mov	r1, r2
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7ff fae8 	bl	8001150 <RingBufferEnqueue>
        }
    }

    return;
 8001b80:	e001      	b.n	8001b86 <UART_Driver_IRQReceive+0x86>
        return;
 8001b82:	bf00      	nop
 8001b84:	e000      	b.n	8001b88 <UART_Driver_IRQReceive+0x88>
    return;
 8001b86:	bf00      	nop
}
 8001b88:	3710      	adds	r7, #16
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	200000f0 	.word	0x200000f0
 8001b94:	08006e38 	.word	0x08006e38

08001b98 <USART1_IRQHandler>:

void USART1_IRQHandler (void) {
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
    UART_Driver_IRQReceive(eUartPort_Usart1);
 8001b9c:	2000      	movs	r0, #0
 8001b9e:	f7ff ffaf 	bl	8001b00 <UART_Driver_IRQReceive>
}
 8001ba2:	bf00      	nop
 8001ba4:	bd80      	pop	{r7, pc}
	...

08001ba8 <UART_Driver_Init>:
/**********************************************************************************************************************
 * Definitions of exported functions
 *********************************************************************************************************************/
bool UART_Driver_Init (eUartPort_t port, uint32_t baudrate) {
 8001ba8:	b590      	push	{r4, r7, lr}
 8001baa:	b08b      	sub	sp, #44	@ 0x2c
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	4603      	mov	r3, r0
 8001bb0:	6039      	str	r1, [r7, #0]
 8001bb2:	71fb      	strb	r3, [r7, #7]
    if ((port < eUartPort_First) || (port >= eUartPort_Last)) {
 8001bb4:	79fb      	ldrb	r3, [r7, #7]
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d901      	bls.n	8001bbe <UART_Driver_Init+0x16>
        return false;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	e0fa      	b.n	8001db4 <UART_Driver_Init+0x20c>
    }

    LL_USART_InitTypeDef usart_init_struct = {0};
 8001bbe:	f107 030c 	add.w	r3, r7, #12
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	601a      	str	r2, [r3, #0]
 8001bc6:	605a      	str	r2, [r3, #4]
 8001bc8:	609a      	str	r2, [r3, #8]
 8001bca:	60da      	str	r2, [r3, #12]
 8001bcc:	611a      	str	r2, [r3, #16]
 8001bce:	615a      	str	r2, [r3, #20]
 8001bd0:	619a      	str	r2, [r3, #24]

    g_static_uart_lut[port].enable_clock(g_static_uart_lut[port].clock);
 8001bd2:	79fa      	ldrb	r2, [r7, #7]
 8001bd4:	4979      	ldr	r1, [pc, #484]	@ (8001dbc <UART_Driver_Init+0x214>)
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	4413      	add	r3, r2
 8001bdc:	011b      	lsls	r3, r3, #4
 8001bde:	440b      	add	r3, r1
 8001be0:	332c      	adds	r3, #44	@ 0x2c
 8001be2:	6819      	ldr	r1, [r3, #0]
 8001be4:	79fa      	ldrb	r2, [r7, #7]
 8001be6:	4875      	ldr	r0, [pc, #468]	@ (8001dbc <UART_Driver_Init+0x214>)
 8001be8:	4613      	mov	r3, r2
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	4413      	add	r3, r2
 8001bee:	011b      	lsls	r3, r3, #4
 8001bf0:	4403      	add	r3, r0
 8001bf2:	3320      	adds	r3, #32
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	4788      	blx	r1

    usart_init_struct.BaudRate = (baudrate == 0) ? g_static_uart_lut[port].baud_rate : baudrate;
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d109      	bne.n	8001c14 <UART_Driver_Init+0x6c>
 8001c00:	79fa      	ldrb	r2, [r7, #7]
 8001c02:	496e      	ldr	r1, [pc, #440]	@ (8001dbc <UART_Driver_Init+0x214>)
 8001c04:	4613      	mov	r3, r2
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	4413      	add	r3, r2
 8001c0a:	011b      	lsls	r3, r3, #4
 8001c0c:	440b      	add	r3, r1
 8001c0e:	3304      	adds	r3, #4
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	e000      	b.n	8001c16 <UART_Driver_Init+0x6e>
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	60fb      	str	r3, [r7, #12]
    usart_init_struct.DataWidth = g_static_uart_lut[port].data_width;
 8001c18:	79fa      	ldrb	r2, [r7, #7]
 8001c1a:	4968      	ldr	r1, [pc, #416]	@ (8001dbc <UART_Driver_Init+0x214>)
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	4413      	add	r3, r2
 8001c22:	011b      	lsls	r3, r3, #4
 8001c24:	440b      	add	r3, r1
 8001c26:	3308      	adds	r3, #8
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	613b      	str	r3, [r7, #16]
    usart_init_struct.StopBits = g_static_uart_lut[port].stop_bits;
 8001c2c:	79fa      	ldrb	r2, [r7, #7]
 8001c2e:	4963      	ldr	r1, [pc, #396]	@ (8001dbc <UART_Driver_Init+0x214>)
 8001c30:	4613      	mov	r3, r2
 8001c32:	005b      	lsls	r3, r3, #1
 8001c34:	4413      	add	r3, r2
 8001c36:	011b      	lsls	r3, r3, #4
 8001c38:	440b      	add	r3, r1
 8001c3a:	330c      	adds	r3, #12
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	617b      	str	r3, [r7, #20]
    usart_init_struct.Parity = g_static_uart_lut[port].parity;
 8001c40:	79fa      	ldrb	r2, [r7, #7]
 8001c42:	495e      	ldr	r1, [pc, #376]	@ (8001dbc <UART_Driver_Init+0x214>)
 8001c44:	4613      	mov	r3, r2
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	4413      	add	r3, r2
 8001c4a:	011b      	lsls	r3, r3, #4
 8001c4c:	440b      	add	r3, r1
 8001c4e:	3310      	adds	r3, #16
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	61bb      	str	r3, [r7, #24]
    usart_init_struct.TransferDirection = g_static_uart_lut[port].transfer_direction;
 8001c54:	79fa      	ldrb	r2, [r7, #7]
 8001c56:	4959      	ldr	r1, [pc, #356]	@ (8001dbc <UART_Driver_Init+0x214>)
 8001c58:	4613      	mov	r3, r2
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	4413      	add	r3, r2
 8001c5e:	011b      	lsls	r3, r3, #4
 8001c60:	440b      	add	r3, r1
 8001c62:	3314      	adds	r3, #20
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	61fb      	str	r3, [r7, #28]
    usart_init_struct.HardwareFlowControl = g_static_uart_lut[port].hardware_flow_control;
 8001c68:	79fa      	ldrb	r2, [r7, #7]
 8001c6a:	4954      	ldr	r1, [pc, #336]	@ (8001dbc <UART_Driver_Init+0x214>)
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	4413      	add	r3, r2
 8001c72:	011b      	lsls	r3, r3, #4
 8001c74:	440b      	add	r3, r1
 8001c76:	3318      	adds	r3, #24
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	623b      	str	r3, [r7, #32]
    usart_init_struct.OverSampling = g_static_uart_lut[port].over_sampling;
 8001c7c:	79fa      	ldrb	r2, [r7, #7]
 8001c7e:	494f      	ldr	r1, [pc, #316]	@ (8001dbc <UART_Driver_Init+0x214>)
 8001c80:	4613      	mov	r3, r2
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	4413      	add	r3, r2
 8001c86:	011b      	lsls	r3, r3, #4
 8001c88:	440b      	add	r3, r1
 8001c8a:	331c      	adds	r3, #28
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	627b      	str	r3, [r7, #36]	@ 0x24

    NVIC_SetPriority(g_static_uart_lut[port].irqn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 8001c90:	79fa      	ldrb	r2, [r7, #7]
 8001c92:	494a      	ldr	r1, [pc, #296]	@ (8001dbc <UART_Driver_Init+0x214>)
 8001c94:	4613      	mov	r3, r2
 8001c96:	005b      	lsls	r3, r3, #1
 8001c98:	4413      	add	r3, r2
 8001c9a:	011b      	lsls	r3, r3, #4
 8001c9c:	440b      	add	r3, r1
 8001c9e:	3328      	adds	r3, #40	@ 0x28
 8001ca0:	f993 4000 	ldrsb.w	r4, [r3]
 8001ca4:	f7ff fdfa 	bl	800189c <__NVIC_GetPriorityGrouping>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2200      	movs	r2, #0
 8001cac:	2105      	movs	r1, #5
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7ff fe4a 	bl	8001948 <NVIC_EncodePriority>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	4620      	mov	r0, r4
 8001cba:	f7ff fe1b 	bl	80018f4 <__NVIC_SetPriority>
    NVIC_EnableIRQ(g_static_uart_lut[port].irqn);
 8001cbe:	79fa      	ldrb	r2, [r7, #7]
 8001cc0:	493e      	ldr	r1, [pc, #248]	@ (8001dbc <UART_Driver_Init+0x214>)
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	4413      	add	r3, r2
 8001cc8:	011b      	lsls	r3, r3, #4
 8001cca:	440b      	add	r3, r1
 8001ccc:	3328      	adds	r3, #40	@ 0x28
 8001cce:	f993 3000 	ldrsb.w	r3, [r3]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7ff fdf0 	bl	80018b8 <__NVIC_EnableIRQ>

    if (LL_USART_Init(g_static_uart_lut[port].port, &usart_init_struct) != SUCCESS) {
 8001cd8:	79fa      	ldrb	r2, [r7, #7]
 8001cda:	4938      	ldr	r1, [pc, #224]	@ (8001dbc <UART_Driver_Init+0x214>)
 8001cdc:	4613      	mov	r3, r2
 8001cde:	005b      	lsls	r3, r3, #1
 8001ce0:	4413      	add	r3, r2
 8001ce2:	011b      	lsls	r3, r3, #4
 8001ce4:	440b      	add	r3, r1
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f107 020c 	add.w	r2, r7, #12
 8001cec:	4611      	mov	r1, r2
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f001 fb42 	bl	8003378 <LL_USART_Init>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <UART_Driver_Init+0x156>
        return false;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	e05a      	b.n	8001db4 <UART_Driver_Init+0x20c>
    }
    LL_USART_ConfigAsyncMode(g_static_uart_lut[port].port);
 8001cfe:	79fa      	ldrb	r2, [r7, #7]
 8001d00:	492e      	ldr	r1, [pc, #184]	@ (8001dbc <UART_Driver_Init+0x214>)
 8001d02:	4613      	mov	r3, r2
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	4413      	add	r3, r2
 8001d08:	011b      	lsls	r3, r3, #4
 8001d0a:	440b      	add	r3, r1
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7ff fe71 	bl	80019f6 <LL_USART_ConfigAsyncMode>
    LL_USART_EnableIT_RXNE(g_static_uart_lut[port].port);
 8001d14:	79fa      	ldrb	r2, [r7, #7]
 8001d16:	4929      	ldr	r1, [pc, #164]	@ (8001dbc <UART_Driver_Init+0x214>)
 8001d18:	4613      	mov	r3, r2
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	4413      	add	r3, r2
 8001d1e:	011b      	lsls	r3, r3, #4
 8001d20:	440b      	add	r3, r1
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7ff fe8f 	bl	8001a48 <LL_USART_EnableIT_RXNE>
    LL_USART_Enable(g_static_uart_lut[port].port);
 8001d2a:	79fa      	ldrb	r2, [r7, #7]
 8001d2c:	4923      	ldr	r1, [pc, #140]	@ (8001dbc <UART_Driver_Init+0x214>)
 8001d2e:	4613      	mov	r3, r2
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	4413      	add	r3, r2
 8001d34:	011b      	lsls	r3, r3, #4
 8001d36:	440b      	add	r3, r1
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7ff fe37 	bl	80019ae <LL_USART_Enable>

    if (LL_USART_IsEnabledIT_RXNE(g_static_uart_lut[port].port) == 0) {
 8001d40:	79fa      	ldrb	r2, [r7, #7]
 8001d42:	491e      	ldr	r1, [pc, #120]	@ (8001dbc <UART_Driver_Init+0x214>)
 8001d44:	4613      	mov	r3, r2
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	4413      	add	r3, r2
 8001d4a:	011b      	lsls	r3, r3, #4
 8001d4c:	440b      	add	r3, r1
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7ff fe9c 	bl	8001a8e <LL_USART_IsEnabledIT_RXNE>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d101      	bne.n	8001d60 <UART_Driver_Init+0x1b8>
        return false;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	e029      	b.n	8001db4 <UART_Driver_Init+0x20c>
    }

    g_static_uart_rb[port] = RingBufferInit(g_static_uart_lut[port].ringbuffer_capacity);
 8001d60:	79fa      	ldrb	r2, [r7, #7]
 8001d62:	4916      	ldr	r1, [pc, #88]	@ (8001dbc <UART_Driver_Init+0x214>)
 8001d64:	4613      	mov	r3, r2
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	4413      	add	r3, r2
 8001d6a:	011b      	lsls	r3, r3, #4
 8001d6c:	440b      	add	r3, r1
 8001d6e:	3324      	adds	r3, #36	@ 0x24
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	79fc      	ldrb	r4, [r7, #7]
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff f987 	bl	8001088 <RingBufferInit>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	4a10      	ldr	r2, [pc, #64]	@ (8001dc0 <UART_Driver_Init+0x218>)
 8001d7e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
    if (g_static_uart_rb[port] == NULL) {
 8001d82:	79fb      	ldrb	r3, [r7, #7]
 8001d84:	4a0e      	ldr	r2, [pc, #56]	@ (8001dc0 <UART_Driver_Init+0x218>)
 8001d86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d101      	bne.n	8001d92 <UART_Driver_Init+0x1ea>
        return false;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	e010      	b.n	8001db4 <UART_Driver_Init+0x20c>
    }

    if (LL_USART_IsEnabled(g_static_uart_lut[port].port) == 0) {
 8001d92:	79fa      	ldrb	r2, [r7, #7]
 8001d94:	4909      	ldr	r1, [pc, #36]	@ (8001dbc <UART_Driver_Init+0x214>)
 8001d96:	4613      	mov	r3, r2
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	4413      	add	r3, r2
 8001d9c:	011b      	lsls	r3, r3, #4
 8001d9e:	440b      	add	r3, r1
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7ff fe13 	bl	80019ce <LL_USART_IsEnabled>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d101      	bne.n	8001db2 <UART_Driver_Init+0x20a>
        return false;
 8001dae:	2300      	movs	r3, #0
 8001db0:	e000      	b.n	8001db4 <UART_Driver_Init+0x20c>
    }

    return true;
 8001db2:	2301      	movs	r3, #1
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	372c      	adds	r7, #44	@ 0x2c
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd90      	pop	{r4, r7, pc}
 8001dbc:	08006e38 	.word	0x08006e38
 8001dc0:	200000f0 	.word	0x200000f0

08001dc4 <UART_Driver_Read>:

    return true;
}


bool UART_Driver_Read (eUartPort_t port, uint8_t *data) {
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	4603      	mov	r3, r0
 8001dcc:	6039      	str	r1, [r7, #0]
 8001dce:	71fb      	strb	r3, [r7, #7]
    if ((port < eUartPort_First) || (port >= eUartPort_Last) || (g_static_uart_rb[port] == NULL) || (data == NULL)) {
 8001dd0:	79fb      	ldrb	r3, [r7, #7]
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d808      	bhi.n	8001de8 <UART_Driver_Read+0x24>
 8001dd6:	79fb      	ldrb	r3, [r7, #7]
 8001dd8:	4a0b      	ldr	r2, [pc, #44]	@ (8001e08 <UART_Driver_Read+0x44>)
 8001dda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d002      	beq.n	8001de8 <UART_Driver_Read+0x24>
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d101      	bne.n	8001dec <UART_Driver_Read+0x28>
        return false;
 8001de8:	2300      	movs	r3, #0
 8001dea:	e008      	b.n	8001dfe <UART_Driver_Read+0x3a>
    }

    return RingBufferDequeue(g_static_uart_rb[port], data);
 8001dec:	79fb      	ldrb	r3, [r7, #7]
 8001dee:	4a06      	ldr	r2, [pc, #24]	@ (8001e08 <UART_Driver_Read+0x44>)
 8001df0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001df4:	6839      	ldr	r1, [r7, #0]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7ff f9ea 	bl	80011d0 <RingBufferDequeue>
 8001dfc:	4603      	mov	r3, r0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	200000f0 	.word	0x200000f0

08001e0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e0c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e44 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001e10:	f7ff fb0e 	bl	8001430 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e14:	480c      	ldr	r0, [pc, #48]	@ (8001e48 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e16:	490d      	ldr	r1, [pc, #52]	@ (8001e4c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e18:	4a0d      	ldr	r2, [pc, #52]	@ (8001e50 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e1c:	e002      	b.n	8001e24 <LoopCopyDataInit>

08001e1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e22:	3304      	adds	r3, #4

08001e24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e28:	d3f9      	bcc.n	8001e1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e2a:	4a0a      	ldr	r2, [pc, #40]	@ (8001e54 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e2c:	4c0a      	ldr	r4, [pc, #40]	@ (8001e58 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e30:	e001      	b.n	8001e36 <LoopFillZerobss>

08001e32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e34:	3204      	adds	r2, #4

08001e36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e38:	d3fb      	bcc.n	8001e32 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001e3a:	f004 feed 	bl	8006c18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e3e:	f7fe ff81 	bl	8000d44 <main>
  bx  lr    
 8001e42:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e44:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001e48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e4c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001e50:	08006ea8 	.word	0x08006ea8
  ldr r2, =_sbss
 8001e54:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001e58:	20004b94 	.word	0x20004b94

08001e5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e5c:	e7fe      	b.n	8001e5c <ADC_IRQHandler>
	...

08001e60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e64:	4b0e      	ldr	r3, [pc, #56]	@ (8001ea0 <HAL_Init+0x40>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a0d      	ldr	r2, [pc, #52]	@ (8001ea0 <HAL_Init+0x40>)
 8001e6a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e70:	4b0b      	ldr	r3, [pc, #44]	@ (8001ea0 <HAL_Init+0x40>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a0a      	ldr	r2, [pc, #40]	@ (8001ea0 <HAL_Init+0x40>)
 8001e76:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e7c:	4b08      	ldr	r3, [pc, #32]	@ (8001ea0 <HAL_Init+0x40>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a07      	ldr	r2, [pc, #28]	@ (8001ea0 <HAL_Init+0x40>)
 8001e82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e88:	2003      	movs	r0, #3
 8001e8a:	f000 f8cc 	bl	8002026 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e8e:	200f      	movs	r0, #15
 8001e90:	f7ff f9f8 	bl	8001284 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e94:	f7ff f9ca 	bl	800122c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	40023c00 	.word	0x40023c00

08001ea4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ea8:	4b06      	ldr	r3, [pc, #24]	@ (8001ec4 <HAL_IncTick+0x20>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	461a      	mov	r2, r3
 8001eae:	4b06      	ldr	r3, [pc, #24]	@ (8001ec8 <HAL_IncTick+0x24>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	4a04      	ldr	r2, [pc, #16]	@ (8001ec8 <HAL_IncTick+0x24>)
 8001eb6:	6013      	str	r3, [r2, #0]
}
 8001eb8:	bf00      	nop
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	20000008 	.word	0x20000008
 8001ec8:	200000f8 	.word	0x200000f8

08001ecc <__NVIC_SetPriorityGrouping>:
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b085      	sub	sp, #20
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f003 0307 	and.w	r3, r3, #7
 8001eda:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001edc:	4b0c      	ldr	r3, [pc, #48]	@ (8001f10 <__NVIC_SetPriorityGrouping+0x44>)
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ee2:	68ba      	ldr	r2, [r7, #8]
 8001ee4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ee8:	4013      	ands	r3, r2
 8001eea:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ef4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ef8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001efc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001efe:	4a04      	ldr	r2, [pc, #16]	@ (8001f10 <__NVIC_SetPriorityGrouping+0x44>)
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	60d3      	str	r3, [r2, #12]
}
 8001f04:	bf00      	nop
 8001f06:	3714      	adds	r7, #20
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr
 8001f10:	e000ed00 	.word	0xe000ed00

08001f14 <__NVIC_GetPriorityGrouping>:
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f18:	4b04      	ldr	r3, [pc, #16]	@ (8001f2c <__NVIC_GetPriorityGrouping+0x18>)
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	0a1b      	lsrs	r3, r3, #8
 8001f1e:	f003 0307 	and.w	r3, r3, #7
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr
 8001f2c:	e000ed00 	.word	0xe000ed00

08001f30 <__NVIC_EnableIRQ>:
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	4603      	mov	r3, r0
 8001f38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	db0b      	blt.n	8001f5a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f42:	79fb      	ldrb	r3, [r7, #7]
 8001f44:	f003 021f 	and.w	r2, r3, #31
 8001f48:	4907      	ldr	r1, [pc, #28]	@ (8001f68 <__NVIC_EnableIRQ+0x38>)
 8001f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4e:	095b      	lsrs	r3, r3, #5
 8001f50:	2001      	movs	r0, #1
 8001f52:	fa00 f202 	lsl.w	r2, r0, r2
 8001f56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001f5a:	bf00      	nop
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	e000e100 	.word	0xe000e100

08001f6c <__NVIC_SetPriority>:
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	4603      	mov	r3, r0
 8001f74:	6039      	str	r1, [r7, #0]
 8001f76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	db0a      	blt.n	8001f96 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	b2da      	uxtb	r2, r3
 8001f84:	490c      	ldr	r1, [pc, #48]	@ (8001fb8 <__NVIC_SetPriority+0x4c>)
 8001f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8a:	0112      	lsls	r2, r2, #4
 8001f8c:	b2d2      	uxtb	r2, r2
 8001f8e:	440b      	add	r3, r1
 8001f90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001f94:	e00a      	b.n	8001fac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	b2da      	uxtb	r2, r3
 8001f9a:	4908      	ldr	r1, [pc, #32]	@ (8001fbc <__NVIC_SetPriority+0x50>)
 8001f9c:	79fb      	ldrb	r3, [r7, #7]
 8001f9e:	f003 030f 	and.w	r3, r3, #15
 8001fa2:	3b04      	subs	r3, #4
 8001fa4:	0112      	lsls	r2, r2, #4
 8001fa6:	b2d2      	uxtb	r2, r2
 8001fa8:	440b      	add	r3, r1
 8001faa:	761a      	strb	r2, [r3, #24]
}
 8001fac:	bf00      	nop
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr
 8001fb8:	e000e100 	.word	0xe000e100
 8001fbc:	e000ed00 	.word	0xe000ed00

08001fc0 <NVIC_EncodePriority>:
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b089      	sub	sp, #36	@ 0x24
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f003 0307 	and.w	r3, r3, #7
 8001fd2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	f1c3 0307 	rsb	r3, r3, #7
 8001fda:	2b04      	cmp	r3, #4
 8001fdc:	bf28      	it	cs
 8001fde:	2304      	movcs	r3, #4
 8001fe0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	3304      	adds	r3, #4
 8001fe6:	2b06      	cmp	r3, #6
 8001fe8:	d902      	bls.n	8001ff0 <NVIC_EncodePriority+0x30>
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	3b03      	subs	r3, #3
 8001fee:	e000      	b.n	8001ff2 <NVIC_EncodePriority+0x32>
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ff8:	69bb      	ldr	r3, [r7, #24]
 8001ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffe:	43da      	mvns	r2, r3
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	401a      	ands	r2, r3
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002008:	f04f 31ff 	mov.w	r1, #4294967295
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	fa01 f303 	lsl.w	r3, r1, r3
 8002012:	43d9      	mvns	r1, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002018:	4313      	orrs	r3, r2
}
 800201a:	4618      	mov	r0, r3
 800201c:	3724      	adds	r7, #36	@ 0x24
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr

08002026 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	b082      	sub	sp, #8
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f7ff ff4c 	bl	8001ecc <__NVIC_SetPriorityGrouping>
}
 8002034:	bf00      	nop
 8002036:	3708      	adds	r7, #8
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800203c:	b580      	push	{r7, lr}
 800203e:	b086      	sub	sp, #24
 8002040:	af00      	add	r7, sp, #0
 8002042:	4603      	mov	r3, r0
 8002044:	60b9      	str	r1, [r7, #8]
 8002046:	607a      	str	r2, [r7, #4]
 8002048:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800204a:	2300      	movs	r3, #0
 800204c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800204e:	f7ff ff61 	bl	8001f14 <__NVIC_GetPriorityGrouping>
 8002052:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	68b9      	ldr	r1, [r7, #8]
 8002058:	6978      	ldr	r0, [r7, #20]
 800205a:	f7ff ffb1 	bl	8001fc0 <NVIC_EncodePriority>
 800205e:	4602      	mov	r2, r0
 8002060:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002064:	4611      	mov	r1, r2
 8002066:	4618      	mov	r0, r3
 8002068:	f7ff ff80 	bl	8001f6c <__NVIC_SetPriority>
}
 800206c:	bf00      	nop
 800206e:	3718      	adds	r7, #24
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	4603      	mov	r3, r0
 800207c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800207e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002082:	4618      	mov	r0, r3
 8002084:	f7ff ff54 	bl	8001f30 <__NVIC_EnableIRQ>
}
 8002088:	bf00      	nop
 800208a:	3708      	adds	r7, #8
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002094:	4b03      	ldr	r3, [pc, #12]	@ (80020a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002096:	681b      	ldr	r3, [r3, #0]
}
 8002098:	4618      	mov	r0, r3
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	20000000 	.word	0x20000000

080020a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80020ac:	f7ff fff0 	bl	8002090 <HAL_RCC_GetHCLKFreq>
 80020b0:	4602      	mov	r2, r0
 80020b2:	4b05      	ldr	r3, [pc, #20]	@ (80020c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	0b5b      	lsrs	r3, r3, #13
 80020b8:	f003 0307 	and.w	r3, r3, #7
 80020bc:	4903      	ldr	r1, [pc, #12]	@ (80020cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80020be:	5ccb      	ldrb	r3, [r1, r3]
 80020c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	40023800 	.word	0x40023800
 80020cc:	08006ddc 	.word	0x08006ddc

080020d0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	220f      	movs	r2, #15
 80020de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80020e0:	4b12      	ldr	r3, [pc, #72]	@ (800212c <HAL_RCC_GetClockConfig+0x5c>)
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	f003 0203 	and.w	r2, r3, #3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80020ec:	4b0f      	ldr	r3, [pc, #60]	@ (800212c <HAL_RCC_GetClockConfig+0x5c>)
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80020f8:	4b0c      	ldr	r3, [pc, #48]	@ (800212c <HAL_RCC_GetClockConfig+0x5c>)
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002104:	4b09      	ldr	r3, [pc, #36]	@ (800212c <HAL_RCC_GetClockConfig+0x5c>)
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	08db      	lsrs	r3, r3, #3
 800210a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002112:	4b07      	ldr	r3, [pc, #28]	@ (8002130 <HAL_RCC_GetClockConfig+0x60>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0207 	and.w	r2, r3, #7
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	601a      	str	r2, [r3, #0]
}
 800211e:	bf00      	nop
 8002120:	370c      	adds	r7, #12
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	40023800 	.word	0x40023800
 8002130:	40023c00 	.word	0x40023c00

08002134 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d101      	bne.n	8002146 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e041      	b.n	80021ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800214c:	b2db      	uxtb	r3, r3
 800214e:	2b00      	cmp	r3, #0
 8002150:	d106      	bne.n	8002160 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f000 f839 	bl	80021d2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2202      	movs	r2, #2
 8002164:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	3304      	adds	r3, #4
 8002170:	4619      	mov	r1, r3
 8002172:	4610      	mov	r0, r2
 8002174:	f000 f9b2 	bl	80024dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2201      	movs	r2, #1
 8002184:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2201      	movs	r2, #1
 800218c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2201      	movs	r2, #1
 8002194:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2201      	movs	r2, #1
 80021a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2201      	movs	r2, #1
 80021ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2201      	movs	r2, #1
 80021b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2201      	movs	r2, #1
 80021bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2201      	movs	r2, #1
 80021c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80021d2:	b480      	push	{r7}
 80021d4:	b083      	sub	sp, #12
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80021da:	bf00      	nop
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
	...

080021e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b085      	sub	sp, #20
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d001      	beq.n	8002200 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e044      	b.n	800228a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2202      	movs	r2, #2
 8002204:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	68da      	ldr	r2, [r3, #12]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f042 0201 	orr.w	r2, r2, #1
 8002216:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a1e      	ldr	r2, [pc, #120]	@ (8002298 <HAL_TIM_Base_Start_IT+0xb0>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d018      	beq.n	8002254 <HAL_TIM_Base_Start_IT+0x6c>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800222a:	d013      	beq.n	8002254 <HAL_TIM_Base_Start_IT+0x6c>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a1a      	ldr	r2, [pc, #104]	@ (800229c <HAL_TIM_Base_Start_IT+0xb4>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d00e      	beq.n	8002254 <HAL_TIM_Base_Start_IT+0x6c>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a19      	ldr	r2, [pc, #100]	@ (80022a0 <HAL_TIM_Base_Start_IT+0xb8>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d009      	beq.n	8002254 <HAL_TIM_Base_Start_IT+0x6c>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a17      	ldr	r2, [pc, #92]	@ (80022a4 <HAL_TIM_Base_Start_IT+0xbc>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d004      	beq.n	8002254 <HAL_TIM_Base_Start_IT+0x6c>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a16      	ldr	r2, [pc, #88]	@ (80022a8 <HAL_TIM_Base_Start_IT+0xc0>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d111      	bne.n	8002278 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f003 0307 	and.w	r3, r3, #7
 800225e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2b06      	cmp	r3, #6
 8002264:	d010      	beq.n	8002288 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f042 0201 	orr.w	r2, r2, #1
 8002274:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002276:	e007      	b.n	8002288 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f042 0201 	orr.w	r2, r2, #1
 8002286:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	3714      	adds	r7, #20
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	40010000 	.word	0x40010000
 800229c:	40000400 	.word	0x40000400
 80022a0:	40000800 	.word	0x40000800
 80022a4:	40000c00 	.word	0x40000c00
 80022a8:	40014000 	.word	0x40014000

080022ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d020      	beq.n	8002310 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	f003 0302 	and.w	r3, r3, #2
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d01b      	beq.n	8002310 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f06f 0202 	mvn.w	r2, #2
 80022e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2201      	movs	r2, #1
 80022e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	699b      	ldr	r3, [r3, #24]
 80022ee:	f003 0303 	and.w	r3, r3, #3
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d003      	beq.n	80022fe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f000 f8d2 	bl	80024a0 <HAL_TIM_IC_CaptureCallback>
 80022fc:	e005      	b.n	800230a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f000 f8c4 	bl	800248c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f000 f8d5 	bl	80024b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	f003 0304 	and.w	r3, r3, #4
 8002316:	2b00      	cmp	r3, #0
 8002318:	d020      	beq.n	800235c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	f003 0304 	and.w	r3, r3, #4
 8002320:	2b00      	cmp	r3, #0
 8002322:	d01b      	beq.n	800235c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f06f 0204 	mvn.w	r2, #4
 800232c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2202      	movs	r2, #2
 8002332:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	699b      	ldr	r3, [r3, #24]
 800233a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800233e:	2b00      	cmp	r3, #0
 8002340:	d003      	beq.n	800234a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f000 f8ac 	bl	80024a0 <HAL_TIM_IC_CaptureCallback>
 8002348:	e005      	b.n	8002356 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f000 f89e 	bl	800248c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f000 f8af 	bl	80024b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2200      	movs	r2, #0
 800235a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	f003 0308 	and.w	r3, r3, #8
 8002362:	2b00      	cmp	r3, #0
 8002364:	d020      	beq.n	80023a8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	f003 0308 	and.w	r3, r3, #8
 800236c:	2b00      	cmp	r3, #0
 800236e:	d01b      	beq.n	80023a8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f06f 0208 	mvn.w	r2, #8
 8002378:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2204      	movs	r2, #4
 800237e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	69db      	ldr	r3, [r3, #28]
 8002386:	f003 0303 	and.w	r3, r3, #3
 800238a:	2b00      	cmp	r3, #0
 800238c:	d003      	beq.n	8002396 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f000 f886 	bl	80024a0 <HAL_TIM_IC_CaptureCallback>
 8002394:	e005      	b.n	80023a2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f000 f878 	bl	800248c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f000 f889 	bl	80024b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	f003 0310 	and.w	r3, r3, #16
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d020      	beq.n	80023f4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	f003 0310 	and.w	r3, r3, #16
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d01b      	beq.n	80023f4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f06f 0210 	mvn.w	r2, #16
 80023c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2208      	movs	r2, #8
 80023ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	69db      	ldr	r3, [r3, #28]
 80023d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d003      	beq.n	80023e2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f000 f860 	bl	80024a0 <HAL_TIM_IC_CaptureCallback>
 80023e0:	e005      	b.n	80023ee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f000 f852 	bl	800248c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f000 f863 	bl	80024b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d00c      	beq.n	8002418 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	f003 0301 	and.w	r3, r3, #1
 8002404:	2b00      	cmp	r3, #0
 8002406:	d007      	beq.n	8002418 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f06f 0201 	mvn.w	r2, #1
 8002410:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f7fe fe20 	bl	8001058 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800241e:	2b00      	cmp	r3, #0
 8002420:	d00c      	beq.n	800243c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002428:	2b00      	cmp	r3, #0
 800242a:	d007      	beq.n	800243c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002434:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f000 f8e0 	bl	80025fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002442:	2b00      	cmp	r3, #0
 8002444:	d00c      	beq.n	8002460 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800244c:	2b00      	cmp	r3, #0
 800244e:	d007      	beq.n	8002460 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002458:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f000 f834 	bl	80024c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	f003 0320 	and.w	r3, r3, #32
 8002466:	2b00      	cmp	r3, #0
 8002468:	d00c      	beq.n	8002484 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	f003 0320 	and.w	r3, r3, #32
 8002470:	2b00      	cmp	r3, #0
 8002472:	d007      	beq.n	8002484 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f06f 0220 	mvn.w	r2, #32
 800247c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f000 f8b2 	bl	80025e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002484:	bf00      	nop
 8002486:	3710      	adds	r7, #16
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}

0800248c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002494:	bf00      	nop
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80024a8:	bf00      	nop
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80024bc:	bf00      	nop
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr

080024c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80024d0:	bf00      	nop
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr

080024dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80024dc:	b480      	push	{r7}
 80024de:	b085      	sub	sp, #20
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	4a37      	ldr	r2, [pc, #220]	@ (80025cc <TIM_Base_SetConfig+0xf0>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d00f      	beq.n	8002514 <TIM_Base_SetConfig+0x38>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024fa:	d00b      	beq.n	8002514 <TIM_Base_SetConfig+0x38>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	4a34      	ldr	r2, [pc, #208]	@ (80025d0 <TIM_Base_SetConfig+0xf4>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d007      	beq.n	8002514 <TIM_Base_SetConfig+0x38>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	4a33      	ldr	r2, [pc, #204]	@ (80025d4 <TIM_Base_SetConfig+0xf8>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d003      	beq.n	8002514 <TIM_Base_SetConfig+0x38>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	4a32      	ldr	r2, [pc, #200]	@ (80025d8 <TIM_Base_SetConfig+0xfc>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d108      	bne.n	8002526 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800251a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	68fa      	ldr	r2, [r7, #12]
 8002522:	4313      	orrs	r3, r2
 8002524:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a28      	ldr	r2, [pc, #160]	@ (80025cc <TIM_Base_SetConfig+0xf0>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d01b      	beq.n	8002566 <TIM_Base_SetConfig+0x8a>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002534:	d017      	beq.n	8002566 <TIM_Base_SetConfig+0x8a>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a25      	ldr	r2, [pc, #148]	@ (80025d0 <TIM_Base_SetConfig+0xf4>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d013      	beq.n	8002566 <TIM_Base_SetConfig+0x8a>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a24      	ldr	r2, [pc, #144]	@ (80025d4 <TIM_Base_SetConfig+0xf8>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d00f      	beq.n	8002566 <TIM_Base_SetConfig+0x8a>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a23      	ldr	r2, [pc, #140]	@ (80025d8 <TIM_Base_SetConfig+0xfc>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d00b      	beq.n	8002566 <TIM_Base_SetConfig+0x8a>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a22      	ldr	r2, [pc, #136]	@ (80025dc <TIM_Base_SetConfig+0x100>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d007      	beq.n	8002566 <TIM_Base_SetConfig+0x8a>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a21      	ldr	r2, [pc, #132]	@ (80025e0 <TIM_Base_SetConfig+0x104>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d003      	beq.n	8002566 <TIM_Base_SetConfig+0x8a>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a20      	ldr	r2, [pc, #128]	@ (80025e4 <TIM_Base_SetConfig+0x108>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d108      	bne.n	8002578 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800256c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	68fa      	ldr	r2, [r7, #12]
 8002574:	4313      	orrs	r3, r2
 8002576:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	695b      	ldr	r3, [r3, #20]
 8002582:	4313      	orrs	r3, r2
 8002584:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	689a      	ldr	r2, [r3, #8]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a0c      	ldr	r2, [pc, #48]	@ (80025cc <TIM_Base_SetConfig+0xf0>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d103      	bne.n	80025a6 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	691a      	ldr	r2, [r3, #16]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f043 0204 	orr.w	r2, r3, #4
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2201      	movs	r2, #1
 80025b6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	68fa      	ldr	r2, [r7, #12]
 80025bc:	601a      	str	r2, [r3, #0]
}
 80025be:	bf00      	nop
 80025c0:	3714      	adds	r7, #20
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	40010000 	.word	0x40010000
 80025d0:	40000400 	.word	0x40000400
 80025d4:	40000800 	.word	0x40000800
 80025d8:	40000c00 	.word	0x40000c00
 80025dc:	40014000 	.word	0x40014000
 80025e0:	40014400 	.word	0x40014400
 80025e4:	40014800 	.word	0x40014800

080025e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80025f0:	bf00      	nop
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002604:	bf00      	nop
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8002610:	b480      	push	{r7}
 8002612:	b08b      	sub	sp, #44	@ 0x2c
 8002614:	af00      	add	r7, sp, #0
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	60b9      	str	r1, [r7, #8]
 800261a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	fa93 f3a3 	rbit	r3, r3
 800262a:	613b      	str	r3, [r7, #16]
  return result;
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d101      	bne.n	800263a <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8002636:	2320      	movs	r3, #32
 8002638:	e003      	b.n	8002642 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	fab3 f383 	clz	r3, r3
 8002640:	b2db      	uxtb	r3, r3
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	2103      	movs	r1, #3
 8002646:	fa01 f303 	lsl.w	r3, r1, r3
 800264a:	43db      	mvns	r3, r3
 800264c:	401a      	ands	r2, r3
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002652:	6a3b      	ldr	r3, [r7, #32]
 8002654:	fa93 f3a3 	rbit	r3, r3
 8002658:	61fb      	str	r3, [r7, #28]
  return result;
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800265e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002660:	2b00      	cmp	r3, #0
 8002662:	d101      	bne.n	8002668 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8002664:	2320      	movs	r3, #32
 8002666:	e003      	b.n	8002670 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8002668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800266a:	fab3 f383 	clz	r3, r3
 800266e:	b2db      	uxtb	r3, r3
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	6879      	ldr	r1, [r7, #4]
 8002674:	fa01 f303 	lsl.w	r3, r1, r3
 8002678:	431a      	orrs	r2, r3
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	601a      	str	r2, [r3, #0]
}
 800267e:	bf00      	nop
 8002680:	372c      	adds	r7, #44	@ 0x2c
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr

0800268a <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800268a:	b480      	push	{r7}
 800268c:	b085      	sub	sp, #20
 800268e:	af00      	add	r7, sp, #0
 8002690:	60f8      	str	r0, [r7, #12]
 8002692:	60b9      	str	r1, [r7, #8]
 8002694:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	685a      	ldr	r2, [r3, #4]
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	43db      	mvns	r3, r3
 800269e:	401a      	ands	r2, r3
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	6879      	ldr	r1, [r7, #4]
 80026a4:	fb01 f303 	mul.w	r3, r1, r3
 80026a8:	431a      	orrs	r2, r3
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	605a      	str	r2, [r3, #4]
}
 80026ae:	bf00      	nop
 80026b0:	3714      	adds	r7, #20
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr

080026ba <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80026ba:	b480      	push	{r7}
 80026bc:	b08b      	sub	sp, #44	@ 0x2c
 80026be:	af00      	add	r7, sp, #0
 80026c0:	60f8      	str	r0, [r7, #12]
 80026c2:	60b9      	str	r1, [r7, #8]
 80026c4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	689a      	ldr	r2, [r3, #8]
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	fa93 f3a3 	rbit	r3, r3
 80026d4:	613b      	str	r3, [r7, #16]
  return result;
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d101      	bne.n	80026e4 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80026e0:	2320      	movs	r3, #32
 80026e2:	e003      	b.n	80026ec <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	fab3 f383 	clz	r3, r3
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	2103      	movs	r1, #3
 80026f0:	fa01 f303 	lsl.w	r3, r1, r3
 80026f4:	43db      	mvns	r3, r3
 80026f6:	401a      	ands	r2, r3
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026fc:	6a3b      	ldr	r3, [r7, #32]
 80026fe:	fa93 f3a3 	rbit	r3, r3
 8002702:	61fb      	str	r3, [r7, #28]
  return result;
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800270a:	2b00      	cmp	r3, #0
 800270c:	d101      	bne.n	8002712 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800270e:	2320      	movs	r3, #32
 8002710:	e003      	b.n	800271a <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8002712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002714:	fab3 f383 	clz	r3, r3
 8002718:	b2db      	uxtb	r3, r3
 800271a:	005b      	lsls	r3, r3, #1
 800271c:	6879      	ldr	r1, [r7, #4]
 800271e:	fa01 f303 	lsl.w	r3, r1, r3
 8002722:	431a      	orrs	r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8002728:	bf00      	nop
 800272a:	372c      	adds	r7, #44	@ 0x2c
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr

08002734 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8002734:	b480      	push	{r7}
 8002736:	b08b      	sub	sp, #44	@ 0x2c
 8002738:	af00      	add	r7, sp, #0
 800273a:	60f8      	str	r0, [r7, #12]
 800273c:	60b9      	str	r1, [r7, #8]
 800273e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	68da      	ldr	r2, [r3, #12]
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	fa93 f3a3 	rbit	r3, r3
 800274e:	613b      	str	r3, [r7, #16]
  return result;
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d101      	bne.n	800275e <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800275a:	2320      	movs	r3, #32
 800275c:	e003      	b.n	8002766 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	fab3 f383 	clz	r3, r3
 8002764:	b2db      	uxtb	r3, r3
 8002766:	005b      	lsls	r3, r3, #1
 8002768:	2103      	movs	r1, #3
 800276a:	fa01 f303 	lsl.w	r3, r1, r3
 800276e:	43db      	mvns	r3, r3
 8002770:	401a      	ands	r2, r3
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002776:	6a3b      	ldr	r3, [r7, #32]
 8002778:	fa93 f3a3 	rbit	r3, r3
 800277c:	61fb      	str	r3, [r7, #28]
  return result;
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002784:	2b00      	cmp	r3, #0
 8002786:	d101      	bne.n	800278c <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8002788:	2320      	movs	r3, #32
 800278a:	e003      	b.n	8002794 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800278c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800278e:	fab3 f383 	clz	r3, r3
 8002792:	b2db      	uxtb	r3, r3
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	6879      	ldr	r1, [r7, #4]
 8002798:	fa01 f303 	lsl.w	r3, r1, r3
 800279c:	431a      	orrs	r2, r3
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	60da      	str	r2, [r3, #12]
}
 80027a2:	bf00      	nop
 80027a4:	372c      	adds	r7, #44	@ 0x2c
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr

080027ae <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80027ae:	b480      	push	{r7}
 80027b0:	b08b      	sub	sp, #44	@ 0x2c
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	60f8      	str	r0, [r7, #12]
 80027b6:	60b9      	str	r1, [r7, #8]
 80027b8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6a1a      	ldr	r2, [r3, #32]
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	fa93 f3a3 	rbit	r3, r3
 80027c8:	613b      	str	r3, [r7, #16]
  return result;
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d101      	bne.n	80027d8 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80027d4:	2320      	movs	r3, #32
 80027d6:	e003      	b.n	80027e0 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	fab3 f383 	clz	r3, r3
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	210f      	movs	r1, #15
 80027e4:	fa01 f303 	lsl.w	r3, r1, r3
 80027e8:	43db      	mvns	r3, r3
 80027ea:	401a      	ands	r2, r3
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f0:	6a3b      	ldr	r3, [r7, #32]
 80027f2:	fa93 f3a3 	rbit	r3, r3
 80027f6:	61fb      	str	r3, [r7, #28]
  return result;
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80027fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d101      	bne.n	8002806 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8002802:	2320      	movs	r3, #32
 8002804:	e003      	b.n	800280e <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8002806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002808:	fab3 f383 	clz	r3, r3
 800280c:	b2db      	uxtb	r3, r3
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	6879      	ldr	r1, [r7, #4]
 8002812:	fa01 f303 	lsl.w	r3, r1, r3
 8002816:	431a      	orrs	r2, r3
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 800281c:	bf00      	nop
 800281e:	372c      	adds	r7, #44	@ 0x2c
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr

08002828 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8002828:	b480      	push	{r7}
 800282a:	b08b      	sub	sp, #44	@ 0x2c
 800282c:	af00      	add	r7, sp, #0
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	0a1b      	lsrs	r3, r3, #8
 800283c:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	fa93 f3a3 	rbit	r3, r3
 8002844:	613b      	str	r3, [r7, #16]
  return result;
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d101      	bne.n	8002854 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8002850:	2320      	movs	r3, #32
 8002852:	e003      	b.n	800285c <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	fab3 f383 	clz	r3, r3
 800285a:	b2db      	uxtb	r3, r3
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	210f      	movs	r1, #15
 8002860:	fa01 f303 	lsl.w	r3, r1, r3
 8002864:	43db      	mvns	r3, r3
 8002866:	401a      	ands	r2, r3
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	0a1b      	lsrs	r3, r3, #8
 800286c:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800286e:	6a3b      	ldr	r3, [r7, #32]
 8002870:	fa93 f3a3 	rbit	r3, r3
 8002874:	61fb      	str	r3, [r7, #28]
  return result;
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800287a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800287c:	2b00      	cmp	r3, #0
 800287e:	d101      	bne.n	8002884 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8002880:	2320      	movs	r3, #32
 8002882:	e003      	b.n	800288c <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8002884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002886:	fab3 f383 	clz	r3, r3
 800288a:	b2db      	uxtb	r3, r3
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	6879      	ldr	r1, [r7, #4]
 8002890:	fa01 f303 	lsl.w	r3, r1, r3
 8002894:	431a      	orrs	r2, r3
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800289a:	bf00      	nop
 800289c:	372c      	adds	r7, #44	@ 0x2c
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr

080028a6 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80028a6:	b580      	push	{r7, lr}
 80028a8:	b08a      	sub	sp, #40	@ 0x28
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
 80028ae:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80028b0:	2300      	movs	r3, #0
 80028b2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t currentpin = 0x00000000U;
 80028b4:	2300      	movs	r3, #0
 80028b6:	623b      	str	r3, [r7, #32]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	fa93 f3a3 	rbit	r3, r3
 80028c4:	617b      	str	r3, [r7, #20]
  return result;
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d101      	bne.n	80028d4 <LL_GPIO_Init+0x2e>
    return 32U;
 80028d0:	2320      	movs	r3, #32
 80028d2:	e003      	b.n	80028dc <LL_GPIO_Init+0x36>
  return __builtin_clz(value);
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	fab3 f383 	clz	r3, r3
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80028de:	e057      	b.n	8002990 <LL_GPIO_Init+0xea>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	2101      	movs	r1, #1
 80028e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e8:	fa01 f303 	lsl.w	r3, r1, r3
 80028ec:	4013      	ands	r3, r2
 80028ee:	623b      	str	r3, [r7, #32]
    
    if (currentpin)
 80028f0:	6a3b      	ldr	r3, [r7, #32]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d049      	beq.n	800298a <LL_GPIO_Init+0xe4>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d003      	beq.n	8002906 <LL_GPIO_Init+0x60>
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	2b02      	cmp	r3, #2
 8002904:	d10d      	bne.n	8002922 <LL_GPIO_Init+0x7c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	461a      	mov	r2, r3
 800290c:	6a39      	ldr	r1, [r7, #32]
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f7ff fed3 	bl	80026ba <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	461a      	mov	r2, r3
 800291a:	6a39      	ldr	r1, [r7, #32]
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f7ff feb4 	bl	800268a <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	691b      	ldr	r3, [r3, #16]
 8002926:	461a      	mov	r2, r3
 8002928:	6a39      	ldr	r1, [r7, #32]
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f7ff ff02 	bl	8002734 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	2b02      	cmp	r3, #2
 8002936:	d121      	bne.n	800297c <LL_GPIO_Init+0xd6>
 8002938:	6a3b      	ldr	r3, [r7, #32]
 800293a:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	fa93 f3a3 	rbit	r3, r3
 8002942:	60bb      	str	r3, [r7, #8]
  return result;
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d101      	bne.n	8002952 <LL_GPIO_Init+0xac>
    return 32U;
 800294e:	2320      	movs	r3, #32
 8002950:	e003      	b.n	800295a <LL_GPIO_Init+0xb4>
  return __builtin_clz(value);
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	fab3 f383 	clz	r3, r3
 8002958:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800295a:	2b07      	cmp	r3, #7
 800295c:	d807      	bhi.n	800296e <LL_GPIO_Init+0xc8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	695b      	ldr	r3, [r3, #20]
 8002962:	461a      	mov	r2, r3
 8002964:	6a39      	ldr	r1, [r7, #32]
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f7ff ff21 	bl	80027ae <LL_GPIO_SetAFPin_0_7>
 800296c:	e006      	b.n	800297c <LL_GPIO_Init+0xd6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	695b      	ldr	r3, [r3, #20]
 8002972:	461a      	mov	r2, r3
 8002974:	6a39      	ldr	r1, [r7, #32]
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f7ff ff56 	bl	8002828 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	461a      	mov	r2, r3
 8002982:	6a39      	ldr	r1, [r7, #32]
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f7ff fe43 	bl	8002610 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800298a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800298c:	3301      	adds	r3, #1
 800298e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002996:	fa22 f303 	lsr.w	r3, r2, r3
 800299a:	2b00      	cmp	r3, #0
 800299c:	d1a0      	bne.n	80028e0 <LL_GPIO_Init+0x3a>
  }

  return (SUCCESS);
 800299e:	2300      	movs	r3, #0
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3728      	adds	r7, #40	@ 0x28
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <LL_I2C_Enable>:
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f043 0201 	orr.w	r2, r3, #1
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	601a      	str	r2, [r3, #0]
}
 80029bc:	bf00      	nop
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <LL_I2C_Disable>:
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f023 0201 	bic.w	r2, r3, #1
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	601a      	str	r2, [r3, #0]
}
 80029dc:	bf00      	nop
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <LL_I2C_ConfigFilters>:
{
 80029e8:	b480      	push	{r7}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->FLTR, I2C_FLTR_ANOFF | I2C_FLTR_DNF, AnalogFilter | DigitalFilter);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f8:	f023 021f 	bic.w	r2, r3, #31
 80029fc:	68b9      	ldr	r1, [r7, #8]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	430b      	orrs	r3, r1
 8002a02:	431a      	orrs	r2, r3
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8002a08:	bf00      	nop
 8002a0a:	3714      	adds	r7, #20
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <LL_I2C_SetOwnAddress1>:
{
 8002a14:	b480      	push	{r7}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	60b9      	str	r1, [r7, #8]
 8002a1e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002a28:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002a2c:	68b9      	ldr	r1, [r7, #8]
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	430a      	orrs	r2, r1
 8002a32:	431a      	orrs	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	609a      	str	r2, [r3, #8]
}
 8002a38:	bf00      	nop
 8002a3a:	3714      	adds	r7, #20
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr

08002a44 <LL_I2C_ConfigSpeed>:
  *         @arg @ref LL_I2C_DUTYCYCLE_16_9
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigSpeed(I2C_TypeDef *I2Cx, uint32_t PeriphClock, uint32_t ClockSpeed,
                                        uint32_t DutyCycle)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b087      	sub	sp, #28
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	60f8      	str	r0, [r7, #12]
 8002a4c:	60b9      	str	r1, [r7, #8]
 8002a4e:	607a      	str	r2, [r7, #4]
 8002a50:	603b      	str	r3, [r7, #0]
  uint32_t freqrange = 0x0U;
 8002a52:	2300      	movs	r3, #0
 8002a54:	613b      	str	r3, [r7, #16]
  uint32_t clockconfig = 0x0U;
 8002a56:	2300      	movs	r3, #0
 8002a58:	617b      	str	r3, [r7, #20]

  /* Compute frequency range */
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	4a42      	ldr	r2, [pc, #264]	@ (8002b68 <LL_I2C_ConfigSpeed+0x124>)
 8002a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a62:	0c9b      	lsrs	r3, r3, #18
 8002a64:	613b      	str	r3, [r7, #16]

  /* Configure I2Cx: Frequency range register */
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	431a      	orrs	r2, r3
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	605a      	str	r2, [r3, #4]

  /* Configure I2Cx: Rise Time register */
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	6a1b      	ldr	r3, [r3, #32]
 8002a7a:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	493a      	ldr	r1, [pc, #232]	@ (8002b6c <LL_I2C_ConfigSpeed+0x128>)
 8002a82:	428b      	cmp	r3, r1
 8002a84:	d802      	bhi.n	8002a8c <LL_I2C_ConfigSpeed+0x48>
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	3301      	adds	r3, #1
 8002a8a:	e009      	b.n	8002aa0 <LL_I2C_ConfigSpeed+0x5c>
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8002a92:	fb01 f303 	mul.w	r3, r1, r3
 8002a96:	4936      	ldr	r1, [pc, #216]	@ (8002b70 <LL_I2C_ConfigSpeed+0x12c>)
 8002a98:	fba1 1303 	umull	r1, r3, r1, r3
 8002a9c:	099b      	lsrs	r3, r3, #6
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	431a      	orrs	r2, r3
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	621a      	str	r2, [r3, #32]

  /* Configure Speed mode, Duty Cycle and Clock control register value */
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a30      	ldr	r2, [pc, #192]	@ (8002b6c <LL_I2C_ConfigSpeed+0x128>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d939      	bls.n	8002b22 <LL_I2C_ConfigSpeed+0xde>
  {
    /* Set Speed mode at fast and duty cycle for Clock Speed request in fast clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d117      	bne.n	8002ae4 <LL_I2C_ConfigSpeed+0xa0>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	005b      	lsls	r3, r3, #1
 8002aba:	4413      	add	r3, r2
 8002abc:	68ba      	ldr	r2, [r7, #8]
 8002abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ac2:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d009      	beq.n	8002ade <LL_I2C_ConfigSpeed+0x9a>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	4613      	mov	r3, r2
 8002ace:	005b      	lsls	r3, r3, #1
 8002ad0:	4413      	add	r3, r2
 8002ad2:	68ba      	ldr	r2, [r7, #8]
 8002ad4:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8002ad8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002adc:	e01d      	b.n	8002b1a <LL_I2C_ConfigSpeed+0xd6>
 8002ade:	f248 0301 	movw	r3, #32769	@ 0x8001
 8002ae2:	e01a      	b.n	8002b1a <LL_I2C_ConfigSpeed+0xd6>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	4413      	add	r3, r2
 8002aec:	009a      	lsls	r2, r3, #2
 8002aee:	4413      	add	r3, r2
 8002af0:	68ba      	ldr	r2, [r7, #8]
 8002af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002af6:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d00b      	beq.n	8002b16 <LL_I2C_ConfigSpeed+0xd2>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	4613      	mov	r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	4413      	add	r3, r2
 8002b06:	009a      	lsls	r2, r3, #2
 8002b08:	4413      	add	r3, r2
 8002b0a:	68ba      	ldr	r2, [r7, #8]
 8002b0c:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8002b10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b14:	e001      	b.n	8002b1a <LL_I2C_ConfigSpeed+0xd6>
 8002b16:	f248 0301 	movw	r3, #32769	@ 0x8001
 8002b1a:	683a      	ldr	r2, [r7, #0]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	617b      	str	r3, [r7, #20]
 8002b20:	e011      	b.n	8002b46 <LL_I2C_ConfigSpeed+0x102>
  }
  else
  {
    /* Set Speed mode at standard for Clock Speed request in standard clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	68ba      	ldr	r2, [r7, #8]
 8002b28:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b2c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002b30:	4013      	ands	r3, r2
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d005      	beq.n	8002b42 <LL_I2C_ConfigSpeed+0xfe>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8002b3a:	68ba      	ldr	r2, [r7, #8]
 8002b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b40:	e000      	b.n	8002b44 <LL_I2C_ConfigSpeed+0x100>
 8002b42:	2304      	movs	r3, #4
 8002b44:	617b      	str	r3, [r7, #20]
  }

  /* Configure I2Cx: Clock control register */
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	69db      	ldr	r3, [r3, #28]
 8002b4a:	f423 434f 	bic.w	r3, r3, #52992	@ 0xcf00
 8002b4e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002b52:	697a      	ldr	r2, [r7, #20]
 8002b54:	431a      	orrs	r2, r3
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	61da      	str	r2, [r3, #28]
}
 8002b5a:	bf00      	nop
 8002b5c:	371c      	adds	r7, #28
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop
 8002b68:	431bde83 	.word	0x431bde83
 8002b6c:	000186a0 	.word	0x000186a0
 8002b70:	10624dd3 	.word	0x10624dd3

08002b74 <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f023 021a 	bic.w	r2, r3, #26
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	431a      	orrs	r2, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	601a      	str	r2, [r3, #0]
}
 8002b8e:	bf00      	nop
 8002b90:	370c      	adds	r7, #12
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr

08002b9a <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	b083      	sub	sp, #12
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
 8002ba2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	431a      	orrs	r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	601a      	str	r2, [r3, #0]
}
 8002bb4:	bf00      	nop
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr

08002bc0 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b086      	sub	sp, #24
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f7ff fefc 	bl	80029c8 <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8002bd0:	f107 0308 	add.w	r3, r7, #8
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f000 f89d 	bl	8002d14 <LL_RCC_GetSystemClocksFreq>
  /*---------------------------- I2Cx FLTR Configuration -----------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_FLTR_ANFOFF bit
   * - DigitalFilter: I2C_FLTR_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	68d9      	ldr	r1, [r3, #12]
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	691b      	ldr	r3, [r3, #16]
 8002be2:	461a      	mov	r2, r3
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f7ff feff 	bl	80029e8 <LL_I2C_ConfigFilters>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 8002bea:	6939      	ldr	r1, [r7, #16]
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	685a      	ldr	r2, [r3, #4]
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f7ff ff25 	bl	8002a44 <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	6959      	ldr	r1, [r3, #20]
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	69db      	ldr	r3, [r3, #28]
 8002c02:	461a      	mov	r2, r3
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f7ff ff05 	bl	8002a14 <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4619      	mov	r1, r3
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f7ff ffaf 	bl	8002b74 <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f7ff fec6 	bl	80029a8 <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	699b      	ldr	r3, [r3, #24]
 8002c20:	4619      	mov	r1, r3
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f7ff ffb9 	bl	8002b9a <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3718      	adds	r7, #24
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
	...

08002c34 <LL_RCC_GetSysClkSource>:
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002c38:	4b04      	ldr	r3, [pc, #16]	@ (8002c4c <LL_RCC_GetSysClkSource+0x18>)
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f003 030c 	and.w	r3, r3, #12
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	40023800 	.word	0x40023800

08002c50 <LL_RCC_GetAHBPrescaler>:
{
 8002c50:	b480      	push	{r7}
 8002c52:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002c54:	4b04      	ldr	r3, [pc, #16]	@ (8002c68 <LL_RCC_GetAHBPrescaler+0x18>)
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	40023800 	.word	0x40023800

08002c6c <LL_RCC_GetAPB1Prescaler>:
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002c70:	4b04      	ldr	r3, [pc, #16]	@ (8002c84 <LL_RCC_GetAPB1Prescaler+0x18>)
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	40023800 	.word	0x40023800

08002c88 <LL_RCC_GetAPB2Prescaler>:
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002c8c:	4b04      	ldr	r3, [pc, #16]	@ (8002ca0 <LL_RCC_GetAPB2Prescaler+0x18>)
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	40023800 	.word	0x40023800

08002ca4 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002ca8:	4b04      	ldr	r3, [pc, #16]	@ (8002cbc <LL_RCC_PLL_GetMainSource+0x18>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	40023800 	.word	0x40023800

08002cc0 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002cc4:	4b04      	ldr	r3, [pc, #16]	@ (8002cd8 <LL_RCC_PLL_GetN+0x18>)
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	099b      	lsrs	r3, r3, #6
 8002cca:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr
 8002cd8:	40023800 	.word	0x40023800

08002cdc <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8002ce0:	4b04      	ldr	r3, [pc, #16]	@ (8002cf4 <LL_RCC_PLL_GetP+0x18>)
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	40023800 	.word	0x40023800

08002cf8 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002cfc:	4b04      	ldr	r3, [pc, #16]	@ (8002d10 <LL_RCC_PLL_GetDivider+0x18>)
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop
 8002d10:	40023800 	.word	0x40023800

08002d14 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8002d1c:	f000 f820 	bl	8002d60 <RCC_GetSystemClockFreq>
 8002d20:	4602      	mov	r2, r0
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f000 f840 	bl	8002db0 <RCC_GetHCLKClockFreq>
 8002d30:	4602      	mov	r2, r0
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f000 f84e 	bl	8002ddc <RCC_GetPCLK1ClockFreq>
 8002d40:	4602      	mov	r2, r0
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f000 f85a 	bl	8002e04 <RCC_GetPCLK2ClockFreq>
 8002d50:	4602      	mov	r2, r0
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	60da      	str	r2, [r3, #12]
}
 8002d56:	bf00      	nop
 8002d58:	3708      	adds	r7, #8
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
	...

08002d60 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8002d66:	2300      	movs	r3, #0
 8002d68:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8002d6a:	f7ff ff63 	bl	8002c34 <LL_RCC_GetSysClkSource>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b08      	cmp	r3, #8
 8002d72:	d00c      	beq.n	8002d8e <RCC_GetSystemClockFreq+0x2e>
 8002d74:	2b08      	cmp	r3, #8
 8002d76:	d80f      	bhi.n	8002d98 <RCC_GetSystemClockFreq+0x38>
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d002      	beq.n	8002d82 <RCC_GetSystemClockFreq+0x22>
 8002d7c:	2b04      	cmp	r3, #4
 8002d7e:	d003      	beq.n	8002d88 <RCC_GetSystemClockFreq+0x28>
 8002d80:	e00a      	b.n	8002d98 <RCC_GetSystemClockFreq+0x38>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8002d82:	4b09      	ldr	r3, [pc, #36]	@ (8002da8 <RCC_GetSystemClockFreq+0x48>)
 8002d84:	607b      	str	r3, [r7, #4]
      break;
 8002d86:	e00a      	b.n	8002d9e <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8002d88:	4b08      	ldr	r3, [pc, #32]	@ (8002dac <RCC_GetSystemClockFreq+0x4c>)
 8002d8a:	607b      	str	r3, [r7, #4]
      break;
 8002d8c:	e007      	b.n	8002d9e <RCC_GetSystemClockFreq+0x3e>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8002d8e:	2008      	movs	r0, #8
 8002d90:	f000 f84c 	bl	8002e2c <RCC_PLL_GetFreqDomain_SYS>
 8002d94:	6078      	str	r0, [r7, #4]
      break;
 8002d96:	e002      	b.n	8002d9e <RCC_GetSystemClockFreq+0x3e>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8002d98:	4b03      	ldr	r3, [pc, #12]	@ (8002da8 <RCC_GetSystemClockFreq+0x48>)
 8002d9a:	607b      	str	r3, [r7, #4]
      break;
 8002d9c:	bf00      	nop
  }

  return frequency;
 8002d9e:	687b      	ldr	r3, [r7, #4]
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3708      	adds	r7, #8
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	00f42400 	.word	0x00f42400
 8002dac:	007a1200 	.word	0x007a1200

08002db0 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002db8:	f7ff ff4a 	bl	8002c50 <LL_RCC_GetAHBPrescaler>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	091b      	lsrs	r3, r3, #4
 8002dc0:	f003 030f 	and.w	r3, r3, #15
 8002dc4:	4a04      	ldr	r2, [pc, #16]	@ (8002dd8 <RCC_GetHCLKClockFreq+0x28>)
 8002dc6:	5cd3      	ldrb	r3, [r2, r3]
 8002dc8:	461a      	mov	r2, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	40d3      	lsrs	r3, r2
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3708      	adds	r7, #8
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	08006dcc 	.word	0x08006dcc

08002ddc <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002de4:	f7ff ff42 	bl	8002c6c <LL_RCC_GetAPB1Prescaler>
 8002de8:	4603      	mov	r3, r0
 8002dea:	0a9b      	lsrs	r3, r3, #10
 8002dec:	4a04      	ldr	r2, [pc, #16]	@ (8002e00 <RCC_GetPCLK1ClockFreq+0x24>)
 8002dee:	5cd3      	ldrb	r3, [r2, r3]
 8002df0:	461a      	mov	r2, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	40d3      	lsrs	r3, r2
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3708      	adds	r7, #8
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	08006ddc 	.word	0x08006ddc

08002e04 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002e0c:	f7ff ff3c 	bl	8002c88 <LL_RCC_GetAPB2Prescaler>
 8002e10:	4603      	mov	r3, r0
 8002e12:	0b5b      	lsrs	r3, r3, #13
 8002e14:	4a04      	ldr	r2, [pc, #16]	@ (8002e28 <RCC_GetPCLK2ClockFreq+0x24>)
 8002e16:	5cd3      	ldrb	r3, [r2, r3]
 8002e18:	461a      	mov	r2, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	40d3      	lsrs	r3, r2
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3708      	adds	r7, #8
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	08006ddc 	.word	0x08006ddc

08002e2c <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8002e2c:	b590      	push	{r4, r7, lr}
 8002e2e:	b087      	sub	sp, #28
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U;
 8002e34:	2300      	movs	r3, #0
 8002e36:	617b      	str	r3, [r7, #20]
  uint32_t pllsource = 0U;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	60fb      	str	r3, [r7, #12]
  uint32_t plloutputfreq = 0U;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8002e40:	f7ff ff30 	bl	8002ca4 <LL_RCC_PLL_GetMainSource>
 8002e44:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d004      	beq.n	8002e56 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e52:	d003      	beq.n	8002e5c <RCC_PLL_GetFreqDomain_SYS+0x30>
 8002e54:	e005      	b.n	8002e62 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8002e56:	4b12      	ldr	r3, [pc, #72]	@ (8002ea0 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002e58:	617b      	str	r3, [r7, #20]
      break;
 8002e5a:	e005      	b.n	8002e68 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8002e5c:	4b11      	ldr	r3, [pc, #68]	@ (8002ea4 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8002e5e:	617b      	str	r3, [r7, #20]
      break;
 8002e60:	e002      	b.n	8002e68 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8002e62:	4b0f      	ldr	r3, [pc, #60]	@ (8002ea0 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8002e64:	617b      	str	r3, [r7, #20]
      break;
 8002e66:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2b08      	cmp	r3, #8
 8002e6c:	d113      	bne.n	8002e96 <RCC_PLL_GetFreqDomain_SYS+0x6a>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002e6e:	f7ff ff43 	bl	8002cf8 <LL_RCC_PLL_GetDivider>
 8002e72:	4602      	mov	r2, r0
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	fbb3 f4f2 	udiv	r4, r3, r2
 8002e7a:	f7ff ff21 	bl	8002cc0 <LL_RCC_PLL_GetN>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	fb03 f404 	mul.w	r4, r3, r4
 8002e84:	f7ff ff2a 	bl	8002cdc <LL_RCC_PLL_GetP>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	0c1b      	lsrs	r3, r3, #16
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	005b      	lsls	r3, r3, #1
 8002e90:	fbb4 f3f3 	udiv	r3, r4, r3
 8002e94:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                               LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8002e96:	693b      	ldr	r3, [r7, #16]
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	371c      	adds	r7, #28
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd90      	pop	{r4, r7, pc}
 8002ea0:	00f42400 	.word	0x00f42400
 8002ea4:	007a1200 	.word	0x007a1200

08002ea8 <LL_USART_IsEnabled>:
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002eb8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ebc:	bf0c      	ite	eq
 8002ebe:	2301      	moveq	r3, #1
 8002ec0:	2300      	movne	r3, #0
 8002ec2:	b2db      	uxtb	r3, r3
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <LL_USART_SetStopBitsLength>:
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	431a      	orrs	r2, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	611a      	str	r2, [r3, #16]
}
 8002eea:	bf00      	nop
 8002eec:	370c      	adds	r7, #12
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr

08002ef6 <LL_USART_SetHWFlowCtrl>:
{
 8002ef6:	b480      	push	{r7}
 8002ef8:	b083      	sub	sp, #12
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
 8002efe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	695b      	ldr	r3, [r3, #20]
 8002f04:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	431a      	orrs	r2, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	615a      	str	r2, [r3, #20]
}
 8002f10:	bf00      	nop
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <LL_USART_SetBaudRate>:
{
 8002f1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f20:	b0c0      	sub	sp, #256	@ 0x100
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002f28:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 8002f2c:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8002f30:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8002f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f3c:	f040 810c 	bne.w	8003158 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002f40:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002f44:	2200      	movs	r2, #0
 8002f46:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002f4a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002f4e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002f52:	4622      	mov	r2, r4
 8002f54:	462b      	mov	r3, r5
 8002f56:	1891      	adds	r1, r2, r2
 8002f58:	6639      	str	r1, [r7, #96]	@ 0x60
 8002f5a:	415b      	adcs	r3, r3
 8002f5c:	667b      	str	r3, [r7, #100]	@ 0x64
 8002f5e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8002f62:	4621      	mov	r1, r4
 8002f64:	eb12 0801 	adds.w	r8, r2, r1
 8002f68:	4629      	mov	r1, r5
 8002f6a:	eb43 0901 	adc.w	r9, r3, r1
 8002f6e:	f04f 0200 	mov.w	r2, #0
 8002f72:	f04f 0300 	mov.w	r3, #0
 8002f76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f82:	4690      	mov	r8, r2
 8002f84:	4699      	mov	r9, r3
 8002f86:	4623      	mov	r3, r4
 8002f88:	eb18 0303 	adds.w	r3, r8, r3
 8002f8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002f90:	462b      	mov	r3, r5
 8002f92:	eb49 0303 	adc.w	r3, r9, r3
 8002f96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002f9a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	469a      	mov	sl, r3
 8002fa2:	4693      	mov	fp, r2
 8002fa4:	eb1a 030a 	adds.w	r3, sl, sl
 8002fa8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002faa:	eb4b 030b 	adc.w	r3, fp, fp
 8002fae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002fb0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002fb4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002fb8:	f7fd f912 	bl	80001e0 <__aeabi_uldivmod>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	460b      	mov	r3, r1
 8002fc0:	4b64      	ldr	r3, [pc, #400]	@ (8003154 <LL_USART_SetBaudRate+0x238>)
 8002fc2:	fba3 2302 	umull	r2, r3, r3, r2
 8002fc6:	095b      	lsrs	r3, r3, #5
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	011b      	lsls	r3, r3, #4
 8002fcc:	b29c      	uxth	r4, r3
 8002fce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002fd8:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002fdc:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 8002fe0:	4642      	mov	r2, r8
 8002fe2:	464b      	mov	r3, r9
 8002fe4:	1891      	adds	r1, r2, r2
 8002fe6:	6539      	str	r1, [r7, #80]	@ 0x50
 8002fe8:	415b      	adcs	r3, r3
 8002fea:	657b      	str	r3, [r7, #84]	@ 0x54
 8002fec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002ff0:	4641      	mov	r1, r8
 8002ff2:	1851      	adds	r1, r2, r1
 8002ff4:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002ff6:	4649      	mov	r1, r9
 8002ff8:	414b      	adcs	r3, r1
 8002ffa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ffc:	f04f 0200 	mov.w	r2, #0
 8003000:	f04f 0300 	mov.w	r3, #0
 8003004:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	@ 0x48
 8003008:	4659      	mov	r1, fp
 800300a:	00cb      	lsls	r3, r1, #3
 800300c:	4651      	mov	r1, sl
 800300e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003012:	4651      	mov	r1, sl
 8003014:	00ca      	lsls	r2, r1, #3
 8003016:	4610      	mov	r0, r2
 8003018:	4619      	mov	r1, r3
 800301a:	4603      	mov	r3, r0
 800301c:	4642      	mov	r2, r8
 800301e:	189b      	adds	r3, r3, r2
 8003020:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003024:	464b      	mov	r3, r9
 8003026:	460a      	mov	r2, r1
 8003028:	eb42 0303 	adc.w	r3, r2, r3
 800302c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003030:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8003034:	2200      	movs	r2, #0
 8003036:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800303a:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800303e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003042:	460b      	mov	r3, r1
 8003044:	18db      	adds	r3, r3, r3
 8003046:	643b      	str	r3, [r7, #64]	@ 0x40
 8003048:	4613      	mov	r3, r2
 800304a:	eb42 0303 	adc.w	r3, r2, r3
 800304e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003050:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003054:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8003058:	f7fd f8c2 	bl	80001e0 <__aeabi_uldivmod>
 800305c:	4602      	mov	r2, r0
 800305e:	460b      	mov	r3, r1
 8003060:	4611      	mov	r1, r2
 8003062:	4b3c      	ldr	r3, [pc, #240]	@ (8003154 <LL_USART_SetBaudRate+0x238>)
 8003064:	fba3 2301 	umull	r2, r3, r3, r1
 8003068:	095b      	lsrs	r3, r3, #5
 800306a:	2264      	movs	r2, #100	@ 0x64
 800306c:	fb02 f303 	mul.w	r3, r2, r3
 8003070:	1acb      	subs	r3, r1, r3
 8003072:	00db      	lsls	r3, r3, #3
 8003074:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003078:	4b36      	ldr	r3, [pc, #216]	@ (8003154 <LL_USART_SetBaudRate+0x238>)
 800307a:	fba3 2302 	umull	r2, r3, r3, r2
 800307e:	095b      	lsrs	r3, r3, #5
 8003080:	b29b      	uxth	r3, r3
 8003082:	005b      	lsls	r3, r3, #1
 8003084:	b29b      	uxth	r3, r3
 8003086:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800308a:	b29b      	uxth	r3, r3
 800308c:	4423      	add	r3, r4
 800308e:	b29c      	uxth	r4, r3
 8003090:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003094:	2200      	movs	r2, #0
 8003096:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800309a:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800309e:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	@ 0xc0
 80030a2:	4642      	mov	r2, r8
 80030a4:	464b      	mov	r3, r9
 80030a6:	1891      	adds	r1, r2, r2
 80030a8:	63b9      	str	r1, [r7, #56]	@ 0x38
 80030aa:	415b      	adcs	r3, r3
 80030ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80030ae:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80030b2:	4641      	mov	r1, r8
 80030b4:	1851      	adds	r1, r2, r1
 80030b6:	6339      	str	r1, [r7, #48]	@ 0x30
 80030b8:	4649      	mov	r1, r9
 80030ba:	414b      	adcs	r3, r1
 80030bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80030be:	f04f 0200 	mov.w	r2, #0
 80030c2:	f04f 0300 	mov.w	r3, #0
 80030c6:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80030ca:	4659      	mov	r1, fp
 80030cc:	00cb      	lsls	r3, r1, #3
 80030ce:	4651      	mov	r1, sl
 80030d0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030d4:	4651      	mov	r1, sl
 80030d6:	00ca      	lsls	r2, r1, #3
 80030d8:	4610      	mov	r0, r2
 80030da:	4619      	mov	r1, r3
 80030dc:	4603      	mov	r3, r0
 80030de:	4642      	mov	r2, r8
 80030e0:	189b      	adds	r3, r3, r2
 80030e2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80030e6:	464b      	mov	r3, r9
 80030e8:	460a      	mov	r2, r1
 80030ea:	eb42 0303 	adc.w	r3, r2, r3
 80030ee:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80030f2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80030f6:	2200      	movs	r2, #0
 80030f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80030fc:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8003100:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003104:	460b      	mov	r3, r1
 8003106:	18db      	adds	r3, r3, r3
 8003108:	62bb      	str	r3, [r7, #40]	@ 0x28
 800310a:	4613      	mov	r3, r2
 800310c:	eb42 0303 	adc.w	r3, r2, r3
 8003110:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003112:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003116:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 800311a:	f7fd f861 	bl	80001e0 <__aeabi_uldivmod>
 800311e:	4602      	mov	r2, r0
 8003120:	460b      	mov	r3, r1
 8003122:	4b0c      	ldr	r3, [pc, #48]	@ (8003154 <LL_USART_SetBaudRate+0x238>)
 8003124:	fba3 1302 	umull	r1, r3, r3, r2
 8003128:	095b      	lsrs	r3, r3, #5
 800312a:	2164      	movs	r1, #100	@ 0x64
 800312c:	fb01 f303 	mul.w	r3, r1, r3
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	00db      	lsls	r3, r3, #3
 8003134:	3332      	adds	r3, #50	@ 0x32
 8003136:	4a07      	ldr	r2, [pc, #28]	@ (8003154 <LL_USART_SetBaudRate+0x238>)
 8003138:	fba2 2303 	umull	r2, r3, r2, r3
 800313c:	095b      	lsrs	r3, r3, #5
 800313e:	b29b      	uxth	r3, r3
 8003140:	f003 0307 	and.w	r3, r3, #7
 8003144:	b29b      	uxth	r3, r3
 8003146:	4423      	add	r3, r4
 8003148:	b29b      	uxth	r3, r3
 800314a:	461a      	mov	r2, r3
 800314c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003150:	609a      	str	r2, [r3, #8]
}
 8003152:	e108      	b.n	8003366 <LL_USART_SetBaudRate+0x44a>
 8003154:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8003158:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800315c:	2200      	movs	r2, #0
 800315e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003162:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003166:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 800316a:	4642      	mov	r2, r8
 800316c:	464b      	mov	r3, r9
 800316e:	1891      	adds	r1, r2, r2
 8003170:	6239      	str	r1, [r7, #32]
 8003172:	415b      	adcs	r3, r3
 8003174:	627b      	str	r3, [r7, #36]	@ 0x24
 8003176:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800317a:	4641      	mov	r1, r8
 800317c:	1854      	adds	r4, r2, r1
 800317e:	4649      	mov	r1, r9
 8003180:	eb43 0501 	adc.w	r5, r3, r1
 8003184:	f04f 0200 	mov.w	r2, #0
 8003188:	f04f 0300 	mov.w	r3, #0
 800318c:	00eb      	lsls	r3, r5, #3
 800318e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003192:	00e2      	lsls	r2, r4, #3
 8003194:	4614      	mov	r4, r2
 8003196:	461d      	mov	r5, r3
 8003198:	4643      	mov	r3, r8
 800319a:	18e3      	adds	r3, r4, r3
 800319c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80031a0:	464b      	mov	r3, r9
 80031a2:	eb45 0303 	adc.w	r3, r5, r3
 80031a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80031aa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80031ae:	2200      	movs	r2, #0
 80031b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80031b4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80031b8:	f04f 0200 	mov.w	r2, #0
 80031bc:	f04f 0300 	mov.w	r3, #0
 80031c0:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 80031c4:	4629      	mov	r1, r5
 80031c6:	008b      	lsls	r3, r1, #2
 80031c8:	4621      	mov	r1, r4
 80031ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031ce:	4621      	mov	r1, r4
 80031d0:	008a      	lsls	r2, r1, #2
 80031d2:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 80031d6:	f7fd f803 	bl	80001e0 <__aeabi_uldivmod>
 80031da:	4602      	mov	r2, r0
 80031dc:	460b      	mov	r3, r1
 80031de:	4b65      	ldr	r3, [pc, #404]	@ (8003374 <LL_USART_SetBaudRate+0x458>)
 80031e0:	fba3 2302 	umull	r2, r3, r3, r2
 80031e4:	095b      	lsrs	r3, r3, #5
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	011b      	lsls	r3, r3, #4
 80031ea:	b29c      	uxth	r4, r3
 80031ec:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80031f0:	2200      	movs	r2, #0
 80031f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80031f6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80031fa:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 80031fe:	4642      	mov	r2, r8
 8003200:	464b      	mov	r3, r9
 8003202:	1891      	adds	r1, r2, r2
 8003204:	61b9      	str	r1, [r7, #24]
 8003206:	415b      	adcs	r3, r3
 8003208:	61fb      	str	r3, [r7, #28]
 800320a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800320e:	4641      	mov	r1, r8
 8003210:	1851      	adds	r1, r2, r1
 8003212:	6139      	str	r1, [r7, #16]
 8003214:	4649      	mov	r1, r9
 8003216:	414b      	adcs	r3, r1
 8003218:	617b      	str	r3, [r7, #20]
 800321a:	f04f 0200 	mov.w	r2, #0
 800321e:	f04f 0300 	mov.w	r3, #0
 8003222:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003226:	4659      	mov	r1, fp
 8003228:	00cb      	lsls	r3, r1, #3
 800322a:	4651      	mov	r1, sl
 800322c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003230:	4651      	mov	r1, sl
 8003232:	00ca      	lsls	r2, r1, #3
 8003234:	4610      	mov	r0, r2
 8003236:	4619      	mov	r1, r3
 8003238:	4603      	mov	r3, r0
 800323a:	4642      	mov	r2, r8
 800323c:	189b      	adds	r3, r3, r2
 800323e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003242:	464b      	mov	r3, r9
 8003244:	460a      	mov	r2, r1
 8003246:	eb42 0303 	adc.w	r3, r2, r3
 800324a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800324e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8003252:	2200      	movs	r2, #0
 8003254:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003258:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800325c:	f04f 0200 	mov.w	r2, #0
 8003260:	f04f 0300 	mov.w	r3, #0
 8003264:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	@ 0x80
 8003268:	4649      	mov	r1, r9
 800326a:	008b      	lsls	r3, r1, #2
 800326c:	4641      	mov	r1, r8
 800326e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003272:	4641      	mov	r1, r8
 8003274:	008a      	lsls	r2, r1, #2
 8003276:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 800327a:	f7fc ffb1 	bl	80001e0 <__aeabi_uldivmod>
 800327e:	4602      	mov	r2, r0
 8003280:	460b      	mov	r3, r1
 8003282:	4611      	mov	r1, r2
 8003284:	4b3b      	ldr	r3, [pc, #236]	@ (8003374 <LL_USART_SetBaudRate+0x458>)
 8003286:	fba3 2301 	umull	r2, r3, r3, r1
 800328a:	095b      	lsrs	r3, r3, #5
 800328c:	2264      	movs	r2, #100	@ 0x64
 800328e:	fb02 f303 	mul.w	r3, r2, r3
 8003292:	1acb      	subs	r3, r1, r3
 8003294:	011b      	lsls	r3, r3, #4
 8003296:	3332      	adds	r3, #50	@ 0x32
 8003298:	4a36      	ldr	r2, [pc, #216]	@ (8003374 <LL_USART_SetBaudRate+0x458>)
 800329a:	fba2 2303 	umull	r2, r3, r2, r3
 800329e:	095b      	lsrs	r3, r3, #5
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	4423      	add	r3, r4
 80032aa:	b29c      	uxth	r4, r3
 80032ac:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80032b0:	2200      	movs	r2, #0
 80032b2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80032b4:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80032b6:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80032ba:	4642      	mov	r2, r8
 80032bc:	464b      	mov	r3, r9
 80032be:	1891      	adds	r1, r2, r2
 80032c0:	60b9      	str	r1, [r7, #8]
 80032c2:	415b      	adcs	r3, r3
 80032c4:	60fb      	str	r3, [r7, #12]
 80032c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80032ca:	4641      	mov	r1, r8
 80032cc:	1851      	adds	r1, r2, r1
 80032ce:	6039      	str	r1, [r7, #0]
 80032d0:	4649      	mov	r1, r9
 80032d2:	414b      	adcs	r3, r1
 80032d4:	607b      	str	r3, [r7, #4]
 80032d6:	f04f 0200 	mov.w	r2, #0
 80032da:	f04f 0300 	mov.w	r3, #0
 80032de:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80032e2:	4659      	mov	r1, fp
 80032e4:	00cb      	lsls	r3, r1, #3
 80032e6:	4651      	mov	r1, sl
 80032e8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032ec:	4651      	mov	r1, sl
 80032ee:	00ca      	lsls	r2, r1, #3
 80032f0:	4610      	mov	r0, r2
 80032f2:	4619      	mov	r1, r3
 80032f4:	4603      	mov	r3, r0
 80032f6:	4642      	mov	r2, r8
 80032f8:	189b      	adds	r3, r3, r2
 80032fa:	673b      	str	r3, [r7, #112]	@ 0x70
 80032fc:	464b      	mov	r3, r9
 80032fe:	460a      	mov	r2, r1
 8003300:	eb42 0303 	adc.w	r3, r2, r3
 8003304:	677b      	str	r3, [r7, #116]	@ 0x74
 8003306:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800330a:	2200      	movs	r2, #0
 800330c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800330e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003310:	f04f 0200 	mov.w	r2, #0
 8003314:	f04f 0300 	mov.w	r3, #0
 8003318:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	@ 0x68
 800331c:	4649      	mov	r1, r9
 800331e:	008b      	lsls	r3, r1, #2
 8003320:	4641      	mov	r1, r8
 8003322:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003326:	4641      	mov	r1, r8
 8003328:	008a      	lsls	r2, r1, #2
 800332a:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800332e:	f7fc ff57 	bl	80001e0 <__aeabi_uldivmod>
 8003332:	4602      	mov	r2, r0
 8003334:	460b      	mov	r3, r1
 8003336:	4b0f      	ldr	r3, [pc, #60]	@ (8003374 <LL_USART_SetBaudRate+0x458>)
 8003338:	fba3 1302 	umull	r1, r3, r3, r2
 800333c:	095b      	lsrs	r3, r3, #5
 800333e:	2164      	movs	r1, #100	@ 0x64
 8003340:	fb01 f303 	mul.w	r3, r1, r3
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	011b      	lsls	r3, r3, #4
 8003348:	3332      	adds	r3, #50	@ 0x32
 800334a:	4a0a      	ldr	r2, [pc, #40]	@ (8003374 <LL_USART_SetBaudRate+0x458>)
 800334c:	fba2 2303 	umull	r2, r3, r2, r3
 8003350:	095b      	lsrs	r3, r3, #5
 8003352:	b29b      	uxth	r3, r3
 8003354:	f003 030f 	and.w	r3, r3, #15
 8003358:	b29b      	uxth	r3, r3
 800335a:	4423      	add	r3, r4
 800335c:	b29b      	uxth	r3, r3
 800335e:	461a      	mov	r2, r3
 8003360:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003364:	609a      	str	r2, [r3, #8]
}
 8003366:	bf00      	nop
 8003368:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800336c:	46bd      	mov	sp, r7
 800336e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003372:	bf00      	nop
 8003374:	51eb851f 	.word	0x51eb851f

08003378 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b088      	sub	sp, #32
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8003386:	2300      	movs	r3, #0
 8003388:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f7ff fd8c 	bl	8002ea8 <LL_USART_IsEnabled>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d149      	bne.n	800342a <LL_USART_Init+0xb2>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 800339e:	f023 030c 	bic.w	r3, r3, #12
 80033a2:	683a      	ldr	r2, [r7, #0]
 80033a4:	6851      	ldr	r1, [r2, #4]
 80033a6:	683a      	ldr	r2, [r7, #0]
 80033a8:	68d2      	ldr	r2, [r2, #12]
 80033aa:	4311      	orrs	r1, r2
 80033ac:	683a      	ldr	r2, [r7, #0]
 80033ae:	6912      	ldr	r2, [r2, #16]
 80033b0:	4311      	orrs	r1, r2
 80033b2:	683a      	ldr	r2, [r7, #0]
 80033b4:	6992      	ldr	r2, [r2, #24]
 80033b6:	430a      	orrs	r2, r1
 80033b8:	431a      	orrs	r2, r3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	4619      	mov	r1, r3
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f7ff fd83 	bl	8002ed0 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	695b      	ldr	r3, [r3, #20]
 80033ce:	4619      	mov	r1, r3
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f7ff fd90 	bl	8002ef6 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80033d6:	f107 0308 	add.w	r3, r7, #8
 80033da:	4618      	mov	r0, r3
 80033dc:	f7ff fc9a 	bl	8002d14 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a14      	ldr	r2, [pc, #80]	@ (8003434 <LL_USART_Init+0xbc>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d102      	bne.n	80033ee <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	61bb      	str	r3, [r7, #24]
 80033ec:	e00c      	b.n	8003408 <LL_USART_Init+0x90>
    }
    else if (USARTx == USART2)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a11      	ldr	r2, [pc, #68]	@ (8003438 <LL_USART_Init+0xc0>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d102      	bne.n	80033fc <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	61bb      	str	r3, [r7, #24]
 80033fa:	e005      	b.n	8003408 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	4a0f      	ldr	r2, [pc, #60]	@ (800343c <LL_USART_Init+0xc4>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d101      	bne.n	8003408 <LL_USART_Init+0x90>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8003408:	69bb      	ldr	r3, [r7, #24]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d00d      	beq.n	800342a <LL_USART_Init+0xb2>
        && (USART_InitStruct->BaudRate != 0U))
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d009      	beq.n	800342a <LL_USART_Init+0xb2>
    {
      status = SUCCESS;
 8003416:	2300      	movs	r3, #0
 8003418:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8003422:	69b9      	ldr	r1, [r7, #24]
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f7ff fd79 	bl	8002f1c <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800342a:	7ffb      	ldrb	r3, [r7, #31]
}
 800342c:	4618      	mov	r0, r3
 800342e:	3720      	adds	r7, #32
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	40011000 	.word	0x40011000
 8003438:	40004400 	.word	0x40004400
 800343c:	40011400 	.word	0x40011400

08003440 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003448:	4a04      	ldr	r2, [pc, #16]	@ (800345c <LL_SetSystemCoreClock+0x1c>)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6013      	str	r3, [r2, #0]
}
 800344e:	bf00      	nop
 8003450:	370c      	adds	r7, #12
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	20000000 	.word	0x20000000

08003460 <__NVIC_SetPriority>:
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	4603      	mov	r3, r0
 8003468:	6039      	str	r1, [r7, #0]
 800346a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800346c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003470:	2b00      	cmp	r3, #0
 8003472:	db0a      	blt.n	800348a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	b2da      	uxtb	r2, r3
 8003478:	490c      	ldr	r1, [pc, #48]	@ (80034ac <__NVIC_SetPriority+0x4c>)
 800347a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800347e:	0112      	lsls	r2, r2, #4
 8003480:	b2d2      	uxtb	r2, r2
 8003482:	440b      	add	r3, r1
 8003484:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003488:	e00a      	b.n	80034a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	b2da      	uxtb	r2, r3
 800348e:	4908      	ldr	r1, [pc, #32]	@ (80034b0 <__NVIC_SetPriority+0x50>)
 8003490:	79fb      	ldrb	r3, [r7, #7]
 8003492:	f003 030f 	and.w	r3, r3, #15
 8003496:	3b04      	subs	r3, #4
 8003498:	0112      	lsls	r2, r2, #4
 800349a:	b2d2      	uxtb	r2, r2
 800349c:	440b      	add	r3, r1
 800349e:	761a      	strb	r2, [r3, #24]
}
 80034a0:	bf00      	nop
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr
 80034ac:	e000e100 	.word	0xe000e100
 80034b0:	e000ed00 	.word	0xe000ed00

080034b4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80034b4:	b580      	push	{r7, lr}
 80034b6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80034b8:	4b05      	ldr	r3, [pc, #20]	@ (80034d0 <SysTick_Handler+0x1c>)
 80034ba:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80034bc:	f002 f924 	bl	8005708 <xTaskGetSchedulerState>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d001      	beq.n	80034ca <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80034c6:	f003 f81f 	bl	8006508 <xPortSysTickHandler>
  }
}
 80034ca:	bf00      	nop
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	e000e010 	.word	0xe000e010

080034d4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80034d4:	b580      	push	{r7, lr}
 80034d6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80034d8:	2100      	movs	r1, #0
 80034da:	f06f 0004 	mvn.w	r0, #4
 80034de:	f7ff ffbf 	bl	8003460 <__NVIC_SetPriority>
#endif
}
 80034e2:	bf00      	nop
 80034e4:	bd80      	pop	{r7, pc}
	...

080034e8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80034ee:	f3ef 8305 	mrs	r3, IPSR
 80034f2:	603b      	str	r3, [r7, #0]
  return(result);
 80034f4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d003      	beq.n	8003502 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80034fa:	f06f 0305 	mvn.w	r3, #5
 80034fe:	607b      	str	r3, [r7, #4]
 8003500:	e00c      	b.n	800351c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003502:	4b0a      	ldr	r3, [pc, #40]	@ (800352c <osKernelInitialize+0x44>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d105      	bne.n	8003516 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800350a:	4b08      	ldr	r3, [pc, #32]	@ (800352c <osKernelInitialize+0x44>)
 800350c:	2201      	movs	r2, #1
 800350e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003510:	2300      	movs	r3, #0
 8003512:	607b      	str	r3, [r7, #4]
 8003514:	e002      	b.n	800351c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003516:	f04f 33ff 	mov.w	r3, #4294967295
 800351a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800351c:	687b      	ldr	r3, [r7, #4]
}
 800351e:	4618      	mov	r0, r3
 8003520:	370c      	adds	r7, #12
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	200000fc 	.word	0x200000fc

08003530 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003536:	f3ef 8305 	mrs	r3, IPSR
 800353a:	603b      	str	r3, [r7, #0]
  return(result);
 800353c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800353e:	2b00      	cmp	r3, #0
 8003540:	d003      	beq.n	800354a <osKernelStart+0x1a>
    stat = osErrorISR;
 8003542:	f06f 0305 	mvn.w	r3, #5
 8003546:	607b      	str	r3, [r7, #4]
 8003548:	e010      	b.n	800356c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800354a:	4b0b      	ldr	r3, [pc, #44]	@ (8003578 <osKernelStart+0x48>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2b01      	cmp	r3, #1
 8003550:	d109      	bne.n	8003566 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003552:	f7ff ffbf 	bl	80034d4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003556:	4b08      	ldr	r3, [pc, #32]	@ (8003578 <osKernelStart+0x48>)
 8003558:	2202      	movs	r2, #2
 800355a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800355c:	f001 fc76 	bl	8004e4c <vTaskStartScheduler>
      stat = osOK;
 8003560:	2300      	movs	r3, #0
 8003562:	607b      	str	r3, [r7, #4]
 8003564:	e002      	b.n	800356c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003566:	f04f 33ff 	mov.w	r3, #4294967295
 800356a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800356c:	687b      	ldr	r3, [r7, #4]
}
 800356e:	4618      	mov	r0, r3
 8003570:	3708      	adds	r7, #8
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	200000fc 	.word	0x200000fc

0800357c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800357c:	b580      	push	{r7, lr}
 800357e:	b08e      	sub	sp, #56	@ 0x38
 8003580:	af04      	add	r7, sp, #16
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003588:	2300      	movs	r3, #0
 800358a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800358c:	f3ef 8305 	mrs	r3, IPSR
 8003590:	617b      	str	r3, [r7, #20]
  return(result);
 8003592:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003594:	2b00      	cmp	r3, #0
 8003596:	d17e      	bne.n	8003696 <osThreadNew+0x11a>
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d07b      	beq.n	8003696 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800359e:	2380      	movs	r3, #128	@ 0x80
 80035a0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80035a2:	2318      	movs	r3, #24
 80035a4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80035a6:	2300      	movs	r3, #0
 80035a8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80035aa:	f04f 33ff 	mov.w	r3, #4294967295
 80035ae:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d045      	beq.n	8003642 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d002      	beq.n	80035c4 <osThreadNew+0x48>
        name = attr->name;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	699b      	ldr	r3, [r3, #24]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d002      	beq.n	80035d2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	699b      	ldr	r3, [r3, #24]
 80035d0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d008      	beq.n	80035ea <osThreadNew+0x6e>
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	2b38      	cmp	r3, #56	@ 0x38
 80035dc:	d805      	bhi.n	80035ea <osThreadNew+0x6e>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	f003 0301 	and.w	r3, r3, #1
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d001      	beq.n	80035ee <osThreadNew+0x72>
        return (NULL);
 80035ea:	2300      	movs	r3, #0
 80035ec:	e054      	b.n	8003698 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	695b      	ldr	r3, [r3, #20]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d003      	beq.n	80035fe <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	695b      	ldr	r3, [r3, #20]
 80035fa:	089b      	lsrs	r3, r3, #2
 80035fc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d00e      	beq.n	8003624 <osThreadNew+0xa8>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	2b5b      	cmp	r3, #91	@ 0x5b
 800360c:	d90a      	bls.n	8003624 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003612:	2b00      	cmp	r3, #0
 8003614:	d006      	beq.n	8003624 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	695b      	ldr	r3, [r3, #20]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d002      	beq.n	8003624 <osThreadNew+0xa8>
        mem = 1;
 800361e:	2301      	movs	r3, #1
 8003620:	61bb      	str	r3, [r7, #24]
 8003622:	e010      	b.n	8003646 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d10c      	bne.n	8003646 <osThreadNew+0xca>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d108      	bne.n	8003646 <osThreadNew+0xca>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	691b      	ldr	r3, [r3, #16]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d104      	bne.n	8003646 <osThreadNew+0xca>
          mem = 0;
 800363c:	2300      	movs	r3, #0
 800363e:	61bb      	str	r3, [r7, #24]
 8003640:	e001      	b.n	8003646 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003642:	2300      	movs	r3, #0
 8003644:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d110      	bne.n	800366e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003654:	9202      	str	r2, [sp, #8]
 8003656:	9301      	str	r3, [sp, #4]
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	9300      	str	r3, [sp, #0]
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	6a3a      	ldr	r2, [r7, #32]
 8003660:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003662:	68f8      	ldr	r0, [r7, #12]
 8003664:	f001 fa16 	bl	8004a94 <xTaskCreateStatic>
 8003668:	4603      	mov	r3, r0
 800366a:	613b      	str	r3, [r7, #16]
 800366c:	e013      	b.n	8003696 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d110      	bne.n	8003696 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003674:	6a3b      	ldr	r3, [r7, #32]
 8003676:	b29a      	uxth	r2, r3
 8003678:	f107 0310 	add.w	r3, r7, #16
 800367c:	9301      	str	r3, [sp, #4]
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	9300      	str	r3, [sp, #0]
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003686:	68f8      	ldr	r0, [r7, #12]
 8003688:	f001 fa64 	bl	8004b54 <xTaskCreate>
 800368c:	4603      	mov	r3, r0
 800368e:	2b01      	cmp	r3, #1
 8003690:	d001      	beq.n	8003696 <osThreadNew+0x11a>
            hTask = NULL;
 8003692:	2300      	movs	r3, #0
 8003694:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003696:	693b      	ldr	r3, [r7, #16]
}
 8003698:	4618      	mov	r0, r3
 800369a:	3728      	adds	r7, #40	@ 0x28
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}

080036a0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80036a8:	f3ef 8305 	mrs	r3, IPSR
 80036ac:	60bb      	str	r3, [r7, #8]
  return(result);
 80036ae:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d003      	beq.n	80036bc <osDelay+0x1c>
    stat = osErrorISR;
 80036b4:	f06f 0305 	mvn.w	r3, #5
 80036b8:	60fb      	str	r3, [r7, #12]
 80036ba:	e007      	b.n	80036cc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80036bc:	2300      	movs	r3, #0
 80036be:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d002      	beq.n	80036cc <osDelay+0x2c>
      vTaskDelay(ticks);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f001 fb8a 	bl	8004de0 <vTaskDelay>
    }
  }

  return (stat);
 80036cc:	68fb      	ldr	r3, [r7, #12]
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3710      	adds	r7, #16
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}

080036d6 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80036d6:	b580      	push	{r7, lr}
 80036d8:	b088      	sub	sp, #32
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80036de:	2300      	movs	r3, #0
 80036e0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80036e2:	f3ef 8305 	mrs	r3, IPSR
 80036e6:	60bb      	str	r3, [r7, #8]
  return(result);
 80036e8:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d174      	bne.n	80037d8 <osMutexNew+0x102>
    if (attr != NULL) {
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d003      	beq.n	80036fc <osMutexNew+0x26>
      type = attr->attr_bits;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	61bb      	str	r3, [r7, #24]
 80036fa:	e001      	b.n	8003700 <osMutexNew+0x2a>
    } else {
      type = 0U;
 80036fc:	2300      	movs	r3, #0
 80036fe:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8003700:	69bb      	ldr	r3, [r7, #24]
 8003702:	f003 0301 	and.w	r3, r3, #1
 8003706:	2b00      	cmp	r3, #0
 8003708:	d002      	beq.n	8003710 <osMutexNew+0x3a>
      rmtx = 1U;
 800370a:	2301      	movs	r3, #1
 800370c:	617b      	str	r3, [r7, #20]
 800370e:	e001      	b.n	8003714 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8003710:	2300      	movs	r3, #0
 8003712:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	f003 0308 	and.w	r3, r3, #8
 800371a:	2b00      	cmp	r3, #0
 800371c:	d15c      	bne.n	80037d8 <osMutexNew+0x102>
      mem = -1;
 800371e:	f04f 33ff 	mov.w	r3, #4294967295
 8003722:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d015      	beq.n	8003756 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d006      	beq.n	8003740 <osMutexNew+0x6a>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	2b4f      	cmp	r3, #79	@ 0x4f
 8003738:	d902      	bls.n	8003740 <osMutexNew+0x6a>
          mem = 1;
 800373a:	2301      	movs	r3, #1
 800373c:	613b      	str	r3, [r7, #16]
 800373e:	e00c      	b.n	800375a <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d108      	bne.n	800375a <osMutexNew+0x84>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d104      	bne.n	800375a <osMutexNew+0x84>
            mem = 0;
 8003750:	2300      	movs	r3, #0
 8003752:	613b      	str	r3, [r7, #16]
 8003754:	e001      	b.n	800375a <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8003756:	2300      	movs	r3, #0
 8003758:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	2b01      	cmp	r3, #1
 800375e:	d112      	bne.n	8003786 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d007      	beq.n	8003776 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	4619      	mov	r1, r3
 800376c:	2004      	movs	r0, #4
 800376e:	f000 fbf2 	bl	8003f56 <xQueueCreateMutexStatic>
 8003772:	61f8      	str	r0, [r7, #28]
 8003774:	e016      	b.n	80037a4 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	4619      	mov	r1, r3
 800377c:	2001      	movs	r0, #1
 800377e:	f000 fbea 	bl	8003f56 <xQueueCreateMutexStatic>
 8003782:	61f8      	str	r0, [r7, #28]
 8003784:	e00e      	b.n	80037a4 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d10b      	bne.n	80037a4 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d004      	beq.n	800379c <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8003792:	2004      	movs	r0, #4
 8003794:	f000 fbc7 	bl	8003f26 <xQueueCreateMutex>
 8003798:	61f8      	str	r0, [r7, #28]
 800379a:	e003      	b.n	80037a4 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800379c:	2001      	movs	r0, #1
 800379e:	f000 fbc2 	bl	8003f26 <xQueueCreateMutex>
 80037a2:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d00c      	beq.n	80037c4 <osMutexNew+0xee>
        if (attr != NULL) {
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d003      	beq.n	80037b8 <osMutexNew+0xe2>
          name = attr->name;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	60fb      	str	r3, [r7, #12]
 80037b6:	e001      	b.n	80037bc <osMutexNew+0xe6>
        } else {
          name = NULL;
 80037b8:	2300      	movs	r3, #0
 80037ba:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80037bc:	68f9      	ldr	r1, [r7, #12]
 80037be:	69f8      	ldr	r0, [r7, #28]
 80037c0:	f001 f90a 	bl	80049d8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d006      	beq.n	80037d8 <osMutexNew+0x102>
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d003      	beq.n	80037d8 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	f043 0301 	orr.w	r3, r3, #1
 80037d6:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80037d8:	69fb      	ldr	r3, [r7, #28]
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3720      	adds	r7, #32
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}

080037e2 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80037e2:	b580      	push	{r7, lr}
 80037e4:	b086      	sub	sp, #24
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
 80037ea:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f023 0301 	bic.w	r3, r3, #1
 80037f2:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f003 0301 	and.w	r3, r3, #1
 80037fa:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80037fc:	2300      	movs	r3, #0
 80037fe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003800:	f3ef 8305 	mrs	r3, IPSR
 8003804:	60bb      	str	r3, [r7, #8]
  return(result);
 8003806:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8003808:	2b00      	cmp	r3, #0
 800380a:	d003      	beq.n	8003814 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800380c:	f06f 0305 	mvn.w	r3, #5
 8003810:	617b      	str	r3, [r7, #20]
 8003812:	e02c      	b.n	800386e <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d103      	bne.n	8003822 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800381a:	f06f 0303 	mvn.w	r3, #3
 800381e:	617b      	str	r3, [r7, #20]
 8003820:	e025      	b.n	800386e <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d011      	beq.n	800384c <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8003828:	6839      	ldr	r1, [r7, #0]
 800382a:	6938      	ldr	r0, [r7, #16]
 800382c:	f000 fbe3 	bl	8003ff6 <xQueueTakeMutexRecursive>
 8003830:	4603      	mov	r3, r0
 8003832:	2b01      	cmp	r3, #1
 8003834:	d01b      	beq.n	800386e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d003      	beq.n	8003844 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800383c:	f06f 0301 	mvn.w	r3, #1
 8003840:	617b      	str	r3, [r7, #20]
 8003842:	e014      	b.n	800386e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8003844:	f06f 0302 	mvn.w	r3, #2
 8003848:	617b      	str	r3, [r7, #20]
 800384a:	e010      	b.n	800386e <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800384c:	6839      	ldr	r1, [r7, #0]
 800384e:	6938      	ldr	r0, [r7, #16]
 8003850:	f000 fe8a 	bl	8004568 <xQueueSemaphoreTake>
 8003854:	4603      	mov	r3, r0
 8003856:	2b01      	cmp	r3, #1
 8003858:	d009      	beq.n	800386e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d003      	beq.n	8003868 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8003860:	f06f 0301 	mvn.w	r3, #1
 8003864:	617b      	str	r3, [r7, #20]
 8003866:	e002      	b.n	800386e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8003868:	f06f 0302 	mvn.w	r3, #2
 800386c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800386e:	697b      	ldr	r3, [r7, #20]
}
 8003870:	4618      	mov	r0, r3
 8003872:	3718      	adds	r7, #24
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8003878:	b580      	push	{r7, lr}
 800387a:	b086      	sub	sp, #24
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f023 0301 	bic.w	r3, r3, #1
 8003886:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f003 0301 	and.w	r3, r3, #1
 800388e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8003890:	2300      	movs	r3, #0
 8003892:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003894:	f3ef 8305 	mrs	r3, IPSR
 8003898:	60bb      	str	r3, [r7, #8]
  return(result);
 800389a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800389c:	2b00      	cmp	r3, #0
 800389e:	d003      	beq.n	80038a8 <osMutexRelease+0x30>
    stat = osErrorISR;
 80038a0:	f06f 0305 	mvn.w	r3, #5
 80038a4:	617b      	str	r3, [r7, #20]
 80038a6:	e01f      	b.n	80038e8 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d103      	bne.n	80038b6 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80038ae:	f06f 0303 	mvn.w	r3, #3
 80038b2:	617b      	str	r3, [r7, #20]
 80038b4:	e018      	b.n	80038e8 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d009      	beq.n	80038d0 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80038bc:	6938      	ldr	r0, [r7, #16]
 80038be:	f000 fb65 	bl	8003f8c <xQueueGiveMutexRecursive>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d00f      	beq.n	80038e8 <osMutexRelease+0x70>
        stat = osErrorResource;
 80038c8:	f06f 0302 	mvn.w	r3, #2
 80038cc:	617b      	str	r3, [r7, #20]
 80038ce:	e00b      	b.n	80038e8 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80038d0:	2300      	movs	r3, #0
 80038d2:	2200      	movs	r2, #0
 80038d4:	2100      	movs	r1, #0
 80038d6:	6938      	ldr	r0, [r7, #16]
 80038d8:	f000 fbc4 	bl	8004064 <xQueueGenericSend>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d002      	beq.n	80038e8 <osMutexRelease+0x70>
        stat = osErrorResource;
 80038e2:	f06f 0302 	mvn.w	r3, #2
 80038e6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80038e8:	697b      	ldr	r3, [r7, #20]
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3718      	adds	r7, #24
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}

080038f2 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80038f2:	b580      	push	{r7, lr}
 80038f4:	b08a      	sub	sp, #40	@ 0x28
 80038f6:	af02      	add	r7, sp, #8
 80038f8:	60f8      	str	r0, [r7, #12]
 80038fa:	60b9      	str	r1, [r7, #8]
 80038fc:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80038fe:	2300      	movs	r3, #0
 8003900:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003902:	f3ef 8305 	mrs	r3, IPSR
 8003906:	613b      	str	r3, [r7, #16]
  return(result);
 8003908:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800390a:	2b00      	cmp	r3, #0
 800390c:	d15f      	bne.n	80039ce <osMessageQueueNew+0xdc>
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d05c      	beq.n	80039ce <osMessageQueueNew+0xdc>
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d059      	beq.n	80039ce <osMessageQueueNew+0xdc>
    mem = -1;
 800391a:	f04f 33ff 	mov.w	r3, #4294967295
 800391e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d029      	beq.n	800397a <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	689b      	ldr	r3, [r3, #8]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d012      	beq.n	8003954 <osMessageQueueNew+0x62>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	2b4f      	cmp	r3, #79	@ 0x4f
 8003934:	d90e      	bls.n	8003954 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800393a:	2b00      	cmp	r3, #0
 800393c:	d00a      	beq.n	8003954 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	695a      	ldr	r2, [r3, #20]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	68b9      	ldr	r1, [r7, #8]
 8003946:	fb01 f303 	mul.w	r3, r1, r3
 800394a:	429a      	cmp	r2, r3
 800394c:	d302      	bcc.n	8003954 <osMessageQueueNew+0x62>
        mem = 1;
 800394e:	2301      	movs	r3, #1
 8003950:	61bb      	str	r3, [r7, #24]
 8003952:	e014      	b.n	800397e <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d110      	bne.n	800397e <osMessageQueueNew+0x8c>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d10c      	bne.n	800397e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003968:	2b00      	cmp	r3, #0
 800396a:	d108      	bne.n	800397e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	695b      	ldr	r3, [r3, #20]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d104      	bne.n	800397e <osMessageQueueNew+0x8c>
          mem = 0;
 8003974:	2300      	movs	r3, #0
 8003976:	61bb      	str	r3, [r7, #24]
 8003978:	e001      	b.n	800397e <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800397a:	2300      	movs	r3, #0
 800397c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	2b01      	cmp	r3, #1
 8003982:	d10b      	bne.n	800399c <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	691a      	ldr	r2, [r3, #16]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	2100      	movs	r1, #0
 800398e:	9100      	str	r1, [sp, #0]
 8003990:	68b9      	ldr	r1, [r7, #8]
 8003992:	68f8      	ldr	r0, [r7, #12]
 8003994:	f000 f9d2 	bl	8003d3c <xQueueGenericCreateStatic>
 8003998:	61f8      	str	r0, [r7, #28]
 800399a:	e008      	b.n	80039ae <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d105      	bne.n	80039ae <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80039a2:	2200      	movs	r2, #0
 80039a4:	68b9      	ldr	r1, [r7, #8]
 80039a6:	68f8      	ldr	r0, [r7, #12]
 80039a8:	f000 fa45 	bl	8003e36 <xQueueGenericCreate>
 80039ac:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d00c      	beq.n	80039ce <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d003      	beq.n	80039c2 <osMessageQueueNew+0xd0>
        name = attr->name;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	617b      	str	r3, [r7, #20]
 80039c0:	e001      	b.n	80039c6 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80039c2:	2300      	movs	r3, #0
 80039c4:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80039c6:	6979      	ldr	r1, [r7, #20]
 80039c8:	69f8      	ldr	r0, [r7, #28]
 80039ca:	f001 f805 	bl	80049d8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80039ce:	69fb      	ldr	r3, [r7, #28]
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3720      	adds	r7, #32
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80039d8:	b580      	push	{r7, lr}
 80039da:	b088      	sub	sp, #32
 80039dc:	af00      	add	r7, sp, #0
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	60b9      	str	r1, [r7, #8]
 80039e2:	603b      	str	r3, [r7, #0]
 80039e4:	4613      	mov	r3, r2
 80039e6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80039ec:	2300      	movs	r3, #0
 80039ee:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80039f0:	f3ef 8305 	mrs	r3, IPSR
 80039f4:	617b      	str	r3, [r7, #20]
  return(result);
 80039f6:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d028      	beq.n	8003a4e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d005      	beq.n	8003a0e <osMessageQueuePut+0x36>
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d002      	beq.n	8003a0e <osMessageQueuePut+0x36>
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d003      	beq.n	8003a16 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8003a0e:	f06f 0303 	mvn.w	r3, #3
 8003a12:	61fb      	str	r3, [r7, #28]
 8003a14:	e038      	b.n	8003a88 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8003a16:	2300      	movs	r3, #0
 8003a18:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8003a1a:	f107 0210 	add.w	r2, r7, #16
 8003a1e:	2300      	movs	r3, #0
 8003a20:	68b9      	ldr	r1, [r7, #8]
 8003a22:	69b8      	ldr	r0, [r7, #24]
 8003a24:	f000 fc20 	bl	8004268 <xQueueGenericSendFromISR>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d003      	beq.n	8003a36 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8003a2e:	f06f 0302 	mvn.w	r3, #2
 8003a32:	61fb      	str	r3, [r7, #28]
 8003a34:	e028      	b.n	8003a88 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d025      	beq.n	8003a88 <osMessageQueuePut+0xb0>
 8003a3c:	4b15      	ldr	r3, [pc, #84]	@ (8003a94 <osMessageQueuePut+0xbc>)
 8003a3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a42:	601a      	str	r2, [r3, #0]
 8003a44:	f3bf 8f4f 	dsb	sy
 8003a48:	f3bf 8f6f 	isb	sy
 8003a4c:	e01c      	b.n	8003a88 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003a4e:	69bb      	ldr	r3, [r7, #24]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d002      	beq.n	8003a5a <osMessageQueuePut+0x82>
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d103      	bne.n	8003a62 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8003a5a:	f06f 0303 	mvn.w	r3, #3
 8003a5e:	61fb      	str	r3, [r7, #28]
 8003a60:	e012      	b.n	8003a88 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8003a62:	2300      	movs	r3, #0
 8003a64:	683a      	ldr	r2, [r7, #0]
 8003a66:	68b9      	ldr	r1, [r7, #8]
 8003a68:	69b8      	ldr	r0, [r7, #24]
 8003a6a:	f000 fafb 	bl	8004064 <xQueueGenericSend>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d009      	beq.n	8003a88 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d003      	beq.n	8003a82 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8003a7a:	f06f 0301 	mvn.w	r3, #1
 8003a7e:	61fb      	str	r3, [r7, #28]
 8003a80:	e002      	b.n	8003a88 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8003a82:	f06f 0302 	mvn.w	r3, #2
 8003a86:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8003a88:	69fb      	ldr	r3, [r7, #28]
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3720      	adds	r7, #32
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	e000ed04 	.word	0xe000ed04

08003a98 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003a98:	b480      	push	{r7}
 8003a9a:	b085      	sub	sp, #20
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	60b9      	str	r1, [r7, #8]
 8003aa2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	4a07      	ldr	r2, [pc, #28]	@ (8003ac4 <vApplicationGetIdleTaskMemory+0x2c>)
 8003aa8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	4a06      	ldr	r2, [pc, #24]	@ (8003ac8 <vApplicationGetIdleTaskMemory+0x30>)
 8003aae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2280      	movs	r2, #128	@ 0x80
 8003ab4:	601a      	str	r2, [r3, #0]
}
 8003ab6:	bf00      	nop
 8003ab8:	3714      	adds	r7, #20
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr
 8003ac2:	bf00      	nop
 8003ac4:	20000100 	.word	0x20000100
 8003ac8:	2000015c 	.word	0x2000015c

08003acc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003acc:	b480      	push	{r7}
 8003ace:	b085      	sub	sp, #20
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	4a07      	ldr	r2, [pc, #28]	@ (8003af8 <vApplicationGetTimerTaskMemory+0x2c>)
 8003adc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	4a06      	ldr	r2, [pc, #24]	@ (8003afc <vApplicationGetTimerTaskMemory+0x30>)
 8003ae2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003aea:	601a      	str	r2, [r3, #0]
}
 8003aec:	bf00      	nop
 8003aee:	3714      	adds	r7, #20
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr
 8003af8:	2000035c 	.word	0x2000035c
 8003afc:	200003b8 	.word	0x200003b8

08003b00 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f103 0208 	add.w	r2, r3, #8
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f04f 32ff 	mov.w	r2, #4294967295
 8003b18:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f103 0208 	add.w	r2, r3, #8
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f103 0208 	add.w	r2, r3, #8
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003b34:	bf00      	nop
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003b4e:	bf00      	nop
 8003b50:	370c      	adds	r7, #12
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr

08003b5a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003b5a:	b480      	push	{r7}
 8003b5c:	b085      	sub	sp, #20
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
 8003b62:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	68fa      	ldr	r2, [r7, #12]
 8003b6e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	689a      	ldr	r2, [r3, #8]
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	683a      	ldr	r2, [r7, #0]
 8003b7e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	683a      	ldr	r2, [r7, #0]
 8003b84:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	1c5a      	adds	r2, r3, #1
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	601a      	str	r2, [r3, #0]
}
 8003b96:	bf00      	nop
 8003b98:	3714      	adds	r7, #20
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr

08003ba2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003ba2:	b480      	push	{r7}
 8003ba4:	b085      	sub	sp, #20
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	6078      	str	r0, [r7, #4]
 8003baa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bb8:	d103      	bne.n	8003bc2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	60fb      	str	r3, [r7, #12]
 8003bc0:	e00c      	b.n	8003bdc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	3308      	adds	r3, #8
 8003bc6:	60fb      	str	r3, [r7, #12]
 8003bc8:	e002      	b.n	8003bd0 <vListInsert+0x2e>
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	60fb      	str	r3, [r7, #12]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	68ba      	ldr	r2, [r7, #8]
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d2f6      	bcs.n	8003bca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	685a      	ldr	r2, [r3, #4]
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	683a      	ldr	r2, [r7, #0]
 8003bea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	68fa      	ldr	r2, [r7, #12]
 8003bf0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	683a      	ldr	r2, [r7, #0]
 8003bf6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	1c5a      	adds	r2, r3, #1
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	601a      	str	r2, [r3, #0]
}
 8003c08:	bf00      	nop
 8003c0a:	3714      	adds	r7, #20
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003c14:	b480      	push	{r7}
 8003c16:	b085      	sub	sp, #20
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	691b      	ldr	r3, [r3, #16]
 8003c20:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	6892      	ldr	r2, [r2, #8]
 8003c2a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	6852      	ldr	r2, [r2, #4]
 8003c34:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d103      	bne.n	8003c48 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	689a      	ldr	r2, [r3, #8]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	1e5a      	subs	r2, r3, #1
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3714      	adds	r7, #20
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d10b      	bne.n	8003c94 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003c7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c80:	f383 8811 	msr	BASEPRI, r3
 8003c84:	f3bf 8f6f 	isb	sy
 8003c88:	f3bf 8f4f 	dsb	sy
 8003c8c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003c8e:	bf00      	nop
 8003c90:	bf00      	nop
 8003c92:	e7fd      	b.n	8003c90 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003c94:	f002 fba8 	bl	80063e8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ca0:	68f9      	ldr	r1, [r7, #12]
 8003ca2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003ca4:	fb01 f303 	mul.w	r3, r1, r3
 8003ca8:	441a      	add	r2, r3
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cc4:	3b01      	subs	r3, #1
 8003cc6:	68f9      	ldr	r1, [r7, #12]
 8003cc8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003cca:	fb01 f303 	mul.w	r3, r1, r3
 8003cce:	441a      	add	r2, r3
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	22ff      	movs	r2, #255	@ 0xff
 8003cd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	22ff      	movs	r2, #255	@ 0xff
 8003ce0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d114      	bne.n	8003d14 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d01a      	beq.n	8003d28 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	3310      	adds	r3, #16
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f001 fb36 	bl	8005368 <xTaskRemoveFromEventList>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d012      	beq.n	8003d28 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003d02:	4b0d      	ldr	r3, [pc, #52]	@ (8003d38 <xQueueGenericReset+0xd0>)
 8003d04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d08:	601a      	str	r2, [r3, #0]
 8003d0a:	f3bf 8f4f 	dsb	sy
 8003d0e:	f3bf 8f6f 	isb	sy
 8003d12:	e009      	b.n	8003d28 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	3310      	adds	r3, #16
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f7ff fef1 	bl	8003b00 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	3324      	adds	r3, #36	@ 0x24
 8003d22:	4618      	mov	r0, r3
 8003d24:	f7ff feec 	bl	8003b00 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003d28:	f002 fb90 	bl	800644c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003d2c:	2301      	movs	r3, #1
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3710      	adds	r7, #16
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	e000ed04 	.word	0xe000ed04

08003d3c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b08e      	sub	sp, #56	@ 0x38
 8003d40:	af02      	add	r7, sp, #8
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	607a      	str	r2, [r7, #4]
 8003d48:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d10b      	bne.n	8003d68 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003d50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d54:	f383 8811 	msr	BASEPRI, r3
 8003d58:	f3bf 8f6f 	isb	sy
 8003d5c:	f3bf 8f4f 	dsb	sy
 8003d60:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003d62:	bf00      	nop
 8003d64:	bf00      	nop
 8003d66:	e7fd      	b.n	8003d64 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d10b      	bne.n	8003d86 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003d6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d72:	f383 8811 	msr	BASEPRI, r3
 8003d76:	f3bf 8f6f 	isb	sy
 8003d7a:	f3bf 8f4f 	dsb	sy
 8003d7e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003d80:	bf00      	nop
 8003d82:	bf00      	nop
 8003d84:	e7fd      	b.n	8003d82 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d002      	beq.n	8003d92 <xQueueGenericCreateStatic+0x56>
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d001      	beq.n	8003d96 <xQueueGenericCreateStatic+0x5a>
 8003d92:	2301      	movs	r3, #1
 8003d94:	e000      	b.n	8003d98 <xQueueGenericCreateStatic+0x5c>
 8003d96:	2300      	movs	r3, #0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d10b      	bne.n	8003db4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003d9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003da0:	f383 8811 	msr	BASEPRI, r3
 8003da4:	f3bf 8f6f 	isb	sy
 8003da8:	f3bf 8f4f 	dsb	sy
 8003dac:	623b      	str	r3, [r7, #32]
}
 8003dae:	bf00      	nop
 8003db0:	bf00      	nop
 8003db2:	e7fd      	b.n	8003db0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d102      	bne.n	8003dc0 <xQueueGenericCreateStatic+0x84>
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d101      	bne.n	8003dc4 <xQueueGenericCreateStatic+0x88>
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e000      	b.n	8003dc6 <xQueueGenericCreateStatic+0x8a>
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d10b      	bne.n	8003de2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003dca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dce:	f383 8811 	msr	BASEPRI, r3
 8003dd2:	f3bf 8f6f 	isb	sy
 8003dd6:	f3bf 8f4f 	dsb	sy
 8003dda:	61fb      	str	r3, [r7, #28]
}
 8003ddc:	bf00      	nop
 8003dde:	bf00      	nop
 8003de0:	e7fd      	b.n	8003dde <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003de2:	2350      	movs	r3, #80	@ 0x50
 8003de4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	2b50      	cmp	r3, #80	@ 0x50
 8003dea:	d00b      	beq.n	8003e04 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003dec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003df0:	f383 8811 	msr	BASEPRI, r3
 8003df4:	f3bf 8f6f 	isb	sy
 8003df8:	f3bf 8f4f 	dsb	sy
 8003dfc:	61bb      	str	r3, [r7, #24]
}
 8003dfe:	bf00      	nop
 8003e00:	bf00      	nop
 8003e02:	e7fd      	b.n	8003e00 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003e04:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003e0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d00d      	beq.n	8003e2c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003e10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003e18:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003e1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e1e:	9300      	str	r3, [sp, #0]
 8003e20:	4613      	mov	r3, r2
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	68b9      	ldr	r1, [r7, #8]
 8003e26:	68f8      	ldr	r0, [r7, #12]
 8003e28:	f000 f840 	bl	8003eac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003e2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3730      	adds	r7, #48	@ 0x30
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}

08003e36 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003e36:	b580      	push	{r7, lr}
 8003e38:	b08a      	sub	sp, #40	@ 0x28
 8003e3a:	af02      	add	r7, sp, #8
 8003e3c:	60f8      	str	r0, [r7, #12]
 8003e3e:	60b9      	str	r1, [r7, #8]
 8003e40:	4613      	mov	r3, r2
 8003e42:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d10b      	bne.n	8003e62 <xQueueGenericCreate+0x2c>
	__asm volatile
 8003e4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e4e:	f383 8811 	msr	BASEPRI, r3
 8003e52:	f3bf 8f6f 	isb	sy
 8003e56:	f3bf 8f4f 	dsb	sy
 8003e5a:	613b      	str	r3, [r7, #16]
}
 8003e5c:	bf00      	nop
 8003e5e:	bf00      	nop
 8003e60:	e7fd      	b.n	8003e5e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	68ba      	ldr	r2, [r7, #8]
 8003e66:	fb02 f303 	mul.w	r3, r2, r3
 8003e6a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	3350      	adds	r3, #80	@ 0x50
 8003e70:	4618      	mov	r0, r3
 8003e72:	f002 fbdb 	bl	800662c <pvPortMalloc>
 8003e76:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003e78:	69bb      	ldr	r3, [r7, #24]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d011      	beq.n	8003ea2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	3350      	adds	r3, #80	@ 0x50
 8003e86:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003e90:	79fa      	ldrb	r2, [r7, #7]
 8003e92:	69bb      	ldr	r3, [r7, #24]
 8003e94:	9300      	str	r3, [sp, #0]
 8003e96:	4613      	mov	r3, r2
 8003e98:	697a      	ldr	r2, [r7, #20]
 8003e9a:	68b9      	ldr	r1, [r7, #8]
 8003e9c:	68f8      	ldr	r0, [r7, #12]
 8003e9e:	f000 f805 	bl	8003eac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003ea2:	69bb      	ldr	r3, [r7, #24]
	}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3720      	adds	r7, #32
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	60b9      	str	r1, [r7, #8]
 8003eb6:	607a      	str	r2, [r7, #4]
 8003eb8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d103      	bne.n	8003ec8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	69ba      	ldr	r2, [r7, #24]
 8003ec4:	601a      	str	r2, [r3, #0]
 8003ec6:	e002      	b.n	8003ece <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003ec8:	69bb      	ldr	r3, [r7, #24]
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003ece:	69bb      	ldr	r3, [r7, #24]
 8003ed0:	68fa      	ldr	r2, [r7, #12]
 8003ed2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003ed4:	69bb      	ldr	r3, [r7, #24]
 8003ed6:	68ba      	ldr	r2, [r7, #8]
 8003ed8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003eda:	2101      	movs	r1, #1
 8003edc:	69b8      	ldr	r0, [r7, #24]
 8003ede:	f7ff fec3 	bl	8003c68 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003ee2:	69bb      	ldr	r3, [r7, #24]
 8003ee4:	78fa      	ldrb	r2, [r7, #3]
 8003ee6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003eea:	bf00      	nop
 8003eec:	3710      	adds	r7, #16
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}

08003ef2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8003ef2:	b580      	push	{r7, lr}
 8003ef4:	b082      	sub	sp, #8
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d00e      	beq.n	8003f1e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003f12:	2300      	movs	r3, #0
 8003f14:	2200      	movs	r2, #0
 8003f16:	2100      	movs	r1, #0
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f000 f8a3 	bl	8004064 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8003f1e:	bf00      	nop
 8003f20:	3708      	adds	r7, #8
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}

08003f26 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8003f26:	b580      	push	{r7, lr}
 8003f28:	b086      	sub	sp, #24
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003f30:	2301      	movs	r3, #1
 8003f32:	617b      	str	r3, [r7, #20]
 8003f34:	2300      	movs	r3, #0
 8003f36:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8003f38:	79fb      	ldrb	r3, [r7, #7]
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	6939      	ldr	r1, [r7, #16]
 8003f3e:	6978      	ldr	r0, [r7, #20]
 8003f40:	f7ff ff79 	bl	8003e36 <xQueueGenericCreate>
 8003f44:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003f46:	68f8      	ldr	r0, [r7, #12]
 8003f48:	f7ff ffd3 	bl	8003ef2 <prvInitialiseMutex>

		return xNewQueue;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
	}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3718      	adds	r7, #24
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}

08003f56 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8003f56:	b580      	push	{r7, lr}
 8003f58:	b088      	sub	sp, #32
 8003f5a:	af02      	add	r7, sp, #8
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	6039      	str	r1, [r7, #0]
 8003f60:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003f62:	2301      	movs	r3, #1
 8003f64:	617b      	str	r3, [r7, #20]
 8003f66:	2300      	movs	r3, #0
 8003f68:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8003f6a:	79fb      	ldrb	r3, [r7, #7]
 8003f6c:	9300      	str	r3, [sp, #0]
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	2200      	movs	r2, #0
 8003f72:	6939      	ldr	r1, [r7, #16]
 8003f74:	6978      	ldr	r0, [r7, #20]
 8003f76:	f7ff fee1 	bl	8003d3c <xQueueGenericCreateStatic>
 8003f7a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003f7c:	68f8      	ldr	r0, [r7, #12]
 8003f7e:	f7ff ffb8 	bl	8003ef2 <prvInitialiseMutex>

		return xNewQueue;
 8003f82:	68fb      	ldr	r3, [r7, #12]
	}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3718      	adds	r7, #24
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}

08003f8c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8003f8c:	b590      	push	{r4, r7, lr}
 8003f8e:	b087      	sub	sp, #28
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d10b      	bne.n	8003fb6 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8003f9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fa2:	f383 8811 	msr	BASEPRI, r3
 8003fa6:	f3bf 8f6f 	isb	sy
 8003faa:	f3bf 8f4f 	dsb	sy
 8003fae:	60fb      	str	r3, [r7, #12]
}
 8003fb0:	bf00      	nop
 8003fb2:	bf00      	nop
 8003fb4:	e7fd      	b.n	8003fb2 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	689c      	ldr	r4, [r3, #8]
 8003fba:	f001 fb95 	bl	80056e8 <xTaskGetCurrentTaskHandle>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	429c      	cmp	r4, r3
 8003fc2:	d111      	bne.n	8003fe8 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	1e5a      	subs	r2, r3, #1
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d105      	bne.n	8003fe2 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	2200      	movs	r2, #0
 8003fda:	2100      	movs	r1, #0
 8003fdc:	6938      	ldr	r0, [r7, #16]
 8003fde:	f000 f841 	bl	8004064 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	617b      	str	r3, [r7, #20]
 8003fe6:	e001      	b.n	8003fec <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8003fec:	697b      	ldr	r3, [r7, #20]
	}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	371c      	adds	r7, #28
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd90      	pop	{r4, r7, pc}

08003ff6 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8003ff6:	b590      	push	{r4, r7, lr}
 8003ff8:	b087      	sub	sp, #28
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	6078      	str	r0, [r7, #4]
 8003ffe:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d10b      	bne.n	8004022 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800400a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800400e:	f383 8811 	msr	BASEPRI, r3
 8004012:	f3bf 8f6f 	isb	sy
 8004016:	f3bf 8f4f 	dsb	sy
 800401a:	60fb      	str	r3, [r7, #12]
}
 800401c:	bf00      	nop
 800401e:	bf00      	nop
 8004020:	e7fd      	b.n	800401e <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	689c      	ldr	r4, [r3, #8]
 8004026:	f001 fb5f 	bl	80056e8 <xTaskGetCurrentTaskHandle>
 800402a:	4603      	mov	r3, r0
 800402c:	429c      	cmp	r4, r3
 800402e:	d107      	bne.n	8004040 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	1c5a      	adds	r2, r3, #1
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800403a:	2301      	movs	r3, #1
 800403c:	617b      	str	r3, [r7, #20]
 800403e:	e00c      	b.n	800405a <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8004040:	6839      	ldr	r1, [r7, #0]
 8004042:	6938      	ldr	r0, [r7, #16]
 8004044:	f000 fa90 	bl	8004568 <xQueueSemaphoreTake>
 8004048:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d004      	beq.n	800405a <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	1c5a      	adds	r2, r3, #1
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800405a:	697b      	ldr	r3, [r7, #20]
	}
 800405c:	4618      	mov	r0, r3
 800405e:	371c      	adds	r7, #28
 8004060:	46bd      	mov	sp, r7
 8004062:	bd90      	pop	{r4, r7, pc}

08004064 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b08e      	sub	sp, #56	@ 0x38
 8004068:	af00      	add	r7, sp, #0
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	60b9      	str	r1, [r7, #8]
 800406e:	607a      	str	r2, [r7, #4]
 8004070:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004072:	2300      	movs	r3, #0
 8004074:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800407a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800407c:	2b00      	cmp	r3, #0
 800407e:	d10b      	bne.n	8004098 <xQueueGenericSend+0x34>
	__asm volatile
 8004080:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004084:	f383 8811 	msr	BASEPRI, r3
 8004088:	f3bf 8f6f 	isb	sy
 800408c:	f3bf 8f4f 	dsb	sy
 8004090:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004092:	bf00      	nop
 8004094:	bf00      	nop
 8004096:	e7fd      	b.n	8004094 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d103      	bne.n	80040a6 <xQueueGenericSend+0x42>
 800409e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d101      	bne.n	80040aa <xQueueGenericSend+0x46>
 80040a6:	2301      	movs	r3, #1
 80040a8:	e000      	b.n	80040ac <xQueueGenericSend+0x48>
 80040aa:	2300      	movs	r3, #0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d10b      	bne.n	80040c8 <xQueueGenericSend+0x64>
	__asm volatile
 80040b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040b4:	f383 8811 	msr	BASEPRI, r3
 80040b8:	f3bf 8f6f 	isb	sy
 80040bc:	f3bf 8f4f 	dsb	sy
 80040c0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80040c2:	bf00      	nop
 80040c4:	bf00      	nop
 80040c6:	e7fd      	b.n	80040c4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d103      	bne.n	80040d6 <xQueueGenericSend+0x72>
 80040ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d101      	bne.n	80040da <xQueueGenericSend+0x76>
 80040d6:	2301      	movs	r3, #1
 80040d8:	e000      	b.n	80040dc <xQueueGenericSend+0x78>
 80040da:	2300      	movs	r3, #0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d10b      	bne.n	80040f8 <xQueueGenericSend+0x94>
	__asm volatile
 80040e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040e4:	f383 8811 	msr	BASEPRI, r3
 80040e8:	f3bf 8f6f 	isb	sy
 80040ec:	f3bf 8f4f 	dsb	sy
 80040f0:	623b      	str	r3, [r7, #32]
}
 80040f2:	bf00      	nop
 80040f4:	bf00      	nop
 80040f6:	e7fd      	b.n	80040f4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80040f8:	f001 fb06 	bl	8005708 <xTaskGetSchedulerState>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d102      	bne.n	8004108 <xQueueGenericSend+0xa4>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d101      	bne.n	800410c <xQueueGenericSend+0xa8>
 8004108:	2301      	movs	r3, #1
 800410a:	e000      	b.n	800410e <xQueueGenericSend+0xaa>
 800410c:	2300      	movs	r3, #0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d10b      	bne.n	800412a <xQueueGenericSend+0xc6>
	__asm volatile
 8004112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004116:	f383 8811 	msr	BASEPRI, r3
 800411a:	f3bf 8f6f 	isb	sy
 800411e:	f3bf 8f4f 	dsb	sy
 8004122:	61fb      	str	r3, [r7, #28]
}
 8004124:	bf00      	nop
 8004126:	bf00      	nop
 8004128:	e7fd      	b.n	8004126 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800412a:	f002 f95d 	bl	80063e8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800412e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004130:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004134:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004136:	429a      	cmp	r2, r3
 8004138:	d302      	bcc.n	8004140 <xQueueGenericSend+0xdc>
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	2b02      	cmp	r3, #2
 800413e:	d129      	bne.n	8004194 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004140:	683a      	ldr	r2, [r7, #0]
 8004142:	68b9      	ldr	r1, [r7, #8]
 8004144:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004146:	f000 fb37 	bl	80047b8 <prvCopyDataToQueue>
 800414a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800414c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800414e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004150:	2b00      	cmp	r3, #0
 8004152:	d010      	beq.n	8004176 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004156:	3324      	adds	r3, #36	@ 0x24
 8004158:	4618      	mov	r0, r3
 800415a:	f001 f905 	bl	8005368 <xTaskRemoveFromEventList>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d013      	beq.n	800418c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004164:	4b3f      	ldr	r3, [pc, #252]	@ (8004264 <xQueueGenericSend+0x200>)
 8004166:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800416a:	601a      	str	r2, [r3, #0]
 800416c:	f3bf 8f4f 	dsb	sy
 8004170:	f3bf 8f6f 	isb	sy
 8004174:	e00a      	b.n	800418c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004176:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004178:	2b00      	cmp	r3, #0
 800417a:	d007      	beq.n	800418c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800417c:	4b39      	ldr	r3, [pc, #228]	@ (8004264 <xQueueGenericSend+0x200>)
 800417e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004182:	601a      	str	r2, [r3, #0]
 8004184:	f3bf 8f4f 	dsb	sy
 8004188:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800418c:	f002 f95e 	bl	800644c <vPortExitCritical>
				return pdPASS;
 8004190:	2301      	movs	r3, #1
 8004192:	e063      	b.n	800425c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d103      	bne.n	80041a2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800419a:	f002 f957 	bl	800644c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800419e:	2300      	movs	r3, #0
 80041a0:	e05c      	b.n	800425c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80041a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d106      	bne.n	80041b6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80041a8:	f107 0314 	add.w	r3, r7, #20
 80041ac:	4618      	mov	r0, r3
 80041ae:	f001 f93f 	bl	8005430 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80041b2:	2301      	movs	r3, #1
 80041b4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80041b6:	f002 f949 	bl	800644c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80041ba:	f000 feaf 	bl	8004f1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80041be:	f002 f913 	bl	80063e8 <vPortEnterCritical>
 80041c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80041c8:	b25b      	sxtb	r3, r3
 80041ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ce:	d103      	bne.n	80041d8 <xQueueGenericSend+0x174>
 80041d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041d2:	2200      	movs	r2, #0
 80041d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80041d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041da:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80041de:	b25b      	sxtb	r3, r3
 80041e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041e4:	d103      	bne.n	80041ee <xQueueGenericSend+0x18a>
 80041e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041e8:	2200      	movs	r2, #0
 80041ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80041ee:	f002 f92d 	bl	800644c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80041f2:	1d3a      	adds	r2, r7, #4
 80041f4:	f107 0314 	add.w	r3, r7, #20
 80041f8:	4611      	mov	r1, r2
 80041fa:	4618      	mov	r0, r3
 80041fc:	f001 f92e 	bl	800545c <xTaskCheckForTimeOut>
 8004200:	4603      	mov	r3, r0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d124      	bne.n	8004250 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004206:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004208:	f000 fbce 	bl	80049a8 <prvIsQueueFull>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d018      	beq.n	8004244 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004214:	3310      	adds	r3, #16
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	4611      	mov	r1, r2
 800421a:	4618      	mov	r0, r3
 800421c:	f001 f852 	bl	80052c4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004220:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004222:	f000 fb59 	bl	80048d8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004226:	f000 fe87 	bl	8004f38 <xTaskResumeAll>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	f47f af7c 	bne.w	800412a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004232:	4b0c      	ldr	r3, [pc, #48]	@ (8004264 <xQueueGenericSend+0x200>)
 8004234:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004238:	601a      	str	r2, [r3, #0]
 800423a:	f3bf 8f4f 	dsb	sy
 800423e:	f3bf 8f6f 	isb	sy
 8004242:	e772      	b.n	800412a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004244:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004246:	f000 fb47 	bl	80048d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800424a:	f000 fe75 	bl	8004f38 <xTaskResumeAll>
 800424e:	e76c      	b.n	800412a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004250:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004252:	f000 fb41 	bl	80048d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004256:	f000 fe6f 	bl	8004f38 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800425a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800425c:	4618      	mov	r0, r3
 800425e:	3738      	adds	r7, #56	@ 0x38
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}
 8004264:	e000ed04 	.word	0xe000ed04

08004268 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b090      	sub	sp, #64	@ 0x40
 800426c:	af00      	add	r7, sp, #0
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	607a      	str	r2, [r7, #4]
 8004274:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800427a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800427c:	2b00      	cmp	r3, #0
 800427e:	d10b      	bne.n	8004298 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004284:	f383 8811 	msr	BASEPRI, r3
 8004288:	f3bf 8f6f 	isb	sy
 800428c:	f3bf 8f4f 	dsb	sy
 8004290:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004292:	bf00      	nop
 8004294:	bf00      	nop
 8004296:	e7fd      	b.n	8004294 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d103      	bne.n	80042a6 <xQueueGenericSendFromISR+0x3e>
 800429e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d101      	bne.n	80042aa <xQueueGenericSendFromISR+0x42>
 80042a6:	2301      	movs	r3, #1
 80042a8:	e000      	b.n	80042ac <xQueueGenericSendFromISR+0x44>
 80042aa:	2300      	movs	r3, #0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d10b      	bne.n	80042c8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80042b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042b4:	f383 8811 	msr	BASEPRI, r3
 80042b8:	f3bf 8f6f 	isb	sy
 80042bc:	f3bf 8f4f 	dsb	sy
 80042c0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80042c2:	bf00      	nop
 80042c4:	bf00      	nop
 80042c6:	e7fd      	b.n	80042c4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d103      	bne.n	80042d6 <xQueueGenericSendFromISR+0x6e>
 80042ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d101      	bne.n	80042da <xQueueGenericSendFromISR+0x72>
 80042d6:	2301      	movs	r3, #1
 80042d8:	e000      	b.n	80042dc <xQueueGenericSendFromISR+0x74>
 80042da:	2300      	movs	r3, #0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d10b      	bne.n	80042f8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80042e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042e4:	f383 8811 	msr	BASEPRI, r3
 80042e8:	f3bf 8f6f 	isb	sy
 80042ec:	f3bf 8f4f 	dsb	sy
 80042f0:	623b      	str	r3, [r7, #32]
}
 80042f2:	bf00      	nop
 80042f4:	bf00      	nop
 80042f6:	e7fd      	b.n	80042f4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80042f8:	f002 f956 	bl	80065a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80042fc:	f3ef 8211 	mrs	r2, BASEPRI
 8004300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004304:	f383 8811 	msr	BASEPRI, r3
 8004308:	f3bf 8f6f 	isb	sy
 800430c:	f3bf 8f4f 	dsb	sy
 8004310:	61fa      	str	r2, [r7, #28]
 8004312:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004314:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004316:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800431a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800431c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800431e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004320:	429a      	cmp	r2, r3
 8004322:	d302      	bcc.n	800432a <xQueueGenericSendFromISR+0xc2>
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	2b02      	cmp	r3, #2
 8004328:	d12f      	bne.n	800438a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800432a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800432c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004330:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004336:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004338:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800433a:	683a      	ldr	r2, [r7, #0]
 800433c:	68b9      	ldr	r1, [r7, #8]
 800433e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004340:	f000 fa3a 	bl	80047b8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004344:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800434c:	d112      	bne.n	8004374 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800434e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004352:	2b00      	cmp	r3, #0
 8004354:	d016      	beq.n	8004384 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004358:	3324      	adds	r3, #36	@ 0x24
 800435a:	4618      	mov	r0, r3
 800435c:	f001 f804 	bl	8005368 <xTaskRemoveFromEventList>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d00e      	beq.n	8004384 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d00b      	beq.n	8004384 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	601a      	str	r2, [r3, #0]
 8004372:	e007      	b.n	8004384 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004374:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004378:	3301      	adds	r3, #1
 800437a:	b2db      	uxtb	r3, r3
 800437c:	b25a      	sxtb	r2, r3
 800437e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004380:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004384:	2301      	movs	r3, #1
 8004386:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004388:	e001      	b.n	800438e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800438a:	2300      	movs	r3, #0
 800438c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800438e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004390:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004398:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800439a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800439c:	4618      	mov	r0, r3
 800439e:	3740      	adds	r7, #64	@ 0x40
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b08c      	sub	sp, #48	@ 0x30
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	60b9      	str	r1, [r7, #8]
 80043ae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80043b0:	2300      	movs	r3, #0
 80043b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80043b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d10b      	bne.n	80043d6 <xQueueReceive+0x32>
	__asm volatile
 80043be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043c2:	f383 8811 	msr	BASEPRI, r3
 80043c6:	f3bf 8f6f 	isb	sy
 80043ca:	f3bf 8f4f 	dsb	sy
 80043ce:	623b      	str	r3, [r7, #32]
}
 80043d0:	bf00      	nop
 80043d2:	bf00      	nop
 80043d4:	e7fd      	b.n	80043d2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d103      	bne.n	80043e4 <xQueueReceive+0x40>
 80043dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d101      	bne.n	80043e8 <xQueueReceive+0x44>
 80043e4:	2301      	movs	r3, #1
 80043e6:	e000      	b.n	80043ea <xQueueReceive+0x46>
 80043e8:	2300      	movs	r3, #0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d10b      	bne.n	8004406 <xQueueReceive+0x62>
	__asm volatile
 80043ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043f2:	f383 8811 	msr	BASEPRI, r3
 80043f6:	f3bf 8f6f 	isb	sy
 80043fa:	f3bf 8f4f 	dsb	sy
 80043fe:	61fb      	str	r3, [r7, #28]
}
 8004400:	bf00      	nop
 8004402:	bf00      	nop
 8004404:	e7fd      	b.n	8004402 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004406:	f001 f97f 	bl	8005708 <xTaskGetSchedulerState>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d102      	bne.n	8004416 <xQueueReceive+0x72>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d101      	bne.n	800441a <xQueueReceive+0x76>
 8004416:	2301      	movs	r3, #1
 8004418:	e000      	b.n	800441c <xQueueReceive+0x78>
 800441a:	2300      	movs	r3, #0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d10b      	bne.n	8004438 <xQueueReceive+0x94>
	__asm volatile
 8004420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004424:	f383 8811 	msr	BASEPRI, r3
 8004428:	f3bf 8f6f 	isb	sy
 800442c:	f3bf 8f4f 	dsb	sy
 8004430:	61bb      	str	r3, [r7, #24]
}
 8004432:	bf00      	nop
 8004434:	bf00      	nop
 8004436:	e7fd      	b.n	8004434 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004438:	f001 ffd6 	bl	80063e8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800443c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800443e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004440:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004444:	2b00      	cmp	r3, #0
 8004446:	d01f      	beq.n	8004488 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004448:	68b9      	ldr	r1, [r7, #8]
 800444a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800444c:	f000 fa1e 	bl	800488c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004452:	1e5a      	subs	r2, r3, #1
 8004454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004456:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800445a:	691b      	ldr	r3, [r3, #16]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d00f      	beq.n	8004480 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004462:	3310      	adds	r3, #16
 8004464:	4618      	mov	r0, r3
 8004466:	f000 ff7f 	bl	8005368 <xTaskRemoveFromEventList>
 800446a:	4603      	mov	r3, r0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d007      	beq.n	8004480 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004470:	4b3c      	ldr	r3, [pc, #240]	@ (8004564 <xQueueReceive+0x1c0>)
 8004472:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004476:	601a      	str	r2, [r3, #0]
 8004478:	f3bf 8f4f 	dsb	sy
 800447c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004480:	f001 ffe4 	bl	800644c <vPortExitCritical>
				return pdPASS;
 8004484:	2301      	movs	r3, #1
 8004486:	e069      	b.n	800455c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d103      	bne.n	8004496 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800448e:	f001 ffdd 	bl	800644c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004492:	2300      	movs	r3, #0
 8004494:	e062      	b.n	800455c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004496:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004498:	2b00      	cmp	r3, #0
 800449a:	d106      	bne.n	80044aa <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800449c:	f107 0310 	add.w	r3, r7, #16
 80044a0:	4618      	mov	r0, r3
 80044a2:	f000 ffc5 	bl	8005430 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80044a6:	2301      	movs	r3, #1
 80044a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80044aa:	f001 ffcf 	bl	800644c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80044ae:	f000 fd35 	bl	8004f1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80044b2:	f001 ff99 	bl	80063e8 <vPortEnterCritical>
 80044b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044b8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80044bc:	b25b      	sxtb	r3, r3
 80044be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044c2:	d103      	bne.n	80044cc <xQueueReceive+0x128>
 80044c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044c6:	2200      	movs	r2, #0
 80044c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80044cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044ce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80044d2:	b25b      	sxtb	r3, r3
 80044d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044d8:	d103      	bne.n	80044e2 <xQueueReceive+0x13e>
 80044da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044dc:	2200      	movs	r2, #0
 80044de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80044e2:	f001 ffb3 	bl	800644c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80044e6:	1d3a      	adds	r2, r7, #4
 80044e8:	f107 0310 	add.w	r3, r7, #16
 80044ec:	4611      	mov	r1, r2
 80044ee:	4618      	mov	r0, r3
 80044f0:	f000 ffb4 	bl	800545c <xTaskCheckForTimeOut>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d123      	bne.n	8004542 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80044fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80044fc:	f000 fa3e 	bl	800497c <prvIsQueueEmpty>
 8004500:	4603      	mov	r3, r0
 8004502:	2b00      	cmp	r3, #0
 8004504:	d017      	beq.n	8004536 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004508:	3324      	adds	r3, #36	@ 0x24
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	4611      	mov	r1, r2
 800450e:	4618      	mov	r0, r3
 8004510:	f000 fed8 	bl	80052c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004514:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004516:	f000 f9df 	bl	80048d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800451a:	f000 fd0d 	bl	8004f38 <xTaskResumeAll>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	d189      	bne.n	8004438 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004524:	4b0f      	ldr	r3, [pc, #60]	@ (8004564 <xQueueReceive+0x1c0>)
 8004526:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800452a:	601a      	str	r2, [r3, #0]
 800452c:	f3bf 8f4f 	dsb	sy
 8004530:	f3bf 8f6f 	isb	sy
 8004534:	e780      	b.n	8004438 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004536:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004538:	f000 f9ce 	bl	80048d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800453c:	f000 fcfc 	bl	8004f38 <xTaskResumeAll>
 8004540:	e77a      	b.n	8004438 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004542:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004544:	f000 f9c8 	bl	80048d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004548:	f000 fcf6 	bl	8004f38 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800454c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800454e:	f000 fa15 	bl	800497c <prvIsQueueEmpty>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	f43f af6f 	beq.w	8004438 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800455a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800455c:	4618      	mov	r0, r3
 800455e:	3730      	adds	r7, #48	@ 0x30
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}
 8004564:	e000ed04 	.word	0xe000ed04

08004568 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b08e      	sub	sp, #56	@ 0x38
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004572:	2300      	movs	r3, #0
 8004574:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800457a:	2300      	movs	r3, #0
 800457c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800457e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004580:	2b00      	cmp	r3, #0
 8004582:	d10b      	bne.n	800459c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8004584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004588:	f383 8811 	msr	BASEPRI, r3
 800458c:	f3bf 8f6f 	isb	sy
 8004590:	f3bf 8f4f 	dsb	sy
 8004594:	623b      	str	r3, [r7, #32]
}
 8004596:	bf00      	nop
 8004598:	bf00      	nop
 800459a:	e7fd      	b.n	8004598 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800459c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800459e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d00b      	beq.n	80045bc <xQueueSemaphoreTake+0x54>
	__asm volatile
 80045a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045a8:	f383 8811 	msr	BASEPRI, r3
 80045ac:	f3bf 8f6f 	isb	sy
 80045b0:	f3bf 8f4f 	dsb	sy
 80045b4:	61fb      	str	r3, [r7, #28]
}
 80045b6:	bf00      	nop
 80045b8:	bf00      	nop
 80045ba:	e7fd      	b.n	80045b8 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80045bc:	f001 f8a4 	bl	8005708 <xTaskGetSchedulerState>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d102      	bne.n	80045cc <xQueueSemaphoreTake+0x64>
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d101      	bne.n	80045d0 <xQueueSemaphoreTake+0x68>
 80045cc:	2301      	movs	r3, #1
 80045ce:	e000      	b.n	80045d2 <xQueueSemaphoreTake+0x6a>
 80045d0:	2300      	movs	r3, #0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d10b      	bne.n	80045ee <xQueueSemaphoreTake+0x86>
	__asm volatile
 80045d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045da:	f383 8811 	msr	BASEPRI, r3
 80045de:	f3bf 8f6f 	isb	sy
 80045e2:	f3bf 8f4f 	dsb	sy
 80045e6:	61bb      	str	r3, [r7, #24]
}
 80045e8:	bf00      	nop
 80045ea:	bf00      	nop
 80045ec:	e7fd      	b.n	80045ea <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80045ee:	f001 fefb 	bl	80063e8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80045f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045f6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80045f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d024      	beq.n	8004648 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80045fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004600:	1e5a      	subs	r2, r3, #1
 8004602:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004604:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d104      	bne.n	8004618 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800460e:	f001 f9f5 	bl	80059fc <pvTaskIncrementMutexHeldCount>
 8004612:	4602      	mov	r2, r0
 8004614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004616:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800461a:	691b      	ldr	r3, [r3, #16]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d00f      	beq.n	8004640 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004622:	3310      	adds	r3, #16
 8004624:	4618      	mov	r0, r3
 8004626:	f000 fe9f 	bl	8005368 <xTaskRemoveFromEventList>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d007      	beq.n	8004640 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004630:	4b54      	ldr	r3, [pc, #336]	@ (8004784 <xQueueSemaphoreTake+0x21c>)
 8004632:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004636:	601a      	str	r2, [r3, #0]
 8004638:	f3bf 8f4f 	dsb	sy
 800463c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004640:	f001 ff04 	bl	800644c <vPortExitCritical>
				return pdPASS;
 8004644:	2301      	movs	r3, #1
 8004646:	e098      	b.n	800477a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d112      	bne.n	8004674 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800464e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004650:	2b00      	cmp	r3, #0
 8004652:	d00b      	beq.n	800466c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8004654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004658:	f383 8811 	msr	BASEPRI, r3
 800465c:	f3bf 8f6f 	isb	sy
 8004660:	f3bf 8f4f 	dsb	sy
 8004664:	617b      	str	r3, [r7, #20]
}
 8004666:	bf00      	nop
 8004668:	bf00      	nop
 800466a:	e7fd      	b.n	8004668 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800466c:	f001 feee 	bl	800644c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004670:	2300      	movs	r3, #0
 8004672:	e082      	b.n	800477a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004674:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004676:	2b00      	cmp	r3, #0
 8004678:	d106      	bne.n	8004688 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800467a:	f107 030c 	add.w	r3, r7, #12
 800467e:	4618      	mov	r0, r3
 8004680:	f000 fed6 	bl	8005430 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004684:	2301      	movs	r3, #1
 8004686:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004688:	f001 fee0 	bl	800644c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800468c:	f000 fc46 	bl	8004f1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004690:	f001 feaa 	bl	80063e8 <vPortEnterCritical>
 8004694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004696:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800469a:	b25b      	sxtb	r3, r3
 800469c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046a0:	d103      	bne.n	80046aa <xQueueSemaphoreTake+0x142>
 80046a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046a4:	2200      	movs	r2, #0
 80046a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80046aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046ac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80046b0:	b25b      	sxtb	r3, r3
 80046b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b6:	d103      	bne.n	80046c0 <xQueueSemaphoreTake+0x158>
 80046b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046ba:	2200      	movs	r2, #0
 80046bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80046c0:	f001 fec4 	bl	800644c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80046c4:	463a      	mov	r2, r7
 80046c6:	f107 030c 	add.w	r3, r7, #12
 80046ca:	4611      	mov	r1, r2
 80046cc:	4618      	mov	r0, r3
 80046ce:	f000 fec5 	bl	800545c <xTaskCheckForTimeOut>
 80046d2:	4603      	mov	r3, r0
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d132      	bne.n	800473e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80046d8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80046da:	f000 f94f 	bl	800497c <prvIsQueueEmpty>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d026      	beq.n	8004732 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80046e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d109      	bne.n	8004700 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80046ec:	f001 fe7c 	bl	80063e8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80046f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	4618      	mov	r0, r3
 80046f6:	f001 f825 	bl	8005744 <xTaskPriorityInherit>
 80046fa:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80046fc:	f001 fea6 	bl	800644c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004702:	3324      	adds	r3, #36	@ 0x24
 8004704:	683a      	ldr	r2, [r7, #0]
 8004706:	4611      	mov	r1, r2
 8004708:	4618      	mov	r0, r3
 800470a:	f000 fddb 	bl	80052c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800470e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004710:	f000 f8e2 	bl	80048d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004714:	f000 fc10 	bl	8004f38 <xTaskResumeAll>
 8004718:	4603      	mov	r3, r0
 800471a:	2b00      	cmp	r3, #0
 800471c:	f47f af67 	bne.w	80045ee <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8004720:	4b18      	ldr	r3, [pc, #96]	@ (8004784 <xQueueSemaphoreTake+0x21c>)
 8004722:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004726:	601a      	str	r2, [r3, #0]
 8004728:	f3bf 8f4f 	dsb	sy
 800472c:	f3bf 8f6f 	isb	sy
 8004730:	e75d      	b.n	80045ee <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004732:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004734:	f000 f8d0 	bl	80048d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004738:	f000 fbfe 	bl	8004f38 <xTaskResumeAll>
 800473c:	e757      	b.n	80045ee <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800473e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004740:	f000 f8ca 	bl	80048d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004744:	f000 fbf8 	bl	8004f38 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004748:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800474a:	f000 f917 	bl	800497c <prvIsQueueEmpty>
 800474e:	4603      	mov	r3, r0
 8004750:	2b00      	cmp	r3, #0
 8004752:	f43f af4c 	beq.w	80045ee <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004758:	2b00      	cmp	r3, #0
 800475a:	d00d      	beq.n	8004778 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800475c:	f001 fe44 	bl	80063e8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004760:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004762:	f000 f811 	bl	8004788 <prvGetDisinheritPriorityAfterTimeout>
 8004766:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800476e:	4618      	mov	r0, r3
 8004770:	f001 f8c0 	bl	80058f4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004774:	f001 fe6a 	bl	800644c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004778:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800477a:	4618      	mov	r0, r3
 800477c:	3738      	adds	r7, #56	@ 0x38
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	e000ed04 	.word	0xe000ed04

08004788 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004788:	b480      	push	{r7}
 800478a:	b085      	sub	sp, #20
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004794:	2b00      	cmp	r3, #0
 8004796:	d006      	beq.n	80047a6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80047a2:	60fb      	str	r3, [r7, #12]
 80047a4:	e001      	b.n	80047aa <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80047a6:	2300      	movs	r3, #0
 80047a8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80047aa:	68fb      	ldr	r3, [r7, #12]
	}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3714      	adds	r7, #20
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr

080047b8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b086      	sub	sp, #24
 80047bc:	af00      	add	r7, sp, #0
 80047be:	60f8      	str	r0, [r7, #12]
 80047c0:	60b9      	str	r1, [r7, #8]
 80047c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80047c4:	2300      	movs	r3, #0
 80047c6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047cc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d10d      	bne.n	80047f2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d14d      	bne.n	800487a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	4618      	mov	r0, r3
 80047e4:	f001 f816 	bl	8005814 <xTaskPriorityDisinherit>
 80047e8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2200      	movs	r2, #0
 80047ee:	609a      	str	r2, [r3, #8]
 80047f0:	e043      	b.n	800487a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d119      	bne.n	800482c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6858      	ldr	r0, [r3, #4]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004800:	461a      	mov	r2, r3
 8004802:	68b9      	ldr	r1, [r7, #8]
 8004804:	f002 fa2e 	bl	8006c64 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	685a      	ldr	r2, [r3, #4]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004810:	441a      	add	r2, r3
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	685a      	ldr	r2, [r3, #4]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	429a      	cmp	r2, r3
 8004820:	d32b      	bcc.n	800487a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	605a      	str	r2, [r3, #4]
 800482a:	e026      	b.n	800487a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	68d8      	ldr	r0, [r3, #12]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004834:	461a      	mov	r2, r3
 8004836:	68b9      	ldr	r1, [r7, #8]
 8004838:	f002 fa14 	bl	8006c64 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	68da      	ldr	r2, [r3, #12]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004844:	425b      	negs	r3, r3
 8004846:	441a      	add	r2, r3
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	68da      	ldr	r2, [r3, #12]
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	429a      	cmp	r2, r3
 8004856:	d207      	bcs.n	8004868 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	689a      	ldr	r2, [r3, #8]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004860:	425b      	negs	r3, r3
 8004862:	441a      	add	r2, r3
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2b02      	cmp	r3, #2
 800486c:	d105      	bne.n	800487a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d002      	beq.n	800487a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	3b01      	subs	r3, #1
 8004878:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	1c5a      	adds	r2, r3, #1
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004882:	697b      	ldr	r3, [r7, #20]
}
 8004884:	4618      	mov	r0, r3
 8004886:	3718      	adds	r7, #24
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800489a:	2b00      	cmp	r3, #0
 800489c:	d018      	beq.n	80048d0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	68da      	ldr	r2, [r3, #12]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048a6:	441a      	add	r2, r3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	68da      	ldr	r2, [r3, #12]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d303      	bcc.n	80048c0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	68d9      	ldr	r1, [r3, #12]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048c8:	461a      	mov	r2, r3
 80048ca:	6838      	ldr	r0, [r7, #0]
 80048cc:	f002 f9ca 	bl	8006c64 <memcpy>
	}
}
 80048d0:	bf00      	nop
 80048d2:	3708      	adds	r7, #8
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80048e0:	f001 fd82 	bl	80063e8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80048ea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80048ec:	e011      	b.n	8004912 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d012      	beq.n	800491c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	3324      	adds	r3, #36	@ 0x24
 80048fa:	4618      	mov	r0, r3
 80048fc:	f000 fd34 	bl	8005368 <xTaskRemoveFromEventList>
 8004900:	4603      	mov	r3, r0
 8004902:	2b00      	cmp	r3, #0
 8004904:	d001      	beq.n	800490a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004906:	f000 fe0d 	bl	8005524 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800490a:	7bfb      	ldrb	r3, [r7, #15]
 800490c:	3b01      	subs	r3, #1
 800490e:	b2db      	uxtb	r3, r3
 8004910:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004912:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004916:	2b00      	cmp	r3, #0
 8004918:	dce9      	bgt.n	80048ee <prvUnlockQueue+0x16>
 800491a:	e000      	b.n	800491e <prvUnlockQueue+0x46>
					break;
 800491c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	22ff      	movs	r2, #255	@ 0xff
 8004922:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004926:	f001 fd91 	bl	800644c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800492a:	f001 fd5d 	bl	80063e8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004934:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004936:	e011      	b.n	800495c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	691b      	ldr	r3, [r3, #16]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d012      	beq.n	8004966 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	3310      	adds	r3, #16
 8004944:	4618      	mov	r0, r3
 8004946:	f000 fd0f 	bl	8005368 <xTaskRemoveFromEventList>
 800494a:	4603      	mov	r3, r0
 800494c:	2b00      	cmp	r3, #0
 800494e:	d001      	beq.n	8004954 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004950:	f000 fde8 	bl	8005524 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004954:	7bbb      	ldrb	r3, [r7, #14]
 8004956:	3b01      	subs	r3, #1
 8004958:	b2db      	uxtb	r3, r3
 800495a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800495c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004960:	2b00      	cmp	r3, #0
 8004962:	dce9      	bgt.n	8004938 <prvUnlockQueue+0x60>
 8004964:	e000      	b.n	8004968 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004966:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	22ff      	movs	r2, #255	@ 0xff
 800496c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004970:	f001 fd6c 	bl	800644c <vPortExitCritical>
}
 8004974:	bf00      	nop
 8004976:	3710      	adds	r7, #16
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}

0800497c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b084      	sub	sp, #16
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004984:	f001 fd30 	bl	80063e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800498c:	2b00      	cmp	r3, #0
 800498e:	d102      	bne.n	8004996 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004990:	2301      	movs	r3, #1
 8004992:	60fb      	str	r3, [r7, #12]
 8004994:	e001      	b.n	800499a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004996:	2300      	movs	r3, #0
 8004998:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800499a:	f001 fd57 	bl	800644c <vPortExitCritical>

	return xReturn;
 800499e:	68fb      	ldr	r3, [r7, #12]
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3710      	adds	r7, #16
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80049b0:	f001 fd1a 	bl	80063e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049bc:	429a      	cmp	r2, r3
 80049be:	d102      	bne.n	80049c6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80049c0:	2301      	movs	r3, #1
 80049c2:	60fb      	str	r3, [r7, #12]
 80049c4:	e001      	b.n	80049ca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80049c6:	2300      	movs	r3, #0
 80049c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80049ca:	f001 fd3f 	bl	800644c <vPortExitCritical>

	return xReturn;
 80049ce:	68fb      	ldr	r3, [r7, #12]
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3710      	adds	r7, #16
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80049d8:	b480      	push	{r7}
 80049da:	b085      	sub	sp, #20
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80049e2:	2300      	movs	r3, #0
 80049e4:	60fb      	str	r3, [r7, #12]
 80049e6:	e014      	b.n	8004a12 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80049e8:	4a0f      	ldr	r2, [pc, #60]	@ (8004a28 <vQueueAddToRegistry+0x50>)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d10b      	bne.n	8004a0c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80049f4:	490c      	ldr	r1, [pc, #48]	@ (8004a28 <vQueueAddToRegistry+0x50>)
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	683a      	ldr	r2, [r7, #0]
 80049fa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80049fe:	4a0a      	ldr	r2, [pc, #40]	@ (8004a28 <vQueueAddToRegistry+0x50>)
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	00db      	lsls	r3, r3, #3
 8004a04:	4413      	add	r3, r2
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004a0a:	e006      	b.n	8004a1a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	3301      	adds	r3, #1
 8004a10:	60fb      	str	r3, [r7, #12]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2b07      	cmp	r3, #7
 8004a16:	d9e7      	bls.n	80049e8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004a18:	bf00      	nop
 8004a1a:	bf00      	nop
 8004a1c:	3714      	adds	r7, #20
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	200007b8 	.word	0x200007b8

08004a2c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b086      	sub	sp, #24
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	60b9      	str	r1, [r7, #8]
 8004a36:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004a3c:	f001 fcd4 	bl	80063e8 <vPortEnterCritical>
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004a46:	b25b      	sxtb	r3, r3
 8004a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a4c:	d103      	bne.n	8004a56 <vQueueWaitForMessageRestricted+0x2a>
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	2200      	movs	r2, #0
 8004a52:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004a5c:	b25b      	sxtb	r3, r3
 8004a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a62:	d103      	bne.n	8004a6c <vQueueWaitForMessageRestricted+0x40>
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	2200      	movs	r2, #0
 8004a68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004a6c:	f001 fcee 	bl	800644c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d106      	bne.n	8004a86 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	3324      	adds	r3, #36	@ 0x24
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	68b9      	ldr	r1, [r7, #8]
 8004a80:	4618      	mov	r0, r3
 8004a82:	f000 fc45 	bl	8005310 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004a86:	6978      	ldr	r0, [r7, #20]
 8004a88:	f7ff ff26 	bl	80048d8 <prvUnlockQueue>
	}
 8004a8c:	bf00      	nop
 8004a8e:	3718      	adds	r7, #24
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b08e      	sub	sp, #56	@ 0x38
 8004a98:	af04      	add	r7, sp, #16
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	60b9      	str	r1, [r7, #8]
 8004a9e:	607a      	str	r2, [r7, #4]
 8004aa0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004aa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d10b      	bne.n	8004ac0 <xTaskCreateStatic+0x2c>
	__asm volatile
 8004aa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aac:	f383 8811 	msr	BASEPRI, r3
 8004ab0:	f3bf 8f6f 	isb	sy
 8004ab4:	f3bf 8f4f 	dsb	sy
 8004ab8:	623b      	str	r3, [r7, #32]
}
 8004aba:	bf00      	nop
 8004abc:	bf00      	nop
 8004abe:	e7fd      	b.n	8004abc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004ac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d10b      	bne.n	8004ade <xTaskCreateStatic+0x4a>
	__asm volatile
 8004ac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aca:	f383 8811 	msr	BASEPRI, r3
 8004ace:	f3bf 8f6f 	isb	sy
 8004ad2:	f3bf 8f4f 	dsb	sy
 8004ad6:	61fb      	str	r3, [r7, #28]
}
 8004ad8:	bf00      	nop
 8004ada:	bf00      	nop
 8004adc:	e7fd      	b.n	8004ada <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004ade:	235c      	movs	r3, #92	@ 0x5c
 8004ae0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	2b5c      	cmp	r3, #92	@ 0x5c
 8004ae6:	d00b      	beq.n	8004b00 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004ae8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aec:	f383 8811 	msr	BASEPRI, r3
 8004af0:	f3bf 8f6f 	isb	sy
 8004af4:	f3bf 8f4f 	dsb	sy
 8004af8:	61bb      	str	r3, [r7, #24]
}
 8004afa:	bf00      	nop
 8004afc:	bf00      	nop
 8004afe:	e7fd      	b.n	8004afc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004b00:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004b02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d01e      	beq.n	8004b46 <xTaskCreateStatic+0xb2>
 8004b08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d01b      	beq.n	8004b46 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004b0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b10:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b14:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004b16:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b1a:	2202      	movs	r2, #2
 8004b1c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004b20:	2300      	movs	r3, #0
 8004b22:	9303      	str	r3, [sp, #12]
 8004b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b26:	9302      	str	r3, [sp, #8]
 8004b28:	f107 0314 	add.w	r3, r7, #20
 8004b2c:	9301      	str	r3, [sp, #4]
 8004b2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b30:	9300      	str	r3, [sp, #0]
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	68b9      	ldr	r1, [r7, #8]
 8004b38:	68f8      	ldr	r0, [r7, #12]
 8004b3a:	f000 f850 	bl	8004bde <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004b3e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004b40:	f000 f8de 	bl	8004d00 <prvAddNewTaskToReadyList>
 8004b44:	e001      	b.n	8004b4a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004b46:	2300      	movs	r3, #0
 8004b48:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004b4a:	697b      	ldr	r3, [r7, #20]
	}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3728      	adds	r7, #40	@ 0x28
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}

08004b54 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b08c      	sub	sp, #48	@ 0x30
 8004b58:	af04      	add	r7, sp, #16
 8004b5a:	60f8      	str	r0, [r7, #12]
 8004b5c:	60b9      	str	r1, [r7, #8]
 8004b5e:	603b      	str	r3, [r7, #0]
 8004b60:	4613      	mov	r3, r2
 8004b62:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004b64:	88fb      	ldrh	r3, [r7, #6]
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f001 fd5f 	bl	800662c <pvPortMalloc>
 8004b6e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d00e      	beq.n	8004b94 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004b76:	205c      	movs	r0, #92	@ 0x5c
 8004b78:	f001 fd58 	bl	800662c <pvPortMalloc>
 8004b7c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d003      	beq.n	8004b8c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004b84:	69fb      	ldr	r3, [r7, #28]
 8004b86:	697a      	ldr	r2, [r7, #20]
 8004b88:	631a      	str	r2, [r3, #48]	@ 0x30
 8004b8a:	e005      	b.n	8004b98 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004b8c:	6978      	ldr	r0, [r7, #20]
 8004b8e:	f001 fe1b 	bl	80067c8 <vPortFree>
 8004b92:	e001      	b.n	8004b98 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004b94:	2300      	movs	r3, #0
 8004b96:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004b98:	69fb      	ldr	r3, [r7, #28]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d017      	beq.n	8004bce <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004b9e:	69fb      	ldr	r3, [r7, #28]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004ba6:	88fa      	ldrh	r2, [r7, #6]
 8004ba8:	2300      	movs	r3, #0
 8004baa:	9303      	str	r3, [sp, #12]
 8004bac:	69fb      	ldr	r3, [r7, #28]
 8004bae:	9302      	str	r3, [sp, #8]
 8004bb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bb2:	9301      	str	r3, [sp, #4]
 8004bb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bb6:	9300      	str	r3, [sp, #0]
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	68b9      	ldr	r1, [r7, #8]
 8004bbc:	68f8      	ldr	r0, [r7, #12]
 8004bbe:	f000 f80e 	bl	8004bde <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004bc2:	69f8      	ldr	r0, [r7, #28]
 8004bc4:	f000 f89c 	bl	8004d00 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	61bb      	str	r3, [r7, #24]
 8004bcc:	e002      	b.n	8004bd4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004bce:	f04f 33ff 	mov.w	r3, #4294967295
 8004bd2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004bd4:	69bb      	ldr	r3, [r7, #24]
	}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3720      	adds	r7, #32
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}

08004bde <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004bde:	b580      	push	{r7, lr}
 8004be0:	b088      	sub	sp, #32
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	60f8      	str	r0, [r7, #12]
 8004be6:	60b9      	str	r1, [r7, #8]
 8004be8:	607a      	str	r2, [r7, #4]
 8004bea:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bee:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	461a      	mov	r2, r3
 8004bf6:	21a5      	movs	r1, #165	@ 0xa5
 8004bf8:	f001 fff0 	bl	8006bdc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bfe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004c06:	3b01      	subs	r3, #1
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	4413      	add	r3, r2
 8004c0c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004c0e:	69bb      	ldr	r3, [r7, #24]
 8004c10:	f023 0307 	bic.w	r3, r3, #7
 8004c14:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004c16:	69bb      	ldr	r3, [r7, #24]
 8004c18:	f003 0307 	and.w	r3, r3, #7
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d00b      	beq.n	8004c38 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8004c20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c24:	f383 8811 	msr	BASEPRI, r3
 8004c28:	f3bf 8f6f 	isb	sy
 8004c2c:	f3bf 8f4f 	dsb	sy
 8004c30:	617b      	str	r3, [r7, #20]
}
 8004c32:	bf00      	nop
 8004c34:	bf00      	nop
 8004c36:	e7fd      	b.n	8004c34 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d01f      	beq.n	8004c7e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004c3e:	2300      	movs	r3, #0
 8004c40:	61fb      	str	r3, [r7, #28]
 8004c42:	e012      	b.n	8004c6a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004c44:	68ba      	ldr	r2, [r7, #8]
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	4413      	add	r3, r2
 8004c4a:	7819      	ldrb	r1, [r3, #0]
 8004c4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c4e:	69fb      	ldr	r3, [r7, #28]
 8004c50:	4413      	add	r3, r2
 8004c52:	3334      	adds	r3, #52	@ 0x34
 8004c54:	460a      	mov	r2, r1
 8004c56:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004c58:	68ba      	ldr	r2, [r7, #8]
 8004c5a:	69fb      	ldr	r3, [r7, #28]
 8004c5c:	4413      	add	r3, r2
 8004c5e:	781b      	ldrb	r3, [r3, #0]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d006      	beq.n	8004c72 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004c64:	69fb      	ldr	r3, [r7, #28]
 8004c66:	3301      	adds	r3, #1
 8004c68:	61fb      	str	r3, [r7, #28]
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	2b0f      	cmp	r3, #15
 8004c6e:	d9e9      	bls.n	8004c44 <prvInitialiseNewTask+0x66>
 8004c70:	e000      	b.n	8004c74 <prvInitialiseNewTask+0x96>
			{
				break;
 8004c72:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004c74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c76:	2200      	movs	r2, #0
 8004c78:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004c7c:	e003      	b.n	8004c86 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c80:	2200      	movs	r2, #0
 8004c82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004c86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c88:	2b37      	cmp	r3, #55	@ 0x37
 8004c8a:	d901      	bls.n	8004c90 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004c8c:	2337      	movs	r3, #55	@ 0x37
 8004c8e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c92:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004c94:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c98:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004c9a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004c9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ca4:	3304      	adds	r3, #4
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f7fe ff4a 	bl	8003b40 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004cac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cae:	3318      	adds	r3, #24
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f7fe ff45 	bl	8003b40 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004cba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cbe:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cc4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004cca:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004ccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cce:	2200      	movs	r2, #0
 8004cd0:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004cda:	683a      	ldr	r2, [r7, #0]
 8004cdc:	68f9      	ldr	r1, [r7, #12]
 8004cde:	69b8      	ldr	r0, [r7, #24]
 8004ce0:	f001 fa4e 	bl	8006180 <pxPortInitialiseStack>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ce8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004cea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d002      	beq.n	8004cf6 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004cf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cf2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004cf4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004cf6:	bf00      	nop
 8004cf8:	3720      	adds	r7, #32
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
	...

08004d00 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b082      	sub	sp, #8
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004d08:	f001 fb6e 	bl	80063e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004d0c:	4b2d      	ldr	r3, [pc, #180]	@ (8004dc4 <prvAddNewTaskToReadyList+0xc4>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	3301      	adds	r3, #1
 8004d12:	4a2c      	ldr	r2, [pc, #176]	@ (8004dc4 <prvAddNewTaskToReadyList+0xc4>)
 8004d14:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004d16:	4b2c      	ldr	r3, [pc, #176]	@ (8004dc8 <prvAddNewTaskToReadyList+0xc8>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d109      	bne.n	8004d32 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004d1e:	4a2a      	ldr	r2, [pc, #168]	@ (8004dc8 <prvAddNewTaskToReadyList+0xc8>)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004d24:	4b27      	ldr	r3, [pc, #156]	@ (8004dc4 <prvAddNewTaskToReadyList+0xc4>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d110      	bne.n	8004d4e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004d2c:	f000 fc1e 	bl	800556c <prvInitialiseTaskLists>
 8004d30:	e00d      	b.n	8004d4e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004d32:	4b26      	ldr	r3, [pc, #152]	@ (8004dcc <prvAddNewTaskToReadyList+0xcc>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d109      	bne.n	8004d4e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004d3a:	4b23      	ldr	r3, [pc, #140]	@ (8004dc8 <prvAddNewTaskToReadyList+0xc8>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d802      	bhi.n	8004d4e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004d48:	4a1f      	ldr	r2, [pc, #124]	@ (8004dc8 <prvAddNewTaskToReadyList+0xc8>)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004d4e:	4b20      	ldr	r3, [pc, #128]	@ (8004dd0 <prvAddNewTaskToReadyList+0xd0>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	3301      	adds	r3, #1
 8004d54:	4a1e      	ldr	r2, [pc, #120]	@ (8004dd0 <prvAddNewTaskToReadyList+0xd0>)
 8004d56:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004d58:	4b1d      	ldr	r3, [pc, #116]	@ (8004dd0 <prvAddNewTaskToReadyList+0xd0>)
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d64:	4b1b      	ldr	r3, [pc, #108]	@ (8004dd4 <prvAddNewTaskToReadyList+0xd4>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d903      	bls.n	8004d74 <prvAddNewTaskToReadyList+0x74>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d70:	4a18      	ldr	r2, [pc, #96]	@ (8004dd4 <prvAddNewTaskToReadyList+0xd4>)
 8004d72:	6013      	str	r3, [r2, #0]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d78:	4613      	mov	r3, r2
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	4413      	add	r3, r2
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	4a15      	ldr	r2, [pc, #84]	@ (8004dd8 <prvAddNewTaskToReadyList+0xd8>)
 8004d82:	441a      	add	r2, r3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	3304      	adds	r3, #4
 8004d88:	4619      	mov	r1, r3
 8004d8a:	4610      	mov	r0, r2
 8004d8c:	f7fe fee5 	bl	8003b5a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004d90:	f001 fb5c 	bl	800644c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004d94:	4b0d      	ldr	r3, [pc, #52]	@ (8004dcc <prvAddNewTaskToReadyList+0xcc>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d00e      	beq.n	8004dba <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004d9c:	4b0a      	ldr	r3, [pc, #40]	@ (8004dc8 <prvAddNewTaskToReadyList+0xc8>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d207      	bcs.n	8004dba <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004daa:	4b0c      	ldr	r3, [pc, #48]	@ (8004ddc <prvAddNewTaskToReadyList+0xdc>)
 8004dac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004db0:	601a      	str	r2, [r3, #0]
 8004db2:	f3bf 8f4f 	dsb	sy
 8004db6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004dba:	bf00      	nop
 8004dbc:	3708      	adds	r7, #8
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	20000ccc 	.word	0x20000ccc
 8004dc8:	200007f8 	.word	0x200007f8
 8004dcc:	20000cd8 	.word	0x20000cd8
 8004dd0:	20000ce8 	.word	0x20000ce8
 8004dd4:	20000cd4 	.word	0x20000cd4
 8004dd8:	200007fc 	.word	0x200007fc
 8004ddc:	e000ed04 	.word	0xe000ed04

08004de0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004de8:	2300      	movs	r3, #0
 8004dea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d018      	beq.n	8004e24 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004df2:	4b14      	ldr	r3, [pc, #80]	@ (8004e44 <vTaskDelay+0x64>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d00b      	beq.n	8004e12 <vTaskDelay+0x32>
	__asm volatile
 8004dfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dfe:	f383 8811 	msr	BASEPRI, r3
 8004e02:	f3bf 8f6f 	isb	sy
 8004e06:	f3bf 8f4f 	dsb	sy
 8004e0a:	60bb      	str	r3, [r7, #8]
}
 8004e0c:	bf00      	nop
 8004e0e:	bf00      	nop
 8004e10:	e7fd      	b.n	8004e0e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004e12:	f000 f883 	bl	8004f1c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004e16:	2100      	movs	r1, #0
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f000 fe03 	bl	8005a24 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004e1e:	f000 f88b 	bl	8004f38 <xTaskResumeAll>
 8004e22:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d107      	bne.n	8004e3a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004e2a:	4b07      	ldr	r3, [pc, #28]	@ (8004e48 <vTaskDelay+0x68>)
 8004e2c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e30:	601a      	str	r2, [r3, #0]
 8004e32:	f3bf 8f4f 	dsb	sy
 8004e36:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004e3a:	bf00      	nop
 8004e3c:	3710      	adds	r7, #16
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	20000cf4 	.word	0x20000cf4
 8004e48:	e000ed04 	.word	0xe000ed04

08004e4c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b08a      	sub	sp, #40	@ 0x28
 8004e50:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004e52:	2300      	movs	r3, #0
 8004e54:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004e56:	2300      	movs	r3, #0
 8004e58:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004e5a:	463a      	mov	r2, r7
 8004e5c:	1d39      	adds	r1, r7, #4
 8004e5e:	f107 0308 	add.w	r3, r7, #8
 8004e62:	4618      	mov	r0, r3
 8004e64:	f7fe fe18 	bl	8003a98 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004e68:	6839      	ldr	r1, [r7, #0]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	68ba      	ldr	r2, [r7, #8]
 8004e6e:	9202      	str	r2, [sp, #8]
 8004e70:	9301      	str	r3, [sp, #4]
 8004e72:	2300      	movs	r3, #0
 8004e74:	9300      	str	r3, [sp, #0]
 8004e76:	2300      	movs	r3, #0
 8004e78:	460a      	mov	r2, r1
 8004e7a:	4922      	ldr	r1, [pc, #136]	@ (8004f04 <vTaskStartScheduler+0xb8>)
 8004e7c:	4822      	ldr	r0, [pc, #136]	@ (8004f08 <vTaskStartScheduler+0xbc>)
 8004e7e:	f7ff fe09 	bl	8004a94 <xTaskCreateStatic>
 8004e82:	4603      	mov	r3, r0
 8004e84:	4a21      	ldr	r2, [pc, #132]	@ (8004f0c <vTaskStartScheduler+0xc0>)
 8004e86:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004e88:	4b20      	ldr	r3, [pc, #128]	@ (8004f0c <vTaskStartScheduler+0xc0>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d002      	beq.n	8004e96 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004e90:	2301      	movs	r3, #1
 8004e92:	617b      	str	r3, [r7, #20]
 8004e94:	e001      	b.n	8004e9a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004e96:	2300      	movs	r3, #0
 8004e98:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d102      	bne.n	8004ea6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004ea0:	f000 fe14 	bl	8005acc <xTimerCreateTimerTask>
 8004ea4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d116      	bne.n	8004eda <vTaskStartScheduler+0x8e>
	__asm volatile
 8004eac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eb0:	f383 8811 	msr	BASEPRI, r3
 8004eb4:	f3bf 8f6f 	isb	sy
 8004eb8:	f3bf 8f4f 	dsb	sy
 8004ebc:	613b      	str	r3, [r7, #16]
}
 8004ebe:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004ec0:	4b13      	ldr	r3, [pc, #76]	@ (8004f10 <vTaskStartScheduler+0xc4>)
 8004ec2:	f04f 32ff 	mov.w	r2, #4294967295
 8004ec6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004ec8:	4b12      	ldr	r3, [pc, #72]	@ (8004f14 <vTaskStartScheduler+0xc8>)
 8004eca:	2201      	movs	r2, #1
 8004ecc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004ece:	4b12      	ldr	r3, [pc, #72]	@ (8004f18 <vTaskStartScheduler+0xcc>)
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004ed4:	f001 f9e4 	bl	80062a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004ed8:	e00f      	b.n	8004efa <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ee0:	d10b      	bne.n	8004efa <vTaskStartScheduler+0xae>
	__asm volatile
 8004ee2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ee6:	f383 8811 	msr	BASEPRI, r3
 8004eea:	f3bf 8f6f 	isb	sy
 8004eee:	f3bf 8f4f 	dsb	sy
 8004ef2:	60fb      	str	r3, [r7, #12]
}
 8004ef4:	bf00      	nop
 8004ef6:	bf00      	nop
 8004ef8:	e7fd      	b.n	8004ef6 <vTaskStartScheduler+0xaa>
}
 8004efa:	bf00      	nop
 8004efc:	3718      	adds	r7, #24
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop
 8004f04:	08006d78 	.word	0x08006d78
 8004f08:	0800553d 	.word	0x0800553d
 8004f0c:	20000cf0 	.word	0x20000cf0
 8004f10:	20000cec 	.word	0x20000cec
 8004f14:	20000cd8 	.word	0x20000cd8
 8004f18:	20000cd0 	.word	0x20000cd0

08004f1c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004f20:	4b04      	ldr	r3, [pc, #16]	@ (8004f34 <vTaskSuspendAll+0x18>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	3301      	adds	r3, #1
 8004f26:	4a03      	ldr	r2, [pc, #12]	@ (8004f34 <vTaskSuspendAll+0x18>)
 8004f28:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004f2a:	bf00      	nop
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr
 8004f34:	20000cf4 	.word	0x20000cf4

08004f38 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b084      	sub	sp, #16
 8004f3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004f42:	2300      	movs	r3, #0
 8004f44:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004f46:	4b42      	ldr	r3, [pc, #264]	@ (8005050 <xTaskResumeAll+0x118>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d10b      	bne.n	8004f66 <xTaskResumeAll+0x2e>
	__asm volatile
 8004f4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f52:	f383 8811 	msr	BASEPRI, r3
 8004f56:	f3bf 8f6f 	isb	sy
 8004f5a:	f3bf 8f4f 	dsb	sy
 8004f5e:	603b      	str	r3, [r7, #0]
}
 8004f60:	bf00      	nop
 8004f62:	bf00      	nop
 8004f64:	e7fd      	b.n	8004f62 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004f66:	f001 fa3f 	bl	80063e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004f6a:	4b39      	ldr	r3, [pc, #228]	@ (8005050 <xTaskResumeAll+0x118>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	3b01      	subs	r3, #1
 8004f70:	4a37      	ldr	r2, [pc, #220]	@ (8005050 <xTaskResumeAll+0x118>)
 8004f72:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f74:	4b36      	ldr	r3, [pc, #216]	@ (8005050 <xTaskResumeAll+0x118>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d162      	bne.n	8005042 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004f7c:	4b35      	ldr	r3, [pc, #212]	@ (8005054 <xTaskResumeAll+0x11c>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d05e      	beq.n	8005042 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004f84:	e02f      	b.n	8004fe6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f86:	4b34      	ldr	r3, [pc, #208]	@ (8005058 <xTaskResumeAll+0x120>)
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	3318      	adds	r3, #24
 8004f92:	4618      	mov	r0, r3
 8004f94:	f7fe fe3e 	bl	8003c14 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	3304      	adds	r3, #4
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f7fe fe39 	bl	8003c14 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fa6:	4b2d      	ldr	r3, [pc, #180]	@ (800505c <xTaskResumeAll+0x124>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d903      	bls.n	8004fb6 <xTaskResumeAll+0x7e>
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fb2:	4a2a      	ldr	r2, [pc, #168]	@ (800505c <xTaskResumeAll+0x124>)
 8004fb4:	6013      	str	r3, [r2, #0]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fba:	4613      	mov	r3, r2
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	4413      	add	r3, r2
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	4a27      	ldr	r2, [pc, #156]	@ (8005060 <xTaskResumeAll+0x128>)
 8004fc4:	441a      	add	r2, r3
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	3304      	adds	r3, #4
 8004fca:	4619      	mov	r1, r3
 8004fcc:	4610      	mov	r0, r2
 8004fce:	f7fe fdc4 	bl	8003b5a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fd6:	4b23      	ldr	r3, [pc, #140]	@ (8005064 <xTaskResumeAll+0x12c>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d302      	bcc.n	8004fe6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004fe0:	4b21      	ldr	r3, [pc, #132]	@ (8005068 <xTaskResumeAll+0x130>)
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004fe6:	4b1c      	ldr	r3, [pc, #112]	@ (8005058 <xTaskResumeAll+0x120>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d1cb      	bne.n	8004f86 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d001      	beq.n	8004ff8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004ff4:	f000 fb58 	bl	80056a8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004ff8:	4b1c      	ldr	r3, [pc, #112]	@ (800506c <xTaskResumeAll+0x134>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d010      	beq.n	8005026 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005004:	f000 f846 	bl	8005094 <xTaskIncrementTick>
 8005008:	4603      	mov	r3, r0
 800500a:	2b00      	cmp	r3, #0
 800500c:	d002      	beq.n	8005014 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800500e:	4b16      	ldr	r3, [pc, #88]	@ (8005068 <xTaskResumeAll+0x130>)
 8005010:	2201      	movs	r2, #1
 8005012:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	3b01      	subs	r3, #1
 8005018:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d1f1      	bne.n	8005004 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005020:	4b12      	ldr	r3, [pc, #72]	@ (800506c <xTaskResumeAll+0x134>)
 8005022:	2200      	movs	r2, #0
 8005024:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005026:	4b10      	ldr	r3, [pc, #64]	@ (8005068 <xTaskResumeAll+0x130>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d009      	beq.n	8005042 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800502e:	2301      	movs	r3, #1
 8005030:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005032:	4b0f      	ldr	r3, [pc, #60]	@ (8005070 <xTaskResumeAll+0x138>)
 8005034:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005038:	601a      	str	r2, [r3, #0]
 800503a:	f3bf 8f4f 	dsb	sy
 800503e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005042:	f001 fa03 	bl	800644c <vPortExitCritical>

	return xAlreadyYielded;
 8005046:	68bb      	ldr	r3, [r7, #8]
}
 8005048:	4618      	mov	r0, r3
 800504a:	3710      	adds	r7, #16
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}
 8005050:	20000cf4 	.word	0x20000cf4
 8005054:	20000ccc 	.word	0x20000ccc
 8005058:	20000c8c 	.word	0x20000c8c
 800505c:	20000cd4 	.word	0x20000cd4
 8005060:	200007fc 	.word	0x200007fc
 8005064:	200007f8 	.word	0x200007f8
 8005068:	20000ce0 	.word	0x20000ce0
 800506c:	20000cdc 	.word	0x20000cdc
 8005070:	e000ed04 	.word	0xe000ed04

08005074 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800507a:	4b05      	ldr	r3, [pc, #20]	@ (8005090 <xTaskGetTickCount+0x1c>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005080:	687b      	ldr	r3, [r7, #4]
}
 8005082:	4618      	mov	r0, r3
 8005084:	370c      	adds	r7, #12
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr
 800508e:	bf00      	nop
 8005090:	20000cd0 	.word	0x20000cd0

08005094 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b086      	sub	sp, #24
 8005098:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800509a:	2300      	movs	r3, #0
 800509c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800509e:	4b4f      	ldr	r3, [pc, #316]	@ (80051dc <xTaskIncrementTick+0x148>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	f040 8090 	bne.w	80051c8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80050a8:	4b4d      	ldr	r3, [pc, #308]	@ (80051e0 <xTaskIncrementTick+0x14c>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	3301      	adds	r3, #1
 80050ae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80050b0:	4a4b      	ldr	r2, [pc, #300]	@ (80051e0 <xTaskIncrementTick+0x14c>)
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d121      	bne.n	8005100 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80050bc:	4b49      	ldr	r3, [pc, #292]	@ (80051e4 <xTaskIncrementTick+0x150>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d00b      	beq.n	80050de <xTaskIncrementTick+0x4a>
	__asm volatile
 80050c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050ca:	f383 8811 	msr	BASEPRI, r3
 80050ce:	f3bf 8f6f 	isb	sy
 80050d2:	f3bf 8f4f 	dsb	sy
 80050d6:	603b      	str	r3, [r7, #0]
}
 80050d8:	bf00      	nop
 80050da:	bf00      	nop
 80050dc:	e7fd      	b.n	80050da <xTaskIncrementTick+0x46>
 80050de:	4b41      	ldr	r3, [pc, #260]	@ (80051e4 <xTaskIncrementTick+0x150>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	60fb      	str	r3, [r7, #12]
 80050e4:	4b40      	ldr	r3, [pc, #256]	@ (80051e8 <xTaskIncrementTick+0x154>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a3e      	ldr	r2, [pc, #248]	@ (80051e4 <xTaskIncrementTick+0x150>)
 80050ea:	6013      	str	r3, [r2, #0]
 80050ec:	4a3e      	ldr	r2, [pc, #248]	@ (80051e8 <xTaskIncrementTick+0x154>)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6013      	str	r3, [r2, #0]
 80050f2:	4b3e      	ldr	r3, [pc, #248]	@ (80051ec <xTaskIncrementTick+0x158>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	3301      	adds	r3, #1
 80050f8:	4a3c      	ldr	r2, [pc, #240]	@ (80051ec <xTaskIncrementTick+0x158>)
 80050fa:	6013      	str	r3, [r2, #0]
 80050fc:	f000 fad4 	bl	80056a8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005100:	4b3b      	ldr	r3, [pc, #236]	@ (80051f0 <xTaskIncrementTick+0x15c>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	693a      	ldr	r2, [r7, #16]
 8005106:	429a      	cmp	r2, r3
 8005108:	d349      	bcc.n	800519e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800510a:	4b36      	ldr	r3, [pc, #216]	@ (80051e4 <xTaskIncrementTick+0x150>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d104      	bne.n	800511e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005114:	4b36      	ldr	r3, [pc, #216]	@ (80051f0 <xTaskIncrementTick+0x15c>)
 8005116:	f04f 32ff 	mov.w	r2, #4294967295
 800511a:	601a      	str	r2, [r3, #0]
					break;
 800511c:	e03f      	b.n	800519e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800511e:	4b31      	ldr	r3, [pc, #196]	@ (80051e4 <xTaskIncrementTick+0x150>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	68db      	ldr	r3, [r3, #12]
 8005126:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800512e:	693a      	ldr	r2, [r7, #16]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	429a      	cmp	r2, r3
 8005134:	d203      	bcs.n	800513e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005136:	4a2e      	ldr	r2, [pc, #184]	@ (80051f0 <xTaskIncrementTick+0x15c>)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800513c:	e02f      	b.n	800519e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	3304      	adds	r3, #4
 8005142:	4618      	mov	r0, r3
 8005144:	f7fe fd66 	bl	8003c14 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800514c:	2b00      	cmp	r3, #0
 800514e:	d004      	beq.n	800515a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	3318      	adds	r3, #24
 8005154:	4618      	mov	r0, r3
 8005156:	f7fe fd5d 	bl	8003c14 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800515e:	4b25      	ldr	r3, [pc, #148]	@ (80051f4 <xTaskIncrementTick+0x160>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	429a      	cmp	r2, r3
 8005164:	d903      	bls.n	800516e <xTaskIncrementTick+0xda>
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800516a:	4a22      	ldr	r2, [pc, #136]	@ (80051f4 <xTaskIncrementTick+0x160>)
 800516c:	6013      	str	r3, [r2, #0]
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005172:	4613      	mov	r3, r2
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	4413      	add	r3, r2
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	4a1f      	ldr	r2, [pc, #124]	@ (80051f8 <xTaskIncrementTick+0x164>)
 800517c:	441a      	add	r2, r3
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	3304      	adds	r3, #4
 8005182:	4619      	mov	r1, r3
 8005184:	4610      	mov	r0, r2
 8005186:	f7fe fce8 	bl	8003b5a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800518e:	4b1b      	ldr	r3, [pc, #108]	@ (80051fc <xTaskIncrementTick+0x168>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005194:	429a      	cmp	r2, r3
 8005196:	d3b8      	bcc.n	800510a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005198:	2301      	movs	r3, #1
 800519a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800519c:	e7b5      	b.n	800510a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800519e:	4b17      	ldr	r3, [pc, #92]	@ (80051fc <xTaskIncrementTick+0x168>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051a4:	4914      	ldr	r1, [pc, #80]	@ (80051f8 <xTaskIncrementTick+0x164>)
 80051a6:	4613      	mov	r3, r2
 80051a8:	009b      	lsls	r3, r3, #2
 80051aa:	4413      	add	r3, r2
 80051ac:	009b      	lsls	r3, r3, #2
 80051ae:	440b      	add	r3, r1
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	d901      	bls.n	80051ba <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80051b6:	2301      	movs	r3, #1
 80051b8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80051ba:	4b11      	ldr	r3, [pc, #68]	@ (8005200 <xTaskIncrementTick+0x16c>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d007      	beq.n	80051d2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80051c2:	2301      	movs	r3, #1
 80051c4:	617b      	str	r3, [r7, #20]
 80051c6:	e004      	b.n	80051d2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80051c8:	4b0e      	ldr	r3, [pc, #56]	@ (8005204 <xTaskIncrementTick+0x170>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	3301      	adds	r3, #1
 80051ce:	4a0d      	ldr	r2, [pc, #52]	@ (8005204 <xTaskIncrementTick+0x170>)
 80051d0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80051d2:	697b      	ldr	r3, [r7, #20]
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3718      	adds	r7, #24
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}
 80051dc:	20000cf4 	.word	0x20000cf4
 80051e0:	20000cd0 	.word	0x20000cd0
 80051e4:	20000c84 	.word	0x20000c84
 80051e8:	20000c88 	.word	0x20000c88
 80051ec:	20000ce4 	.word	0x20000ce4
 80051f0:	20000cec 	.word	0x20000cec
 80051f4:	20000cd4 	.word	0x20000cd4
 80051f8:	200007fc 	.word	0x200007fc
 80051fc:	200007f8 	.word	0x200007f8
 8005200:	20000ce0 	.word	0x20000ce0
 8005204:	20000cdc 	.word	0x20000cdc

08005208 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005208:	b480      	push	{r7}
 800520a:	b085      	sub	sp, #20
 800520c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800520e:	4b28      	ldr	r3, [pc, #160]	@ (80052b0 <vTaskSwitchContext+0xa8>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d003      	beq.n	800521e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005216:	4b27      	ldr	r3, [pc, #156]	@ (80052b4 <vTaskSwitchContext+0xac>)
 8005218:	2201      	movs	r2, #1
 800521a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800521c:	e042      	b.n	80052a4 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800521e:	4b25      	ldr	r3, [pc, #148]	@ (80052b4 <vTaskSwitchContext+0xac>)
 8005220:	2200      	movs	r2, #0
 8005222:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005224:	4b24      	ldr	r3, [pc, #144]	@ (80052b8 <vTaskSwitchContext+0xb0>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	60fb      	str	r3, [r7, #12]
 800522a:	e011      	b.n	8005250 <vTaskSwitchContext+0x48>
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d10b      	bne.n	800524a <vTaskSwitchContext+0x42>
	__asm volatile
 8005232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005236:	f383 8811 	msr	BASEPRI, r3
 800523a:	f3bf 8f6f 	isb	sy
 800523e:	f3bf 8f4f 	dsb	sy
 8005242:	607b      	str	r3, [r7, #4]
}
 8005244:	bf00      	nop
 8005246:	bf00      	nop
 8005248:	e7fd      	b.n	8005246 <vTaskSwitchContext+0x3e>
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	3b01      	subs	r3, #1
 800524e:	60fb      	str	r3, [r7, #12]
 8005250:	491a      	ldr	r1, [pc, #104]	@ (80052bc <vTaskSwitchContext+0xb4>)
 8005252:	68fa      	ldr	r2, [r7, #12]
 8005254:	4613      	mov	r3, r2
 8005256:	009b      	lsls	r3, r3, #2
 8005258:	4413      	add	r3, r2
 800525a:	009b      	lsls	r3, r3, #2
 800525c:	440b      	add	r3, r1
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d0e3      	beq.n	800522c <vTaskSwitchContext+0x24>
 8005264:	68fa      	ldr	r2, [r7, #12]
 8005266:	4613      	mov	r3, r2
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	4413      	add	r3, r2
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	4a13      	ldr	r2, [pc, #76]	@ (80052bc <vTaskSwitchContext+0xb4>)
 8005270:	4413      	add	r3, r2
 8005272:	60bb      	str	r3, [r7, #8]
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	685a      	ldr	r2, [r3, #4]
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	605a      	str	r2, [r3, #4]
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	685a      	ldr	r2, [r3, #4]
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	3308      	adds	r3, #8
 8005286:	429a      	cmp	r2, r3
 8005288:	d104      	bne.n	8005294 <vTaskSwitchContext+0x8c>
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	685a      	ldr	r2, [r3, #4]
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	605a      	str	r2, [r3, #4]
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	68db      	ldr	r3, [r3, #12]
 800529a:	4a09      	ldr	r2, [pc, #36]	@ (80052c0 <vTaskSwitchContext+0xb8>)
 800529c:	6013      	str	r3, [r2, #0]
 800529e:	4a06      	ldr	r2, [pc, #24]	@ (80052b8 <vTaskSwitchContext+0xb0>)
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6013      	str	r3, [r2, #0]
}
 80052a4:	bf00      	nop
 80052a6:	3714      	adds	r7, #20
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr
 80052b0:	20000cf4 	.word	0x20000cf4
 80052b4:	20000ce0 	.word	0x20000ce0
 80052b8:	20000cd4 	.word	0x20000cd4
 80052bc:	200007fc 	.word	0x200007fc
 80052c0:	200007f8 	.word	0x200007f8

080052c4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b084      	sub	sp, #16
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d10b      	bne.n	80052ec <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80052d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052d8:	f383 8811 	msr	BASEPRI, r3
 80052dc:	f3bf 8f6f 	isb	sy
 80052e0:	f3bf 8f4f 	dsb	sy
 80052e4:	60fb      	str	r3, [r7, #12]
}
 80052e6:	bf00      	nop
 80052e8:	bf00      	nop
 80052ea:	e7fd      	b.n	80052e8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80052ec:	4b07      	ldr	r3, [pc, #28]	@ (800530c <vTaskPlaceOnEventList+0x48>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	3318      	adds	r3, #24
 80052f2:	4619      	mov	r1, r3
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f7fe fc54 	bl	8003ba2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80052fa:	2101      	movs	r1, #1
 80052fc:	6838      	ldr	r0, [r7, #0]
 80052fe:	f000 fb91 	bl	8005a24 <prvAddCurrentTaskToDelayedList>
}
 8005302:	bf00      	nop
 8005304:	3710      	adds	r7, #16
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
 800530a:	bf00      	nop
 800530c:	200007f8 	.word	0x200007f8

08005310 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005310:	b580      	push	{r7, lr}
 8005312:	b086      	sub	sp, #24
 8005314:	af00      	add	r7, sp, #0
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	60b9      	str	r1, [r7, #8]
 800531a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d10b      	bne.n	800533a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005322:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005326:	f383 8811 	msr	BASEPRI, r3
 800532a:	f3bf 8f6f 	isb	sy
 800532e:	f3bf 8f4f 	dsb	sy
 8005332:	617b      	str	r3, [r7, #20]
}
 8005334:	bf00      	nop
 8005336:	bf00      	nop
 8005338:	e7fd      	b.n	8005336 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800533a:	4b0a      	ldr	r3, [pc, #40]	@ (8005364 <vTaskPlaceOnEventListRestricted+0x54>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	3318      	adds	r3, #24
 8005340:	4619      	mov	r1, r3
 8005342:	68f8      	ldr	r0, [r7, #12]
 8005344:	f7fe fc09 	bl	8003b5a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d002      	beq.n	8005354 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800534e:	f04f 33ff 	mov.w	r3, #4294967295
 8005352:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005354:	6879      	ldr	r1, [r7, #4]
 8005356:	68b8      	ldr	r0, [r7, #8]
 8005358:	f000 fb64 	bl	8005a24 <prvAddCurrentTaskToDelayedList>
	}
 800535c:	bf00      	nop
 800535e:	3718      	adds	r7, #24
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}
 8005364:	200007f8 	.word	0x200007f8

08005368 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b086      	sub	sp, #24
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d10b      	bne.n	8005396 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800537e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005382:	f383 8811 	msr	BASEPRI, r3
 8005386:	f3bf 8f6f 	isb	sy
 800538a:	f3bf 8f4f 	dsb	sy
 800538e:	60fb      	str	r3, [r7, #12]
}
 8005390:	bf00      	nop
 8005392:	bf00      	nop
 8005394:	e7fd      	b.n	8005392 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	3318      	adds	r3, #24
 800539a:	4618      	mov	r0, r3
 800539c:	f7fe fc3a 	bl	8003c14 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053a0:	4b1d      	ldr	r3, [pc, #116]	@ (8005418 <xTaskRemoveFromEventList+0xb0>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d11d      	bne.n	80053e4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	3304      	adds	r3, #4
 80053ac:	4618      	mov	r0, r3
 80053ae:	f7fe fc31 	bl	8003c14 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053b6:	4b19      	ldr	r3, [pc, #100]	@ (800541c <xTaskRemoveFromEventList+0xb4>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d903      	bls.n	80053c6 <xTaskRemoveFromEventList+0x5e>
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053c2:	4a16      	ldr	r2, [pc, #88]	@ (800541c <xTaskRemoveFromEventList+0xb4>)
 80053c4:	6013      	str	r3, [r2, #0]
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053ca:	4613      	mov	r3, r2
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	4413      	add	r3, r2
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	4a13      	ldr	r2, [pc, #76]	@ (8005420 <xTaskRemoveFromEventList+0xb8>)
 80053d4:	441a      	add	r2, r3
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	3304      	adds	r3, #4
 80053da:	4619      	mov	r1, r3
 80053dc:	4610      	mov	r0, r2
 80053de:	f7fe fbbc 	bl	8003b5a <vListInsertEnd>
 80053e2:	e005      	b.n	80053f0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	3318      	adds	r3, #24
 80053e8:	4619      	mov	r1, r3
 80053ea:	480e      	ldr	r0, [pc, #56]	@ (8005424 <xTaskRemoveFromEventList+0xbc>)
 80053ec:	f7fe fbb5 	bl	8003b5a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053f4:	4b0c      	ldr	r3, [pc, #48]	@ (8005428 <xTaskRemoveFromEventList+0xc0>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d905      	bls.n	800540a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80053fe:	2301      	movs	r3, #1
 8005400:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005402:	4b0a      	ldr	r3, [pc, #40]	@ (800542c <xTaskRemoveFromEventList+0xc4>)
 8005404:	2201      	movs	r2, #1
 8005406:	601a      	str	r2, [r3, #0]
 8005408:	e001      	b.n	800540e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800540a:	2300      	movs	r3, #0
 800540c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800540e:	697b      	ldr	r3, [r7, #20]
}
 8005410:	4618      	mov	r0, r3
 8005412:	3718      	adds	r7, #24
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}
 8005418:	20000cf4 	.word	0x20000cf4
 800541c:	20000cd4 	.word	0x20000cd4
 8005420:	200007fc 	.word	0x200007fc
 8005424:	20000c8c 	.word	0x20000c8c
 8005428:	200007f8 	.word	0x200007f8
 800542c:	20000ce0 	.word	0x20000ce0

08005430 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005430:	b480      	push	{r7}
 8005432:	b083      	sub	sp, #12
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005438:	4b06      	ldr	r3, [pc, #24]	@ (8005454 <vTaskInternalSetTimeOutState+0x24>)
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005440:	4b05      	ldr	r3, [pc, #20]	@ (8005458 <vTaskInternalSetTimeOutState+0x28>)
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	605a      	str	r2, [r3, #4]
}
 8005448:	bf00      	nop
 800544a:	370c      	adds	r7, #12
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr
 8005454:	20000ce4 	.word	0x20000ce4
 8005458:	20000cd0 	.word	0x20000cd0

0800545c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b088      	sub	sp, #32
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d10b      	bne.n	8005484 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800546c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005470:	f383 8811 	msr	BASEPRI, r3
 8005474:	f3bf 8f6f 	isb	sy
 8005478:	f3bf 8f4f 	dsb	sy
 800547c:	613b      	str	r3, [r7, #16]
}
 800547e:	bf00      	nop
 8005480:	bf00      	nop
 8005482:	e7fd      	b.n	8005480 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d10b      	bne.n	80054a2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800548a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800548e:	f383 8811 	msr	BASEPRI, r3
 8005492:	f3bf 8f6f 	isb	sy
 8005496:	f3bf 8f4f 	dsb	sy
 800549a:	60fb      	str	r3, [r7, #12]
}
 800549c:	bf00      	nop
 800549e:	bf00      	nop
 80054a0:	e7fd      	b.n	800549e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80054a2:	f000 ffa1 	bl	80063e8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80054a6:	4b1d      	ldr	r3, [pc, #116]	@ (800551c <xTaskCheckForTimeOut+0xc0>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	69ba      	ldr	r2, [r7, #24]
 80054b2:	1ad3      	subs	r3, r2, r3
 80054b4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054be:	d102      	bne.n	80054c6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80054c0:	2300      	movs	r3, #0
 80054c2:	61fb      	str	r3, [r7, #28]
 80054c4:	e023      	b.n	800550e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	4b15      	ldr	r3, [pc, #84]	@ (8005520 <xTaskCheckForTimeOut+0xc4>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d007      	beq.n	80054e2 <xTaskCheckForTimeOut+0x86>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	69ba      	ldr	r2, [r7, #24]
 80054d8:	429a      	cmp	r2, r3
 80054da:	d302      	bcc.n	80054e2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80054dc:	2301      	movs	r3, #1
 80054de:	61fb      	str	r3, [r7, #28]
 80054e0:	e015      	b.n	800550e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	697a      	ldr	r2, [r7, #20]
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d20b      	bcs.n	8005504 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	1ad2      	subs	r2, r2, r3
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f7ff ff99 	bl	8005430 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80054fe:	2300      	movs	r3, #0
 8005500:	61fb      	str	r3, [r7, #28]
 8005502:	e004      	b.n	800550e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	2200      	movs	r2, #0
 8005508:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800550a:	2301      	movs	r3, #1
 800550c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800550e:	f000 ff9d 	bl	800644c <vPortExitCritical>

	return xReturn;
 8005512:	69fb      	ldr	r3, [r7, #28]
}
 8005514:	4618      	mov	r0, r3
 8005516:	3720      	adds	r7, #32
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}
 800551c:	20000cd0 	.word	0x20000cd0
 8005520:	20000ce4 	.word	0x20000ce4

08005524 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005524:	b480      	push	{r7}
 8005526:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005528:	4b03      	ldr	r3, [pc, #12]	@ (8005538 <vTaskMissedYield+0x14>)
 800552a:	2201      	movs	r2, #1
 800552c:	601a      	str	r2, [r3, #0]
}
 800552e:	bf00      	nop
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr
 8005538:	20000ce0 	.word	0x20000ce0

0800553c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b082      	sub	sp, #8
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005544:	f000 f852 	bl	80055ec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005548:	4b06      	ldr	r3, [pc, #24]	@ (8005564 <prvIdleTask+0x28>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	2b01      	cmp	r3, #1
 800554e:	d9f9      	bls.n	8005544 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005550:	4b05      	ldr	r3, [pc, #20]	@ (8005568 <prvIdleTask+0x2c>)
 8005552:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005556:	601a      	str	r2, [r3, #0]
 8005558:	f3bf 8f4f 	dsb	sy
 800555c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005560:	e7f0      	b.n	8005544 <prvIdleTask+0x8>
 8005562:	bf00      	nop
 8005564:	200007fc 	.word	0x200007fc
 8005568:	e000ed04 	.word	0xe000ed04

0800556c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b082      	sub	sp, #8
 8005570:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005572:	2300      	movs	r3, #0
 8005574:	607b      	str	r3, [r7, #4]
 8005576:	e00c      	b.n	8005592 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	4613      	mov	r3, r2
 800557c:	009b      	lsls	r3, r3, #2
 800557e:	4413      	add	r3, r2
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	4a12      	ldr	r2, [pc, #72]	@ (80055cc <prvInitialiseTaskLists+0x60>)
 8005584:	4413      	add	r3, r2
 8005586:	4618      	mov	r0, r3
 8005588:	f7fe faba 	bl	8003b00 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	3301      	adds	r3, #1
 8005590:	607b      	str	r3, [r7, #4]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2b37      	cmp	r3, #55	@ 0x37
 8005596:	d9ef      	bls.n	8005578 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005598:	480d      	ldr	r0, [pc, #52]	@ (80055d0 <prvInitialiseTaskLists+0x64>)
 800559a:	f7fe fab1 	bl	8003b00 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800559e:	480d      	ldr	r0, [pc, #52]	@ (80055d4 <prvInitialiseTaskLists+0x68>)
 80055a0:	f7fe faae 	bl	8003b00 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80055a4:	480c      	ldr	r0, [pc, #48]	@ (80055d8 <prvInitialiseTaskLists+0x6c>)
 80055a6:	f7fe faab 	bl	8003b00 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80055aa:	480c      	ldr	r0, [pc, #48]	@ (80055dc <prvInitialiseTaskLists+0x70>)
 80055ac:	f7fe faa8 	bl	8003b00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80055b0:	480b      	ldr	r0, [pc, #44]	@ (80055e0 <prvInitialiseTaskLists+0x74>)
 80055b2:	f7fe faa5 	bl	8003b00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80055b6:	4b0b      	ldr	r3, [pc, #44]	@ (80055e4 <prvInitialiseTaskLists+0x78>)
 80055b8:	4a05      	ldr	r2, [pc, #20]	@ (80055d0 <prvInitialiseTaskLists+0x64>)
 80055ba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80055bc:	4b0a      	ldr	r3, [pc, #40]	@ (80055e8 <prvInitialiseTaskLists+0x7c>)
 80055be:	4a05      	ldr	r2, [pc, #20]	@ (80055d4 <prvInitialiseTaskLists+0x68>)
 80055c0:	601a      	str	r2, [r3, #0]
}
 80055c2:	bf00      	nop
 80055c4:	3708      	adds	r7, #8
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	bf00      	nop
 80055cc:	200007fc 	.word	0x200007fc
 80055d0:	20000c5c 	.word	0x20000c5c
 80055d4:	20000c70 	.word	0x20000c70
 80055d8:	20000c8c 	.word	0x20000c8c
 80055dc:	20000ca0 	.word	0x20000ca0
 80055e0:	20000cb8 	.word	0x20000cb8
 80055e4:	20000c84 	.word	0x20000c84
 80055e8:	20000c88 	.word	0x20000c88

080055ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b082      	sub	sp, #8
 80055f0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80055f2:	e019      	b.n	8005628 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80055f4:	f000 fef8 	bl	80063e8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055f8:	4b10      	ldr	r3, [pc, #64]	@ (800563c <prvCheckTasksWaitingTermination+0x50>)
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	3304      	adds	r3, #4
 8005604:	4618      	mov	r0, r3
 8005606:	f7fe fb05 	bl	8003c14 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800560a:	4b0d      	ldr	r3, [pc, #52]	@ (8005640 <prvCheckTasksWaitingTermination+0x54>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	3b01      	subs	r3, #1
 8005610:	4a0b      	ldr	r2, [pc, #44]	@ (8005640 <prvCheckTasksWaitingTermination+0x54>)
 8005612:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005614:	4b0b      	ldr	r3, [pc, #44]	@ (8005644 <prvCheckTasksWaitingTermination+0x58>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	3b01      	subs	r3, #1
 800561a:	4a0a      	ldr	r2, [pc, #40]	@ (8005644 <prvCheckTasksWaitingTermination+0x58>)
 800561c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800561e:	f000 ff15 	bl	800644c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 f810 	bl	8005648 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005628:	4b06      	ldr	r3, [pc, #24]	@ (8005644 <prvCheckTasksWaitingTermination+0x58>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d1e1      	bne.n	80055f4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005630:	bf00      	nop
 8005632:	bf00      	nop
 8005634:	3708      	adds	r7, #8
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop
 800563c:	20000ca0 	.word	0x20000ca0
 8005640:	20000ccc 	.word	0x20000ccc
 8005644:	20000cb4 	.word	0x20000cb4

08005648 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005648:	b580      	push	{r7, lr}
 800564a:	b084      	sub	sp, #16
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005656:	2b00      	cmp	r3, #0
 8005658:	d108      	bne.n	800566c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800565e:	4618      	mov	r0, r3
 8005660:	f001 f8b2 	bl	80067c8 <vPortFree>
				vPortFree( pxTCB );
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f001 f8af 	bl	80067c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800566a:	e019      	b.n	80056a0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005672:	2b01      	cmp	r3, #1
 8005674:	d103      	bne.n	800567e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f001 f8a6 	bl	80067c8 <vPortFree>
	}
 800567c:	e010      	b.n	80056a0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005684:	2b02      	cmp	r3, #2
 8005686:	d00b      	beq.n	80056a0 <prvDeleteTCB+0x58>
	__asm volatile
 8005688:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800568c:	f383 8811 	msr	BASEPRI, r3
 8005690:	f3bf 8f6f 	isb	sy
 8005694:	f3bf 8f4f 	dsb	sy
 8005698:	60fb      	str	r3, [r7, #12]
}
 800569a:	bf00      	nop
 800569c:	bf00      	nop
 800569e:	e7fd      	b.n	800569c <prvDeleteTCB+0x54>
	}
 80056a0:	bf00      	nop
 80056a2:	3710      	adds	r7, #16
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}

080056a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80056a8:	b480      	push	{r7}
 80056aa:	b083      	sub	sp, #12
 80056ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056ae:	4b0c      	ldr	r3, [pc, #48]	@ (80056e0 <prvResetNextTaskUnblockTime+0x38>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d104      	bne.n	80056c2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80056b8:	4b0a      	ldr	r3, [pc, #40]	@ (80056e4 <prvResetNextTaskUnblockTime+0x3c>)
 80056ba:	f04f 32ff 	mov.w	r2, #4294967295
 80056be:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80056c0:	e008      	b.n	80056d4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056c2:	4b07      	ldr	r3, [pc, #28]	@ (80056e0 <prvResetNextTaskUnblockTime+0x38>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	68db      	ldr	r3, [r3, #12]
 80056c8:	68db      	ldr	r3, [r3, #12]
 80056ca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	4a04      	ldr	r2, [pc, #16]	@ (80056e4 <prvResetNextTaskUnblockTime+0x3c>)
 80056d2:	6013      	str	r3, [r2, #0]
}
 80056d4:	bf00      	nop
 80056d6:	370c      	adds	r7, #12
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr
 80056e0:	20000c84 	.word	0x20000c84
 80056e4:	20000cec 	.word	0x20000cec

080056e8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80056e8:	b480      	push	{r7}
 80056ea:	b083      	sub	sp, #12
 80056ec:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80056ee:	4b05      	ldr	r3, [pc, #20]	@ (8005704 <xTaskGetCurrentTaskHandle+0x1c>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	607b      	str	r3, [r7, #4]

		return xReturn;
 80056f4:	687b      	ldr	r3, [r7, #4]
	}
 80056f6:	4618      	mov	r0, r3
 80056f8:	370c      	adds	r7, #12
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr
 8005702:	bf00      	nop
 8005704:	200007f8 	.word	0x200007f8

08005708 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005708:	b480      	push	{r7}
 800570a:	b083      	sub	sp, #12
 800570c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800570e:	4b0b      	ldr	r3, [pc, #44]	@ (800573c <xTaskGetSchedulerState+0x34>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d102      	bne.n	800571c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005716:	2301      	movs	r3, #1
 8005718:	607b      	str	r3, [r7, #4]
 800571a:	e008      	b.n	800572e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800571c:	4b08      	ldr	r3, [pc, #32]	@ (8005740 <xTaskGetSchedulerState+0x38>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d102      	bne.n	800572a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005724:	2302      	movs	r3, #2
 8005726:	607b      	str	r3, [r7, #4]
 8005728:	e001      	b.n	800572e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800572a:	2300      	movs	r3, #0
 800572c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800572e:	687b      	ldr	r3, [r7, #4]
	}
 8005730:	4618      	mov	r0, r3
 8005732:	370c      	adds	r7, #12
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr
 800573c:	20000cd8 	.word	0x20000cd8
 8005740:	20000cf4 	.word	0x20000cf4

08005744 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005744:	b580      	push	{r7, lr}
 8005746:	b084      	sub	sp, #16
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005750:	2300      	movs	r3, #0
 8005752:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d051      	beq.n	80057fe <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800575e:	4b2a      	ldr	r3, [pc, #168]	@ (8005808 <xTaskPriorityInherit+0xc4>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005764:	429a      	cmp	r2, r3
 8005766:	d241      	bcs.n	80057ec <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	699b      	ldr	r3, [r3, #24]
 800576c:	2b00      	cmp	r3, #0
 800576e:	db06      	blt.n	800577e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005770:	4b25      	ldr	r3, [pc, #148]	@ (8005808 <xTaskPriorityInherit+0xc4>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005776:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	6959      	ldr	r1, [r3, #20]
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005786:	4613      	mov	r3, r2
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	4413      	add	r3, r2
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	4a1f      	ldr	r2, [pc, #124]	@ (800580c <xTaskPriorityInherit+0xc8>)
 8005790:	4413      	add	r3, r2
 8005792:	4299      	cmp	r1, r3
 8005794:	d122      	bne.n	80057dc <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	3304      	adds	r3, #4
 800579a:	4618      	mov	r0, r3
 800579c:	f7fe fa3a 	bl	8003c14 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80057a0:	4b19      	ldr	r3, [pc, #100]	@ (8005808 <xTaskPriorityInherit+0xc4>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057ae:	4b18      	ldr	r3, [pc, #96]	@ (8005810 <xTaskPriorityInherit+0xcc>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d903      	bls.n	80057be <xTaskPriorityInherit+0x7a>
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ba:	4a15      	ldr	r2, [pc, #84]	@ (8005810 <xTaskPriorityInherit+0xcc>)
 80057bc:	6013      	str	r3, [r2, #0]
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057c2:	4613      	mov	r3, r2
 80057c4:	009b      	lsls	r3, r3, #2
 80057c6:	4413      	add	r3, r2
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	4a10      	ldr	r2, [pc, #64]	@ (800580c <xTaskPriorityInherit+0xc8>)
 80057cc:	441a      	add	r2, r3
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	3304      	adds	r3, #4
 80057d2:	4619      	mov	r1, r3
 80057d4:	4610      	mov	r0, r2
 80057d6:	f7fe f9c0 	bl	8003b5a <vListInsertEnd>
 80057da:	e004      	b.n	80057e6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80057dc:	4b0a      	ldr	r3, [pc, #40]	@ (8005808 <xTaskPriorityInherit+0xc4>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80057e6:	2301      	movs	r3, #1
 80057e8:	60fb      	str	r3, [r7, #12]
 80057ea:	e008      	b.n	80057fe <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80057f0:	4b05      	ldr	r3, [pc, #20]	@ (8005808 <xTaskPriorityInherit+0xc4>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d201      	bcs.n	80057fe <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80057fa:	2301      	movs	r3, #1
 80057fc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80057fe:	68fb      	ldr	r3, [r7, #12]
	}
 8005800:	4618      	mov	r0, r3
 8005802:	3710      	adds	r7, #16
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}
 8005808:	200007f8 	.word	0x200007f8
 800580c:	200007fc 	.word	0x200007fc
 8005810:	20000cd4 	.word	0x20000cd4

08005814 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005814:	b580      	push	{r7, lr}
 8005816:	b086      	sub	sp, #24
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005820:	2300      	movs	r3, #0
 8005822:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d058      	beq.n	80058dc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800582a:	4b2f      	ldr	r3, [pc, #188]	@ (80058e8 <xTaskPriorityDisinherit+0xd4>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	693a      	ldr	r2, [r7, #16]
 8005830:	429a      	cmp	r2, r3
 8005832:	d00b      	beq.n	800584c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005834:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005838:	f383 8811 	msr	BASEPRI, r3
 800583c:	f3bf 8f6f 	isb	sy
 8005840:	f3bf 8f4f 	dsb	sy
 8005844:	60fb      	str	r3, [r7, #12]
}
 8005846:	bf00      	nop
 8005848:	bf00      	nop
 800584a:	e7fd      	b.n	8005848 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005850:	2b00      	cmp	r3, #0
 8005852:	d10b      	bne.n	800586c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005854:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005858:	f383 8811 	msr	BASEPRI, r3
 800585c:	f3bf 8f6f 	isb	sy
 8005860:	f3bf 8f4f 	dsb	sy
 8005864:	60bb      	str	r3, [r7, #8]
}
 8005866:	bf00      	nop
 8005868:	bf00      	nop
 800586a:	e7fd      	b.n	8005868 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005870:	1e5a      	subs	r2, r3, #1
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800587e:	429a      	cmp	r2, r3
 8005880:	d02c      	beq.n	80058dc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005886:	2b00      	cmp	r3, #0
 8005888:	d128      	bne.n	80058dc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	3304      	adds	r3, #4
 800588e:	4618      	mov	r0, r3
 8005890:	f7fe f9c0 	bl	8003c14 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058a0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058ac:	4b0f      	ldr	r3, [pc, #60]	@ (80058ec <xTaskPriorityDisinherit+0xd8>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d903      	bls.n	80058bc <xTaskPriorityDisinherit+0xa8>
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058b8:	4a0c      	ldr	r2, [pc, #48]	@ (80058ec <xTaskPriorityDisinherit+0xd8>)
 80058ba:	6013      	str	r3, [r2, #0]
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058c0:	4613      	mov	r3, r2
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	4413      	add	r3, r2
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	4a09      	ldr	r2, [pc, #36]	@ (80058f0 <xTaskPriorityDisinherit+0xdc>)
 80058ca:	441a      	add	r2, r3
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	3304      	adds	r3, #4
 80058d0:	4619      	mov	r1, r3
 80058d2:	4610      	mov	r0, r2
 80058d4:	f7fe f941 	bl	8003b5a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80058d8:	2301      	movs	r3, #1
 80058da:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80058dc:	697b      	ldr	r3, [r7, #20]
	}
 80058de:	4618      	mov	r0, r3
 80058e0:	3718      	adds	r7, #24
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}
 80058e6:	bf00      	nop
 80058e8:	200007f8 	.word	0x200007f8
 80058ec:	20000cd4 	.word	0x20000cd4
 80058f0:	200007fc 	.word	0x200007fc

080058f4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b088      	sub	sp, #32
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005902:	2301      	movs	r3, #1
 8005904:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d06c      	beq.n	80059e6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800590c:	69bb      	ldr	r3, [r7, #24]
 800590e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005910:	2b00      	cmp	r3, #0
 8005912:	d10b      	bne.n	800592c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8005914:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005918:	f383 8811 	msr	BASEPRI, r3
 800591c:	f3bf 8f6f 	isb	sy
 8005920:	f3bf 8f4f 	dsb	sy
 8005924:	60fb      	str	r3, [r7, #12]
}
 8005926:	bf00      	nop
 8005928:	bf00      	nop
 800592a:	e7fd      	b.n	8005928 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800592c:	69bb      	ldr	r3, [r7, #24]
 800592e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005930:	683a      	ldr	r2, [r7, #0]
 8005932:	429a      	cmp	r2, r3
 8005934:	d902      	bls.n	800593c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	61fb      	str	r3, [r7, #28]
 800593a:	e002      	b.n	8005942 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800593c:	69bb      	ldr	r3, [r7, #24]
 800593e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005940:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005942:	69bb      	ldr	r3, [r7, #24]
 8005944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005946:	69fa      	ldr	r2, [r7, #28]
 8005948:	429a      	cmp	r2, r3
 800594a:	d04c      	beq.n	80059e6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800594c:	69bb      	ldr	r3, [r7, #24]
 800594e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005950:	697a      	ldr	r2, [r7, #20]
 8005952:	429a      	cmp	r2, r3
 8005954:	d147      	bne.n	80059e6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005956:	4b26      	ldr	r3, [pc, #152]	@ (80059f0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	69ba      	ldr	r2, [r7, #24]
 800595c:	429a      	cmp	r2, r3
 800595e:	d10b      	bne.n	8005978 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8005960:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005964:	f383 8811 	msr	BASEPRI, r3
 8005968:	f3bf 8f6f 	isb	sy
 800596c:	f3bf 8f4f 	dsb	sy
 8005970:	60bb      	str	r3, [r7, #8]
}
 8005972:	bf00      	nop
 8005974:	bf00      	nop
 8005976:	e7fd      	b.n	8005974 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005978:	69bb      	ldr	r3, [r7, #24]
 800597a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800597c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800597e:	69bb      	ldr	r3, [r7, #24]
 8005980:	69fa      	ldr	r2, [r7, #28]
 8005982:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005984:	69bb      	ldr	r3, [r7, #24]
 8005986:	699b      	ldr	r3, [r3, #24]
 8005988:	2b00      	cmp	r3, #0
 800598a:	db04      	blt.n	8005996 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800598c:	69fb      	ldr	r3, [r7, #28]
 800598e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005992:	69bb      	ldr	r3, [r7, #24]
 8005994:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005996:	69bb      	ldr	r3, [r7, #24]
 8005998:	6959      	ldr	r1, [r3, #20]
 800599a:	693a      	ldr	r2, [r7, #16]
 800599c:	4613      	mov	r3, r2
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	4413      	add	r3, r2
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	4a13      	ldr	r2, [pc, #76]	@ (80059f4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80059a6:	4413      	add	r3, r2
 80059a8:	4299      	cmp	r1, r3
 80059aa:	d11c      	bne.n	80059e6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80059ac:	69bb      	ldr	r3, [r7, #24]
 80059ae:	3304      	adds	r3, #4
 80059b0:	4618      	mov	r0, r3
 80059b2:	f7fe f92f 	bl	8003c14 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80059b6:	69bb      	ldr	r3, [r7, #24]
 80059b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059ba:	4b0f      	ldr	r3, [pc, #60]	@ (80059f8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	429a      	cmp	r2, r3
 80059c0:	d903      	bls.n	80059ca <vTaskPriorityDisinheritAfterTimeout+0xd6>
 80059c2:	69bb      	ldr	r3, [r7, #24]
 80059c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059c6:	4a0c      	ldr	r2, [pc, #48]	@ (80059f8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80059c8:	6013      	str	r3, [r2, #0]
 80059ca:	69bb      	ldr	r3, [r7, #24]
 80059cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059ce:	4613      	mov	r3, r2
 80059d0:	009b      	lsls	r3, r3, #2
 80059d2:	4413      	add	r3, r2
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	4a07      	ldr	r2, [pc, #28]	@ (80059f4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80059d8:	441a      	add	r2, r3
 80059da:	69bb      	ldr	r3, [r7, #24]
 80059dc:	3304      	adds	r3, #4
 80059de:	4619      	mov	r1, r3
 80059e0:	4610      	mov	r0, r2
 80059e2:	f7fe f8ba 	bl	8003b5a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80059e6:	bf00      	nop
 80059e8:	3720      	adds	r7, #32
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}
 80059ee:	bf00      	nop
 80059f0:	200007f8 	.word	0x200007f8
 80059f4:	200007fc 	.word	0x200007fc
 80059f8:	20000cd4 	.word	0x20000cd4

080059fc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80059fc:	b480      	push	{r7}
 80059fe:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005a00:	4b07      	ldr	r3, [pc, #28]	@ (8005a20 <pvTaskIncrementMutexHeldCount+0x24>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d004      	beq.n	8005a12 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005a08:	4b05      	ldr	r3, [pc, #20]	@ (8005a20 <pvTaskIncrementMutexHeldCount+0x24>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005a0e:	3201      	adds	r2, #1
 8005a10:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8005a12:	4b03      	ldr	r3, [pc, #12]	@ (8005a20 <pvTaskIncrementMutexHeldCount+0x24>)
 8005a14:	681b      	ldr	r3, [r3, #0]
	}
 8005a16:	4618      	mov	r0, r3
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr
 8005a20:	200007f8 	.word	0x200007f8

08005a24 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b084      	sub	sp, #16
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005a2e:	4b21      	ldr	r3, [pc, #132]	@ (8005ab4 <prvAddCurrentTaskToDelayedList+0x90>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a34:	4b20      	ldr	r3, [pc, #128]	@ (8005ab8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	3304      	adds	r3, #4
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f7fe f8ea 	bl	8003c14 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a46:	d10a      	bne.n	8005a5e <prvAddCurrentTaskToDelayedList+0x3a>
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d007      	beq.n	8005a5e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a4e:	4b1a      	ldr	r3, [pc, #104]	@ (8005ab8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	3304      	adds	r3, #4
 8005a54:	4619      	mov	r1, r3
 8005a56:	4819      	ldr	r0, [pc, #100]	@ (8005abc <prvAddCurrentTaskToDelayedList+0x98>)
 8005a58:	f7fe f87f 	bl	8003b5a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005a5c:	e026      	b.n	8005aac <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005a5e:	68fa      	ldr	r2, [r7, #12]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	4413      	add	r3, r2
 8005a64:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005a66:	4b14      	ldr	r3, [pc, #80]	@ (8005ab8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	68ba      	ldr	r2, [r7, #8]
 8005a6c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005a6e:	68ba      	ldr	r2, [r7, #8]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d209      	bcs.n	8005a8a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a76:	4b12      	ldr	r3, [pc, #72]	@ (8005ac0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	4b0f      	ldr	r3, [pc, #60]	@ (8005ab8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	3304      	adds	r3, #4
 8005a80:	4619      	mov	r1, r3
 8005a82:	4610      	mov	r0, r2
 8005a84:	f7fe f88d 	bl	8003ba2 <vListInsert>
}
 8005a88:	e010      	b.n	8005aac <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a8a:	4b0e      	ldr	r3, [pc, #56]	@ (8005ac4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	4b0a      	ldr	r3, [pc, #40]	@ (8005ab8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	3304      	adds	r3, #4
 8005a94:	4619      	mov	r1, r3
 8005a96:	4610      	mov	r0, r2
 8005a98:	f7fe f883 	bl	8003ba2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005a9c:	4b0a      	ldr	r3, [pc, #40]	@ (8005ac8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	68ba      	ldr	r2, [r7, #8]
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	d202      	bcs.n	8005aac <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005aa6:	4a08      	ldr	r2, [pc, #32]	@ (8005ac8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	6013      	str	r3, [r2, #0]
}
 8005aac:	bf00      	nop
 8005aae:	3710      	adds	r7, #16
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}
 8005ab4:	20000cd0 	.word	0x20000cd0
 8005ab8:	200007f8 	.word	0x200007f8
 8005abc:	20000cb8 	.word	0x20000cb8
 8005ac0:	20000c88 	.word	0x20000c88
 8005ac4:	20000c84 	.word	0x20000c84
 8005ac8:	20000cec 	.word	0x20000cec

08005acc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b08a      	sub	sp, #40	@ 0x28
 8005ad0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005ad6:	f000 fb13 	bl	8006100 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005ada:	4b1d      	ldr	r3, [pc, #116]	@ (8005b50 <xTimerCreateTimerTask+0x84>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d021      	beq.n	8005b26 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005aea:	1d3a      	adds	r2, r7, #4
 8005aec:	f107 0108 	add.w	r1, r7, #8
 8005af0:	f107 030c 	add.w	r3, r7, #12
 8005af4:	4618      	mov	r0, r3
 8005af6:	f7fd ffe9 	bl	8003acc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005afa:	6879      	ldr	r1, [r7, #4]
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	68fa      	ldr	r2, [r7, #12]
 8005b00:	9202      	str	r2, [sp, #8]
 8005b02:	9301      	str	r3, [sp, #4]
 8005b04:	2302      	movs	r3, #2
 8005b06:	9300      	str	r3, [sp, #0]
 8005b08:	2300      	movs	r3, #0
 8005b0a:	460a      	mov	r2, r1
 8005b0c:	4911      	ldr	r1, [pc, #68]	@ (8005b54 <xTimerCreateTimerTask+0x88>)
 8005b0e:	4812      	ldr	r0, [pc, #72]	@ (8005b58 <xTimerCreateTimerTask+0x8c>)
 8005b10:	f7fe ffc0 	bl	8004a94 <xTaskCreateStatic>
 8005b14:	4603      	mov	r3, r0
 8005b16:	4a11      	ldr	r2, [pc, #68]	@ (8005b5c <xTimerCreateTimerTask+0x90>)
 8005b18:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005b1a:	4b10      	ldr	r3, [pc, #64]	@ (8005b5c <xTimerCreateTimerTask+0x90>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d001      	beq.n	8005b26 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005b22:	2301      	movs	r3, #1
 8005b24:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d10b      	bne.n	8005b44 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005b2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b30:	f383 8811 	msr	BASEPRI, r3
 8005b34:	f3bf 8f6f 	isb	sy
 8005b38:	f3bf 8f4f 	dsb	sy
 8005b3c:	613b      	str	r3, [r7, #16]
}
 8005b3e:	bf00      	nop
 8005b40:	bf00      	nop
 8005b42:	e7fd      	b.n	8005b40 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005b44:	697b      	ldr	r3, [r7, #20]
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3718      	adds	r7, #24
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}
 8005b4e:	bf00      	nop
 8005b50:	20000d28 	.word	0x20000d28
 8005b54:	08006d80 	.word	0x08006d80
 8005b58:	08005c99 	.word	0x08005c99
 8005b5c:	20000d2c 	.word	0x20000d2c

08005b60 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b08a      	sub	sp, #40	@ 0x28
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	60f8      	str	r0, [r7, #12]
 8005b68:	60b9      	str	r1, [r7, #8]
 8005b6a:	607a      	str	r2, [r7, #4]
 8005b6c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d10b      	bne.n	8005b90 <xTimerGenericCommand+0x30>
	__asm volatile
 8005b78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b7c:	f383 8811 	msr	BASEPRI, r3
 8005b80:	f3bf 8f6f 	isb	sy
 8005b84:	f3bf 8f4f 	dsb	sy
 8005b88:	623b      	str	r3, [r7, #32]
}
 8005b8a:	bf00      	nop
 8005b8c:	bf00      	nop
 8005b8e:	e7fd      	b.n	8005b8c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005b90:	4b19      	ldr	r3, [pc, #100]	@ (8005bf8 <xTimerGenericCommand+0x98>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d02a      	beq.n	8005bee <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	2b05      	cmp	r3, #5
 8005ba8:	dc18      	bgt.n	8005bdc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005baa:	f7ff fdad 	bl	8005708 <xTaskGetSchedulerState>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	2b02      	cmp	r3, #2
 8005bb2:	d109      	bne.n	8005bc8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005bb4:	4b10      	ldr	r3, [pc, #64]	@ (8005bf8 <xTimerGenericCommand+0x98>)
 8005bb6:	6818      	ldr	r0, [r3, #0]
 8005bb8:	f107 0110 	add.w	r1, r7, #16
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bc0:	f7fe fa50 	bl	8004064 <xQueueGenericSend>
 8005bc4:	6278      	str	r0, [r7, #36]	@ 0x24
 8005bc6:	e012      	b.n	8005bee <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8005bf8 <xTimerGenericCommand+0x98>)
 8005bca:	6818      	ldr	r0, [r3, #0]
 8005bcc:	f107 0110 	add.w	r1, r7, #16
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	f7fe fa46 	bl	8004064 <xQueueGenericSend>
 8005bd8:	6278      	str	r0, [r7, #36]	@ 0x24
 8005bda:	e008      	b.n	8005bee <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005bdc:	4b06      	ldr	r3, [pc, #24]	@ (8005bf8 <xTimerGenericCommand+0x98>)
 8005bde:	6818      	ldr	r0, [r3, #0]
 8005be0:	f107 0110 	add.w	r1, r7, #16
 8005be4:	2300      	movs	r3, #0
 8005be6:	683a      	ldr	r2, [r7, #0]
 8005be8:	f7fe fb3e 	bl	8004268 <xQueueGenericSendFromISR>
 8005bec:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3728      	adds	r7, #40	@ 0x28
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}
 8005bf8:	20000d28 	.word	0x20000d28

08005bfc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b088      	sub	sp, #32
 8005c00:	af02      	add	r7, sp, #8
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c06:	4b23      	ldr	r3, [pc, #140]	@ (8005c94 <prvProcessExpiredTimer+0x98>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	68db      	ldr	r3, [r3, #12]
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	3304      	adds	r3, #4
 8005c14:	4618      	mov	r0, r3
 8005c16:	f7fd fffd 	bl	8003c14 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005c20:	f003 0304 	and.w	r3, r3, #4
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d023      	beq.n	8005c70 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	699a      	ldr	r2, [r3, #24]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	18d1      	adds	r1, r2, r3
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	683a      	ldr	r2, [r7, #0]
 8005c34:	6978      	ldr	r0, [r7, #20]
 8005c36:	f000 f8d5 	bl	8005de4 <prvInsertTimerInActiveList>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d020      	beq.n	8005c82 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005c40:	2300      	movs	r3, #0
 8005c42:	9300      	str	r3, [sp, #0]
 8005c44:	2300      	movs	r3, #0
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	2100      	movs	r1, #0
 8005c4a:	6978      	ldr	r0, [r7, #20]
 8005c4c:	f7ff ff88 	bl	8005b60 <xTimerGenericCommand>
 8005c50:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d114      	bne.n	8005c82 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005c58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c5c:	f383 8811 	msr	BASEPRI, r3
 8005c60:	f3bf 8f6f 	isb	sy
 8005c64:	f3bf 8f4f 	dsb	sy
 8005c68:	60fb      	str	r3, [r7, #12]
}
 8005c6a:	bf00      	nop
 8005c6c:	bf00      	nop
 8005c6e:	e7fd      	b.n	8005c6c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005c76:	f023 0301 	bic.w	r3, r3, #1
 8005c7a:	b2da      	uxtb	r2, r3
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	6a1b      	ldr	r3, [r3, #32]
 8005c86:	6978      	ldr	r0, [r7, #20]
 8005c88:	4798      	blx	r3
}
 8005c8a:	bf00      	nop
 8005c8c:	3718      	adds	r7, #24
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}
 8005c92:	bf00      	nop
 8005c94:	20000d20 	.word	0x20000d20

08005c98 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b084      	sub	sp, #16
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005ca0:	f107 0308 	add.w	r3, r7, #8
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f000 f859 	bl	8005d5c <prvGetNextExpireTime>
 8005caa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	4619      	mov	r1, r3
 8005cb0:	68f8      	ldr	r0, [r7, #12]
 8005cb2:	f000 f805 	bl	8005cc0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005cb6:	f000 f8d7 	bl	8005e68 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005cba:	bf00      	nop
 8005cbc:	e7f0      	b.n	8005ca0 <prvTimerTask+0x8>
	...

08005cc0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b084      	sub	sp, #16
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005cca:	f7ff f927 	bl	8004f1c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005cce:	f107 0308 	add.w	r3, r7, #8
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f000 f866 	bl	8005da4 <prvSampleTimeNow>
 8005cd8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d130      	bne.n	8005d42 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d10a      	bne.n	8005cfc <prvProcessTimerOrBlockTask+0x3c>
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d806      	bhi.n	8005cfc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005cee:	f7ff f923 	bl	8004f38 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005cf2:	68f9      	ldr	r1, [r7, #12]
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f7ff ff81 	bl	8005bfc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005cfa:	e024      	b.n	8005d46 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d008      	beq.n	8005d14 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005d02:	4b13      	ldr	r3, [pc, #76]	@ (8005d50 <prvProcessTimerOrBlockTask+0x90>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d101      	bne.n	8005d10 <prvProcessTimerOrBlockTask+0x50>
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e000      	b.n	8005d12 <prvProcessTimerOrBlockTask+0x52>
 8005d10:	2300      	movs	r3, #0
 8005d12:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005d14:	4b0f      	ldr	r3, [pc, #60]	@ (8005d54 <prvProcessTimerOrBlockTask+0x94>)
 8005d16:	6818      	ldr	r0, [r3, #0]
 8005d18:	687a      	ldr	r2, [r7, #4]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	1ad3      	subs	r3, r2, r3
 8005d1e:	683a      	ldr	r2, [r7, #0]
 8005d20:	4619      	mov	r1, r3
 8005d22:	f7fe fe83 	bl	8004a2c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005d26:	f7ff f907 	bl	8004f38 <xTaskResumeAll>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d10a      	bne.n	8005d46 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005d30:	4b09      	ldr	r3, [pc, #36]	@ (8005d58 <prvProcessTimerOrBlockTask+0x98>)
 8005d32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d36:	601a      	str	r2, [r3, #0]
 8005d38:	f3bf 8f4f 	dsb	sy
 8005d3c:	f3bf 8f6f 	isb	sy
}
 8005d40:	e001      	b.n	8005d46 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005d42:	f7ff f8f9 	bl	8004f38 <xTaskResumeAll>
}
 8005d46:	bf00      	nop
 8005d48:	3710      	adds	r7, #16
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}
 8005d4e:	bf00      	nop
 8005d50:	20000d24 	.word	0x20000d24
 8005d54:	20000d28 	.word	0x20000d28
 8005d58:	e000ed04 	.word	0xe000ed04

08005d5c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b085      	sub	sp, #20
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005d64:	4b0e      	ldr	r3, [pc, #56]	@ (8005da0 <prvGetNextExpireTime+0x44>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d101      	bne.n	8005d72 <prvGetNextExpireTime+0x16>
 8005d6e:	2201      	movs	r2, #1
 8005d70:	e000      	b.n	8005d74 <prvGetNextExpireTime+0x18>
 8005d72:	2200      	movs	r2, #0
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d105      	bne.n	8005d8c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005d80:	4b07      	ldr	r3, [pc, #28]	@ (8005da0 <prvGetNextExpireTime+0x44>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	68db      	ldr	r3, [r3, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	60fb      	str	r3, [r7, #12]
 8005d8a:	e001      	b.n	8005d90 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005d90:	68fb      	ldr	r3, [r7, #12]
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3714      	adds	r7, #20
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr
 8005d9e:	bf00      	nop
 8005da0:	20000d20 	.word	0x20000d20

08005da4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b084      	sub	sp, #16
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005dac:	f7ff f962 	bl	8005074 <xTaskGetTickCount>
 8005db0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005db2:	4b0b      	ldr	r3, [pc, #44]	@ (8005de0 <prvSampleTimeNow+0x3c>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	68fa      	ldr	r2, [r7, #12]
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d205      	bcs.n	8005dc8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005dbc:	f000 f93a 	bl	8006034 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	601a      	str	r2, [r3, #0]
 8005dc6:	e002      	b.n	8005dce <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005dce:	4a04      	ldr	r2, [pc, #16]	@ (8005de0 <prvSampleTimeNow+0x3c>)
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3710      	adds	r7, #16
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}
 8005dde:	bf00      	nop
 8005de0:	20000d30 	.word	0x20000d30

08005de4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b086      	sub	sp, #24
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	60f8      	str	r0, [r7, #12]
 8005dec:	60b9      	str	r1, [r7, #8]
 8005dee:	607a      	str	r2, [r7, #4]
 8005df0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005df2:	2300      	movs	r3, #0
 8005df4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	68ba      	ldr	r2, [r7, #8]
 8005dfa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	68fa      	ldr	r2, [r7, #12]
 8005e00:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005e02:	68ba      	ldr	r2, [r7, #8]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d812      	bhi.n	8005e30 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	1ad2      	subs	r2, r2, r3
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	699b      	ldr	r3, [r3, #24]
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d302      	bcc.n	8005e1e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	617b      	str	r3, [r7, #20]
 8005e1c:	e01b      	b.n	8005e56 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005e1e:	4b10      	ldr	r3, [pc, #64]	@ (8005e60 <prvInsertTimerInActiveList+0x7c>)
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	3304      	adds	r3, #4
 8005e26:	4619      	mov	r1, r3
 8005e28:	4610      	mov	r0, r2
 8005e2a:	f7fd feba 	bl	8003ba2 <vListInsert>
 8005e2e:	e012      	b.n	8005e56 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d206      	bcs.n	8005e46 <prvInsertTimerInActiveList+0x62>
 8005e38:	68ba      	ldr	r2, [r7, #8]
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d302      	bcc.n	8005e46 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005e40:	2301      	movs	r3, #1
 8005e42:	617b      	str	r3, [r7, #20]
 8005e44:	e007      	b.n	8005e56 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005e46:	4b07      	ldr	r3, [pc, #28]	@ (8005e64 <prvInsertTimerInActiveList+0x80>)
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	3304      	adds	r3, #4
 8005e4e:	4619      	mov	r1, r3
 8005e50:	4610      	mov	r0, r2
 8005e52:	f7fd fea6 	bl	8003ba2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005e56:	697b      	ldr	r3, [r7, #20]
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3718      	adds	r7, #24
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}
 8005e60:	20000d24 	.word	0x20000d24
 8005e64:	20000d20 	.word	0x20000d20

08005e68 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b08e      	sub	sp, #56	@ 0x38
 8005e6c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005e6e:	e0ce      	b.n	800600e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	da19      	bge.n	8005eaa <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005e76:	1d3b      	adds	r3, r7, #4
 8005e78:	3304      	adds	r3, #4
 8005e7a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005e7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d10b      	bne.n	8005e9a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005e82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e86:	f383 8811 	msr	BASEPRI, r3
 8005e8a:	f3bf 8f6f 	isb	sy
 8005e8e:	f3bf 8f4f 	dsb	sy
 8005e92:	61fb      	str	r3, [r7, #28]
}
 8005e94:	bf00      	nop
 8005e96:	bf00      	nop
 8005e98:	e7fd      	b.n	8005e96 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005e9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ea0:	6850      	ldr	r0, [r2, #4]
 8005ea2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ea4:	6892      	ldr	r2, [r2, #8]
 8005ea6:	4611      	mov	r1, r2
 8005ea8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	f2c0 80ae 	blt.w	800600e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005eb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eb8:	695b      	ldr	r3, [r3, #20]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d004      	beq.n	8005ec8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005ebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ec0:	3304      	adds	r3, #4
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f7fd fea6 	bl	8003c14 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005ec8:	463b      	mov	r3, r7
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f7ff ff6a 	bl	8005da4 <prvSampleTimeNow>
 8005ed0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2b09      	cmp	r3, #9
 8005ed6:	f200 8097 	bhi.w	8006008 <prvProcessReceivedCommands+0x1a0>
 8005eda:	a201      	add	r2, pc, #4	@ (adr r2, 8005ee0 <prvProcessReceivedCommands+0x78>)
 8005edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ee0:	08005f09 	.word	0x08005f09
 8005ee4:	08005f09 	.word	0x08005f09
 8005ee8:	08005f09 	.word	0x08005f09
 8005eec:	08005f7f 	.word	0x08005f7f
 8005ef0:	08005f93 	.word	0x08005f93
 8005ef4:	08005fdf 	.word	0x08005fdf
 8005ef8:	08005f09 	.word	0x08005f09
 8005efc:	08005f09 	.word	0x08005f09
 8005f00:	08005f7f 	.word	0x08005f7f
 8005f04:	08005f93 	.word	0x08005f93
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005f08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f0a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005f0e:	f043 0301 	orr.w	r3, r3, #1
 8005f12:	b2da      	uxtb	r2, r3
 8005f14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f16:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005f1a:	68ba      	ldr	r2, [r7, #8]
 8005f1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f1e:	699b      	ldr	r3, [r3, #24]
 8005f20:	18d1      	adds	r1, r2, r3
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f28:	f7ff ff5c 	bl	8005de4 <prvInsertTimerInActiveList>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d06c      	beq.n	800600c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005f32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f34:	6a1b      	ldr	r3, [r3, #32]
 8005f36:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f38:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005f3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f3c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005f40:	f003 0304 	and.w	r3, r3, #4
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d061      	beq.n	800600c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005f48:	68ba      	ldr	r2, [r7, #8]
 8005f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f4c:	699b      	ldr	r3, [r3, #24]
 8005f4e:	441a      	add	r2, r3
 8005f50:	2300      	movs	r3, #0
 8005f52:	9300      	str	r3, [sp, #0]
 8005f54:	2300      	movs	r3, #0
 8005f56:	2100      	movs	r1, #0
 8005f58:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f5a:	f7ff fe01 	bl	8005b60 <xTimerGenericCommand>
 8005f5e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005f60:	6a3b      	ldr	r3, [r7, #32]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d152      	bne.n	800600c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8005f66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f6a:	f383 8811 	msr	BASEPRI, r3
 8005f6e:	f3bf 8f6f 	isb	sy
 8005f72:	f3bf 8f4f 	dsb	sy
 8005f76:	61bb      	str	r3, [r7, #24]
}
 8005f78:	bf00      	nop
 8005f7a:	bf00      	nop
 8005f7c:	e7fd      	b.n	8005f7a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f80:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005f84:	f023 0301 	bic.w	r3, r3, #1
 8005f88:	b2da      	uxtb	r2, r3
 8005f8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f8c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005f90:	e03d      	b.n	800600e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005f92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f94:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005f98:	f043 0301 	orr.w	r3, r3, #1
 8005f9c:	b2da      	uxtb	r2, r3
 8005f9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fa0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005fa4:	68ba      	ldr	r2, [r7, #8]
 8005fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fa8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005faa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fac:	699b      	ldr	r3, [r3, #24]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d10b      	bne.n	8005fca <prvProcessReceivedCommands+0x162>
	__asm volatile
 8005fb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fb6:	f383 8811 	msr	BASEPRI, r3
 8005fba:	f3bf 8f6f 	isb	sy
 8005fbe:	f3bf 8f4f 	dsb	sy
 8005fc2:	617b      	str	r3, [r7, #20]
}
 8005fc4:	bf00      	nop
 8005fc6:	bf00      	nop
 8005fc8:	e7fd      	b.n	8005fc6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005fca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fcc:	699a      	ldr	r2, [r3, #24]
 8005fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fd0:	18d1      	adds	r1, r2, r3
 8005fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fd6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005fd8:	f7ff ff04 	bl	8005de4 <prvInsertTimerInActiveList>
					break;
 8005fdc:	e017      	b.n	800600e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005fde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fe0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005fe4:	f003 0302 	and.w	r3, r3, #2
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d103      	bne.n	8005ff4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8005fec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005fee:	f000 fbeb 	bl	80067c8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005ff2:	e00c      	b.n	800600e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005ff4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ff6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005ffa:	f023 0301 	bic.w	r3, r3, #1
 8005ffe:	b2da      	uxtb	r2, r3
 8006000:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006002:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006006:	e002      	b.n	800600e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006008:	bf00      	nop
 800600a:	e000      	b.n	800600e <prvProcessReceivedCommands+0x1a6>
					break;
 800600c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800600e:	4b08      	ldr	r3, [pc, #32]	@ (8006030 <prvProcessReceivedCommands+0x1c8>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	1d39      	adds	r1, r7, #4
 8006014:	2200      	movs	r2, #0
 8006016:	4618      	mov	r0, r3
 8006018:	f7fe f9c4 	bl	80043a4 <xQueueReceive>
 800601c:	4603      	mov	r3, r0
 800601e:	2b00      	cmp	r3, #0
 8006020:	f47f af26 	bne.w	8005e70 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006024:	bf00      	nop
 8006026:	bf00      	nop
 8006028:	3730      	adds	r7, #48	@ 0x30
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}
 800602e:	bf00      	nop
 8006030:	20000d28 	.word	0x20000d28

08006034 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b088      	sub	sp, #32
 8006038:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800603a:	e049      	b.n	80060d0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800603c:	4b2e      	ldr	r3, [pc, #184]	@ (80060f8 <prvSwitchTimerLists+0xc4>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	68db      	ldr	r3, [r3, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006046:	4b2c      	ldr	r3, [pc, #176]	@ (80060f8 <prvSwitchTimerLists+0xc4>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	68db      	ldr	r3, [r3, #12]
 800604c:	68db      	ldr	r3, [r3, #12]
 800604e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	3304      	adds	r3, #4
 8006054:	4618      	mov	r0, r3
 8006056:	f7fd fddd 	bl	8003c14 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	6a1b      	ldr	r3, [r3, #32]
 800605e:	68f8      	ldr	r0, [r7, #12]
 8006060:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006068:	f003 0304 	and.w	r3, r3, #4
 800606c:	2b00      	cmp	r3, #0
 800606e:	d02f      	beq.n	80060d0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	699b      	ldr	r3, [r3, #24]
 8006074:	693a      	ldr	r2, [r7, #16]
 8006076:	4413      	add	r3, r2
 8006078:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800607a:	68ba      	ldr	r2, [r7, #8]
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	429a      	cmp	r2, r3
 8006080:	d90e      	bls.n	80060a0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	68ba      	ldr	r2, [r7, #8]
 8006086:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	68fa      	ldr	r2, [r7, #12]
 800608c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800608e:	4b1a      	ldr	r3, [pc, #104]	@ (80060f8 <prvSwitchTimerLists+0xc4>)
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	3304      	adds	r3, #4
 8006096:	4619      	mov	r1, r3
 8006098:	4610      	mov	r0, r2
 800609a:	f7fd fd82 	bl	8003ba2 <vListInsert>
 800609e:	e017      	b.n	80060d0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80060a0:	2300      	movs	r3, #0
 80060a2:	9300      	str	r3, [sp, #0]
 80060a4:	2300      	movs	r3, #0
 80060a6:	693a      	ldr	r2, [r7, #16]
 80060a8:	2100      	movs	r1, #0
 80060aa:	68f8      	ldr	r0, [r7, #12]
 80060ac:	f7ff fd58 	bl	8005b60 <xTimerGenericCommand>
 80060b0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d10b      	bne.n	80060d0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80060b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060bc:	f383 8811 	msr	BASEPRI, r3
 80060c0:	f3bf 8f6f 	isb	sy
 80060c4:	f3bf 8f4f 	dsb	sy
 80060c8:	603b      	str	r3, [r7, #0]
}
 80060ca:	bf00      	nop
 80060cc:	bf00      	nop
 80060ce:	e7fd      	b.n	80060cc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80060d0:	4b09      	ldr	r3, [pc, #36]	@ (80060f8 <prvSwitchTimerLists+0xc4>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d1b0      	bne.n	800603c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80060da:	4b07      	ldr	r3, [pc, #28]	@ (80060f8 <prvSwitchTimerLists+0xc4>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80060e0:	4b06      	ldr	r3, [pc, #24]	@ (80060fc <prvSwitchTimerLists+0xc8>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a04      	ldr	r2, [pc, #16]	@ (80060f8 <prvSwitchTimerLists+0xc4>)
 80060e6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80060e8:	4a04      	ldr	r2, [pc, #16]	@ (80060fc <prvSwitchTimerLists+0xc8>)
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	6013      	str	r3, [r2, #0]
}
 80060ee:	bf00      	nop
 80060f0:	3718      	adds	r7, #24
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}
 80060f6:	bf00      	nop
 80060f8:	20000d20 	.word	0x20000d20
 80060fc:	20000d24 	.word	0x20000d24

08006100 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b082      	sub	sp, #8
 8006104:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006106:	f000 f96f 	bl	80063e8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800610a:	4b15      	ldr	r3, [pc, #84]	@ (8006160 <prvCheckForValidListAndQueue+0x60>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d120      	bne.n	8006154 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006112:	4814      	ldr	r0, [pc, #80]	@ (8006164 <prvCheckForValidListAndQueue+0x64>)
 8006114:	f7fd fcf4 	bl	8003b00 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006118:	4813      	ldr	r0, [pc, #76]	@ (8006168 <prvCheckForValidListAndQueue+0x68>)
 800611a:	f7fd fcf1 	bl	8003b00 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800611e:	4b13      	ldr	r3, [pc, #76]	@ (800616c <prvCheckForValidListAndQueue+0x6c>)
 8006120:	4a10      	ldr	r2, [pc, #64]	@ (8006164 <prvCheckForValidListAndQueue+0x64>)
 8006122:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006124:	4b12      	ldr	r3, [pc, #72]	@ (8006170 <prvCheckForValidListAndQueue+0x70>)
 8006126:	4a10      	ldr	r2, [pc, #64]	@ (8006168 <prvCheckForValidListAndQueue+0x68>)
 8006128:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800612a:	2300      	movs	r3, #0
 800612c:	9300      	str	r3, [sp, #0]
 800612e:	4b11      	ldr	r3, [pc, #68]	@ (8006174 <prvCheckForValidListAndQueue+0x74>)
 8006130:	4a11      	ldr	r2, [pc, #68]	@ (8006178 <prvCheckForValidListAndQueue+0x78>)
 8006132:	2110      	movs	r1, #16
 8006134:	200a      	movs	r0, #10
 8006136:	f7fd fe01 	bl	8003d3c <xQueueGenericCreateStatic>
 800613a:	4603      	mov	r3, r0
 800613c:	4a08      	ldr	r2, [pc, #32]	@ (8006160 <prvCheckForValidListAndQueue+0x60>)
 800613e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006140:	4b07      	ldr	r3, [pc, #28]	@ (8006160 <prvCheckForValidListAndQueue+0x60>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d005      	beq.n	8006154 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006148:	4b05      	ldr	r3, [pc, #20]	@ (8006160 <prvCheckForValidListAndQueue+0x60>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	490b      	ldr	r1, [pc, #44]	@ (800617c <prvCheckForValidListAndQueue+0x7c>)
 800614e:	4618      	mov	r0, r3
 8006150:	f7fe fc42 	bl	80049d8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006154:	f000 f97a 	bl	800644c <vPortExitCritical>
}
 8006158:	bf00      	nop
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}
 800615e:	bf00      	nop
 8006160:	20000d28 	.word	0x20000d28
 8006164:	20000cf8 	.word	0x20000cf8
 8006168:	20000d0c 	.word	0x20000d0c
 800616c:	20000d20 	.word	0x20000d20
 8006170:	20000d24 	.word	0x20000d24
 8006174:	20000dd4 	.word	0x20000dd4
 8006178:	20000d34 	.word	0x20000d34
 800617c:	08006d88 	.word	0x08006d88

08006180 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006180:	b480      	push	{r7}
 8006182:	b085      	sub	sp, #20
 8006184:	af00      	add	r7, sp, #0
 8006186:	60f8      	str	r0, [r7, #12]
 8006188:	60b9      	str	r1, [r7, #8]
 800618a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	3b04      	subs	r3, #4
 8006190:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006198:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	3b04      	subs	r3, #4
 800619e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	f023 0201 	bic.w	r2, r3, #1
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	3b04      	subs	r3, #4
 80061ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80061b0:	4a0c      	ldr	r2, [pc, #48]	@ (80061e4 <pxPortInitialiseStack+0x64>)
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	3b14      	subs	r3, #20
 80061ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80061bc:	687a      	ldr	r2, [r7, #4]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	3b04      	subs	r3, #4
 80061c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f06f 0202 	mvn.w	r2, #2
 80061ce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	3b20      	subs	r3, #32
 80061d4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80061d6:	68fb      	ldr	r3, [r7, #12]
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3714      	adds	r7, #20
 80061dc:	46bd      	mov	sp, r7
 80061de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e2:	4770      	bx	lr
 80061e4:	080061e9 	.word	0x080061e9

080061e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80061e8:	b480      	push	{r7}
 80061ea:	b085      	sub	sp, #20
 80061ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80061ee:	2300      	movs	r3, #0
 80061f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80061f2:	4b13      	ldr	r3, [pc, #76]	@ (8006240 <prvTaskExitError+0x58>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061fa:	d00b      	beq.n	8006214 <prvTaskExitError+0x2c>
	__asm volatile
 80061fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006200:	f383 8811 	msr	BASEPRI, r3
 8006204:	f3bf 8f6f 	isb	sy
 8006208:	f3bf 8f4f 	dsb	sy
 800620c:	60fb      	str	r3, [r7, #12]
}
 800620e:	bf00      	nop
 8006210:	bf00      	nop
 8006212:	e7fd      	b.n	8006210 <prvTaskExitError+0x28>
	__asm volatile
 8006214:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006218:	f383 8811 	msr	BASEPRI, r3
 800621c:	f3bf 8f6f 	isb	sy
 8006220:	f3bf 8f4f 	dsb	sy
 8006224:	60bb      	str	r3, [r7, #8]
}
 8006226:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006228:	bf00      	nop
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d0fc      	beq.n	800622a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006230:	bf00      	nop
 8006232:	bf00      	nop
 8006234:	3714      	adds	r7, #20
 8006236:	46bd      	mov	sp, r7
 8006238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623c:	4770      	bx	lr
 800623e:	bf00      	nop
 8006240:	2000000c 	.word	0x2000000c
	...

08006250 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006250:	4b07      	ldr	r3, [pc, #28]	@ (8006270 <pxCurrentTCBConst2>)
 8006252:	6819      	ldr	r1, [r3, #0]
 8006254:	6808      	ldr	r0, [r1, #0]
 8006256:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800625a:	f380 8809 	msr	PSP, r0
 800625e:	f3bf 8f6f 	isb	sy
 8006262:	f04f 0000 	mov.w	r0, #0
 8006266:	f380 8811 	msr	BASEPRI, r0
 800626a:	4770      	bx	lr
 800626c:	f3af 8000 	nop.w

08006270 <pxCurrentTCBConst2>:
 8006270:	200007f8 	.word	0x200007f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006274:	bf00      	nop
 8006276:	bf00      	nop

08006278 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006278:	4808      	ldr	r0, [pc, #32]	@ (800629c <prvPortStartFirstTask+0x24>)
 800627a:	6800      	ldr	r0, [r0, #0]
 800627c:	6800      	ldr	r0, [r0, #0]
 800627e:	f380 8808 	msr	MSP, r0
 8006282:	f04f 0000 	mov.w	r0, #0
 8006286:	f380 8814 	msr	CONTROL, r0
 800628a:	b662      	cpsie	i
 800628c:	b661      	cpsie	f
 800628e:	f3bf 8f4f 	dsb	sy
 8006292:	f3bf 8f6f 	isb	sy
 8006296:	df00      	svc	0
 8006298:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800629a:	bf00      	nop
 800629c:	e000ed08 	.word	0xe000ed08

080062a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b086      	sub	sp, #24
 80062a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80062a6:	4b47      	ldr	r3, [pc, #284]	@ (80063c4 <xPortStartScheduler+0x124>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a47      	ldr	r2, [pc, #284]	@ (80063c8 <xPortStartScheduler+0x128>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d10b      	bne.n	80062c8 <xPortStartScheduler+0x28>
	__asm volatile
 80062b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062b4:	f383 8811 	msr	BASEPRI, r3
 80062b8:	f3bf 8f6f 	isb	sy
 80062bc:	f3bf 8f4f 	dsb	sy
 80062c0:	60fb      	str	r3, [r7, #12]
}
 80062c2:	bf00      	nop
 80062c4:	bf00      	nop
 80062c6:	e7fd      	b.n	80062c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80062c8:	4b3e      	ldr	r3, [pc, #248]	@ (80063c4 <xPortStartScheduler+0x124>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a3f      	ldr	r2, [pc, #252]	@ (80063cc <xPortStartScheduler+0x12c>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d10b      	bne.n	80062ea <xPortStartScheduler+0x4a>
	__asm volatile
 80062d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062d6:	f383 8811 	msr	BASEPRI, r3
 80062da:	f3bf 8f6f 	isb	sy
 80062de:	f3bf 8f4f 	dsb	sy
 80062e2:	613b      	str	r3, [r7, #16]
}
 80062e4:	bf00      	nop
 80062e6:	bf00      	nop
 80062e8:	e7fd      	b.n	80062e6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80062ea:	4b39      	ldr	r3, [pc, #228]	@ (80063d0 <xPortStartScheduler+0x130>)
 80062ec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	781b      	ldrb	r3, [r3, #0]
 80062f2:	b2db      	uxtb	r3, r3
 80062f4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	22ff      	movs	r2, #255	@ 0xff
 80062fa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	781b      	ldrb	r3, [r3, #0]
 8006300:	b2db      	uxtb	r3, r3
 8006302:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006304:	78fb      	ldrb	r3, [r7, #3]
 8006306:	b2db      	uxtb	r3, r3
 8006308:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800630c:	b2da      	uxtb	r2, r3
 800630e:	4b31      	ldr	r3, [pc, #196]	@ (80063d4 <xPortStartScheduler+0x134>)
 8006310:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006312:	4b31      	ldr	r3, [pc, #196]	@ (80063d8 <xPortStartScheduler+0x138>)
 8006314:	2207      	movs	r2, #7
 8006316:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006318:	e009      	b.n	800632e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800631a:	4b2f      	ldr	r3, [pc, #188]	@ (80063d8 <xPortStartScheduler+0x138>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	3b01      	subs	r3, #1
 8006320:	4a2d      	ldr	r2, [pc, #180]	@ (80063d8 <xPortStartScheduler+0x138>)
 8006322:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006324:	78fb      	ldrb	r3, [r7, #3]
 8006326:	b2db      	uxtb	r3, r3
 8006328:	005b      	lsls	r3, r3, #1
 800632a:	b2db      	uxtb	r3, r3
 800632c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800632e:	78fb      	ldrb	r3, [r7, #3]
 8006330:	b2db      	uxtb	r3, r3
 8006332:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006336:	2b80      	cmp	r3, #128	@ 0x80
 8006338:	d0ef      	beq.n	800631a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800633a:	4b27      	ldr	r3, [pc, #156]	@ (80063d8 <xPortStartScheduler+0x138>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f1c3 0307 	rsb	r3, r3, #7
 8006342:	2b04      	cmp	r3, #4
 8006344:	d00b      	beq.n	800635e <xPortStartScheduler+0xbe>
	__asm volatile
 8006346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800634a:	f383 8811 	msr	BASEPRI, r3
 800634e:	f3bf 8f6f 	isb	sy
 8006352:	f3bf 8f4f 	dsb	sy
 8006356:	60bb      	str	r3, [r7, #8]
}
 8006358:	bf00      	nop
 800635a:	bf00      	nop
 800635c:	e7fd      	b.n	800635a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800635e:	4b1e      	ldr	r3, [pc, #120]	@ (80063d8 <xPortStartScheduler+0x138>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	021b      	lsls	r3, r3, #8
 8006364:	4a1c      	ldr	r2, [pc, #112]	@ (80063d8 <xPortStartScheduler+0x138>)
 8006366:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006368:	4b1b      	ldr	r3, [pc, #108]	@ (80063d8 <xPortStartScheduler+0x138>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006370:	4a19      	ldr	r2, [pc, #100]	@ (80063d8 <xPortStartScheduler+0x138>)
 8006372:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	b2da      	uxtb	r2, r3
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800637c:	4b17      	ldr	r3, [pc, #92]	@ (80063dc <xPortStartScheduler+0x13c>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a16      	ldr	r2, [pc, #88]	@ (80063dc <xPortStartScheduler+0x13c>)
 8006382:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006386:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006388:	4b14      	ldr	r3, [pc, #80]	@ (80063dc <xPortStartScheduler+0x13c>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a13      	ldr	r2, [pc, #76]	@ (80063dc <xPortStartScheduler+0x13c>)
 800638e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006392:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006394:	f000 f8da 	bl	800654c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006398:	4b11      	ldr	r3, [pc, #68]	@ (80063e0 <xPortStartScheduler+0x140>)
 800639a:	2200      	movs	r2, #0
 800639c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800639e:	f000 f8f9 	bl	8006594 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80063a2:	4b10      	ldr	r3, [pc, #64]	@ (80063e4 <xPortStartScheduler+0x144>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a0f      	ldr	r2, [pc, #60]	@ (80063e4 <xPortStartScheduler+0x144>)
 80063a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80063ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80063ae:	f7ff ff63 	bl	8006278 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80063b2:	f7fe ff29 	bl	8005208 <vTaskSwitchContext>
	prvTaskExitError();
 80063b6:	f7ff ff17 	bl	80061e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80063ba:	2300      	movs	r3, #0
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3718      	adds	r7, #24
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}
 80063c4:	e000ed00 	.word	0xe000ed00
 80063c8:	410fc271 	.word	0x410fc271
 80063cc:	410fc270 	.word	0x410fc270
 80063d0:	e000e400 	.word	0xe000e400
 80063d4:	20000e24 	.word	0x20000e24
 80063d8:	20000e28 	.word	0x20000e28
 80063dc:	e000ed20 	.word	0xe000ed20
 80063e0:	2000000c 	.word	0x2000000c
 80063e4:	e000ef34 	.word	0xe000ef34

080063e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80063e8:	b480      	push	{r7}
 80063ea:	b083      	sub	sp, #12
 80063ec:	af00      	add	r7, sp, #0
	__asm volatile
 80063ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063f2:	f383 8811 	msr	BASEPRI, r3
 80063f6:	f3bf 8f6f 	isb	sy
 80063fa:	f3bf 8f4f 	dsb	sy
 80063fe:	607b      	str	r3, [r7, #4]
}
 8006400:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006402:	4b10      	ldr	r3, [pc, #64]	@ (8006444 <vPortEnterCritical+0x5c>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	3301      	adds	r3, #1
 8006408:	4a0e      	ldr	r2, [pc, #56]	@ (8006444 <vPortEnterCritical+0x5c>)
 800640a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800640c:	4b0d      	ldr	r3, [pc, #52]	@ (8006444 <vPortEnterCritical+0x5c>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	2b01      	cmp	r3, #1
 8006412:	d110      	bne.n	8006436 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006414:	4b0c      	ldr	r3, [pc, #48]	@ (8006448 <vPortEnterCritical+0x60>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	b2db      	uxtb	r3, r3
 800641a:	2b00      	cmp	r3, #0
 800641c:	d00b      	beq.n	8006436 <vPortEnterCritical+0x4e>
	__asm volatile
 800641e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006422:	f383 8811 	msr	BASEPRI, r3
 8006426:	f3bf 8f6f 	isb	sy
 800642a:	f3bf 8f4f 	dsb	sy
 800642e:	603b      	str	r3, [r7, #0]
}
 8006430:	bf00      	nop
 8006432:	bf00      	nop
 8006434:	e7fd      	b.n	8006432 <vPortEnterCritical+0x4a>
	}
}
 8006436:	bf00      	nop
 8006438:	370c      	adds	r7, #12
 800643a:	46bd      	mov	sp, r7
 800643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006440:	4770      	bx	lr
 8006442:	bf00      	nop
 8006444:	2000000c 	.word	0x2000000c
 8006448:	e000ed04 	.word	0xe000ed04

0800644c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800644c:	b480      	push	{r7}
 800644e:	b083      	sub	sp, #12
 8006450:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006452:	4b12      	ldr	r3, [pc, #72]	@ (800649c <vPortExitCritical+0x50>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d10b      	bne.n	8006472 <vPortExitCritical+0x26>
	__asm volatile
 800645a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800645e:	f383 8811 	msr	BASEPRI, r3
 8006462:	f3bf 8f6f 	isb	sy
 8006466:	f3bf 8f4f 	dsb	sy
 800646a:	607b      	str	r3, [r7, #4]
}
 800646c:	bf00      	nop
 800646e:	bf00      	nop
 8006470:	e7fd      	b.n	800646e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006472:	4b0a      	ldr	r3, [pc, #40]	@ (800649c <vPortExitCritical+0x50>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	3b01      	subs	r3, #1
 8006478:	4a08      	ldr	r2, [pc, #32]	@ (800649c <vPortExitCritical+0x50>)
 800647a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800647c:	4b07      	ldr	r3, [pc, #28]	@ (800649c <vPortExitCritical+0x50>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d105      	bne.n	8006490 <vPortExitCritical+0x44>
 8006484:	2300      	movs	r3, #0
 8006486:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	f383 8811 	msr	BASEPRI, r3
}
 800648e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006490:	bf00      	nop
 8006492:	370c      	adds	r7, #12
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr
 800649c:	2000000c 	.word	0x2000000c

080064a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80064a0:	f3ef 8009 	mrs	r0, PSP
 80064a4:	f3bf 8f6f 	isb	sy
 80064a8:	4b15      	ldr	r3, [pc, #84]	@ (8006500 <pxCurrentTCBConst>)
 80064aa:	681a      	ldr	r2, [r3, #0]
 80064ac:	f01e 0f10 	tst.w	lr, #16
 80064b0:	bf08      	it	eq
 80064b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80064b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064ba:	6010      	str	r0, [r2, #0]
 80064bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80064c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80064c4:	f380 8811 	msr	BASEPRI, r0
 80064c8:	f3bf 8f4f 	dsb	sy
 80064cc:	f3bf 8f6f 	isb	sy
 80064d0:	f7fe fe9a 	bl	8005208 <vTaskSwitchContext>
 80064d4:	f04f 0000 	mov.w	r0, #0
 80064d8:	f380 8811 	msr	BASEPRI, r0
 80064dc:	bc09      	pop	{r0, r3}
 80064de:	6819      	ldr	r1, [r3, #0]
 80064e0:	6808      	ldr	r0, [r1, #0]
 80064e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064e6:	f01e 0f10 	tst.w	lr, #16
 80064ea:	bf08      	it	eq
 80064ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80064f0:	f380 8809 	msr	PSP, r0
 80064f4:	f3bf 8f6f 	isb	sy
 80064f8:	4770      	bx	lr
 80064fa:	bf00      	nop
 80064fc:	f3af 8000 	nop.w

08006500 <pxCurrentTCBConst>:
 8006500:	200007f8 	.word	0x200007f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006504:	bf00      	nop
 8006506:	bf00      	nop

08006508 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b082      	sub	sp, #8
 800650c:	af00      	add	r7, sp, #0
	__asm volatile
 800650e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006512:	f383 8811 	msr	BASEPRI, r3
 8006516:	f3bf 8f6f 	isb	sy
 800651a:	f3bf 8f4f 	dsb	sy
 800651e:	607b      	str	r3, [r7, #4]
}
 8006520:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006522:	f7fe fdb7 	bl	8005094 <xTaskIncrementTick>
 8006526:	4603      	mov	r3, r0
 8006528:	2b00      	cmp	r3, #0
 800652a:	d003      	beq.n	8006534 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800652c:	4b06      	ldr	r3, [pc, #24]	@ (8006548 <xPortSysTickHandler+0x40>)
 800652e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006532:	601a      	str	r2, [r3, #0]
 8006534:	2300      	movs	r3, #0
 8006536:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	f383 8811 	msr	BASEPRI, r3
}
 800653e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006540:	bf00      	nop
 8006542:	3708      	adds	r7, #8
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}
 8006548:	e000ed04 	.word	0xe000ed04

0800654c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800654c:	b480      	push	{r7}
 800654e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006550:	4b0b      	ldr	r3, [pc, #44]	@ (8006580 <vPortSetupTimerInterrupt+0x34>)
 8006552:	2200      	movs	r2, #0
 8006554:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006556:	4b0b      	ldr	r3, [pc, #44]	@ (8006584 <vPortSetupTimerInterrupt+0x38>)
 8006558:	2200      	movs	r2, #0
 800655a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800655c:	4b0a      	ldr	r3, [pc, #40]	@ (8006588 <vPortSetupTimerInterrupt+0x3c>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a0a      	ldr	r2, [pc, #40]	@ (800658c <vPortSetupTimerInterrupt+0x40>)
 8006562:	fba2 2303 	umull	r2, r3, r2, r3
 8006566:	099b      	lsrs	r3, r3, #6
 8006568:	4a09      	ldr	r2, [pc, #36]	@ (8006590 <vPortSetupTimerInterrupt+0x44>)
 800656a:	3b01      	subs	r3, #1
 800656c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800656e:	4b04      	ldr	r3, [pc, #16]	@ (8006580 <vPortSetupTimerInterrupt+0x34>)
 8006570:	2207      	movs	r2, #7
 8006572:	601a      	str	r2, [r3, #0]
}
 8006574:	bf00      	nop
 8006576:	46bd      	mov	sp, r7
 8006578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657c:	4770      	bx	lr
 800657e:	bf00      	nop
 8006580:	e000e010 	.word	0xe000e010
 8006584:	e000e018 	.word	0xe000e018
 8006588:	20000000 	.word	0x20000000
 800658c:	10624dd3 	.word	0x10624dd3
 8006590:	e000e014 	.word	0xe000e014

08006594 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006594:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80065a4 <vPortEnableVFP+0x10>
 8006598:	6801      	ldr	r1, [r0, #0]
 800659a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800659e:	6001      	str	r1, [r0, #0]
 80065a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80065a2:	bf00      	nop
 80065a4:	e000ed88 	.word	0xe000ed88

080065a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80065a8:	b480      	push	{r7}
 80065aa:	b085      	sub	sp, #20
 80065ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80065ae:	f3ef 8305 	mrs	r3, IPSR
 80065b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2b0f      	cmp	r3, #15
 80065b8:	d915      	bls.n	80065e6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80065ba:	4a18      	ldr	r2, [pc, #96]	@ (800661c <vPortValidateInterruptPriority+0x74>)
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	4413      	add	r3, r2
 80065c0:	781b      	ldrb	r3, [r3, #0]
 80065c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80065c4:	4b16      	ldr	r3, [pc, #88]	@ (8006620 <vPortValidateInterruptPriority+0x78>)
 80065c6:	781b      	ldrb	r3, [r3, #0]
 80065c8:	7afa      	ldrb	r2, [r7, #11]
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d20b      	bcs.n	80065e6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80065ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065d2:	f383 8811 	msr	BASEPRI, r3
 80065d6:	f3bf 8f6f 	isb	sy
 80065da:	f3bf 8f4f 	dsb	sy
 80065de:	607b      	str	r3, [r7, #4]
}
 80065e0:	bf00      	nop
 80065e2:	bf00      	nop
 80065e4:	e7fd      	b.n	80065e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80065e6:	4b0f      	ldr	r3, [pc, #60]	@ (8006624 <vPortValidateInterruptPriority+0x7c>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80065ee:	4b0e      	ldr	r3, [pc, #56]	@ (8006628 <vPortValidateInterruptPriority+0x80>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d90b      	bls.n	800660e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80065f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065fa:	f383 8811 	msr	BASEPRI, r3
 80065fe:	f3bf 8f6f 	isb	sy
 8006602:	f3bf 8f4f 	dsb	sy
 8006606:	603b      	str	r3, [r7, #0]
}
 8006608:	bf00      	nop
 800660a:	bf00      	nop
 800660c:	e7fd      	b.n	800660a <vPortValidateInterruptPriority+0x62>
	}
 800660e:	bf00      	nop
 8006610:	3714      	adds	r7, #20
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr
 800661a:	bf00      	nop
 800661c:	e000e3f0 	.word	0xe000e3f0
 8006620:	20000e24 	.word	0x20000e24
 8006624:	e000ed0c 	.word	0xe000ed0c
 8006628:	20000e28 	.word	0x20000e28

0800662c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b08a      	sub	sp, #40	@ 0x28
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006634:	2300      	movs	r3, #0
 8006636:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006638:	f7fe fc70 	bl	8004f1c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800663c:	4b5c      	ldr	r3, [pc, #368]	@ (80067b0 <pvPortMalloc+0x184>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d101      	bne.n	8006648 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006644:	f000 f924 	bl	8006890 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006648:	4b5a      	ldr	r3, [pc, #360]	@ (80067b4 <pvPortMalloc+0x188>)
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	4013      	ands	r3, r2
 8006650:	2b00      	cmp	r3, #0
 8006652:	f040 8095 	bne.w	8006780 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d01e      	beq.n	800669a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800665c:	2208      	movs	r2, #8
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	4413      	add	r3, r2
 8006662:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f003 0307 	and.w	r3, r3, #7
 800666a:	2b00      	cmp	r3, #0
 800666c:	d015      	beq.n	800669a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f023 0307 	bic.w	r3, r3, #7
 8006674:	3308      	adds	r3, #8
 8006676:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f003 0307 	and.w	r3, r3, #7
 800667e:	2b00      	cmp	r3, #0
 8006680:	d00b      	beq.n	800669a <pvPortMalloc+0x6e>
	__asm volatile
 8006682:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006686:	f383 8811 	msr	BASEPRI, r3
 800668a:	f3bf 8f6f 	isb	sy
 800668e:	f3bf 8f4f 	dsb	sy
 8006692:	617b      	str	r3, [r7, #20]
}
 8006694:	bf00      	nop
 8006696:	bf00      	nop
 8006698:	e7fd      	b.n	8006696 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d06f      	beq.n	8006780 <pvPortMalloc+0x154>
 80066a0:	4b45      	ldr	r3, [pc, #276]	@ (80067b8 <pvPortMalloc+0x18c>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d86a      	bhi.n	8006780 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80066aa:	4b44      	ldr	r3, [pc, #272]	@ (80067bc <pvPortMalloc+0x190>)
 80066ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80066ae:	4b43      	ldr	r3, [pc, #268]	@ (80067bc <pvPortMalloc+0x190>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80066b4:	e004      	b.n	80066c0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80066b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80066ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80066c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	687a      	ldr	r2, [r7, #4]
 80066c6:	429a      	cmp	r2, r3
 80066c8:	d903      	bls.n	80066d2 <pvPortMalloc+0xa6>
 80066ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d1f1      	bne.n	80066b6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80066d2:	4b37      	ldr	r3, [pc, #220]	@ (80067b0 <pvPortMalloc+0x184>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066d8:	429a      	cmp	r2, r3
 80066da:	d051      	beq.n	8006780 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80066dc:	6a3b      	ldr	r3, [r7, #32]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	2208      	movs	r2, #8
 80066e2:	4413      	add	r3, r2
 80066e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80066e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066e8:	681a      	ldr	r2, [r3, #0]
 80066ea:	6a3b      	ldr	r3, [r7, #32]
 80066ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80066ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066f0:	685a      	ldr	r2, [r3, #4]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	1ad2      	subs	r2, r2, r3
 80066f6:	2308      	movs	r3, #8
 80066f8:	005b      	lsls	r3, r3, #1
 80066fa:	429a      	cmp	r2, r3
 80066fc:	d920      	bls.n	8006740 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80066fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	4413      	add	r3, r2
 8006704:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006706:	69bb      	ldr	r3, [r7, #24]
 8006708:	f003 0307 	and.w	r3, r3, #7
 800670c:	2b00      	cmp	r3, #0
 800670e:	d00b      	beq.n	8006728 <pvPortMalloc+0xfc>
	__asm volatile
 8006710:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006714:	f383 8811 	msr	BASEPRI, r3
 8006718:	f3bf 8f6f 	isb	sy
 800671c:	f3bf 8f4f 	dsb	sy
 8006720:	613b      	str	r3, [r7, #16]
}
 8006722:	bf00      	nop
 8006724:	bf00      	nop
 8006726:	e7fd      	b.n	8006724 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800672a:	685a      	ldr	r2, [r3, #4]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	1ad2      	subs	r2, r2, r3
 8006730:	69bb      	ldr	r3, [r7, #24]
 8006732:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006736:	687a      	ldr	r2, [r7, #4]
 8006738:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800673a:	69b8      	ldr	r0, [r7, #24]
 800673c:	f000 f90a 	bl	8006954 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006740:	4b1d      	ldr	r3, [pc, #116]	@ (80067b8 <pvPortMalloc+0x18c>)
 8006742:	681a      	ldr	r2, [r3, #0]
 8006744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	1ad3      	subs	r3, r2, r3
 800674a:	4a1b      	ldr	r2, [pc, #108]	@ (80067b8 <pvPortMalloc+0x18c>)
 800674c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800674e:	4b1a      	ldr	r3, [pc, #104]	@ (80067b8 <pvPortMalloc+0x18c>)
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	4b1b      	ldr	r3, [pc, #108]	@ (80067c0 <pvPortMalloc+0x194>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	429a      	cmp	r2, r3
 8006758:	d203      	bcs.n	8006762 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800675a:	4b17      	ldr	r3, [pc, #92]	@ (80067b8 <pvPortMalloc+0x18c>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a18      	ldr	r2, [pc, #96]	@ (80067c0 <pvPortMalloc+0x194>)
 8006760:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006764:	685a      	ldr	r2, [r3, #4]
 8006766:	4b13      	ldr	r3, [pc, #76]	@ (80067b4 <pvPortMalloc+0x188>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	431a      	orrs	r2, r3
 800676c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800676e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006772:	2200      	movs	r2, #0
 8006774:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006776:	4b13      	ldr	r3, [pc, #76]	@ (80067c4 <pvPortMalloc+0x198>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	3301      	adds	r3, #1
 800677c:	4a11      	ldr	r2, [pc, #68]	@ (80067c4 <pvPortMalloc+0x198>)
 800677e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006780:	f7fe fbda 	bl	8004f38 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006784:	69fb      	ldr	r3, [r7, #28]
 8006786:	f003 0307 	and.w	r3, r3, #7
 800678a:	2b00      	cmp	r3, #0
 800678c:	d00b      	beq.n	80067a6 <pvPortMalloc+0x17a>
	__asm volatile
 800678e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006792:	f383 8811 	msr	BASEPRI, r3
 8006796:	f3bf 8f6f 	isb	sy
 800679a:	f3bf 8f4f 	dsb	sy
 800679e:	60fb      	str	r3, [r7, #12]
}
 80067a0:	bf00      	nop
 80067a2:	bf00      	nop
 80067a4:	e7fd      	b.n	80067a2 <pvPortMalloc+0x176>
	return pvReturn;
 80067a6:	69fb      	ldr	r3, [r7, #28]
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3728      	adds	r7, #40	@ 0x28
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}
 80067b0:	20004a34 	.word	0x20004a34
 80067b4:	20004a48 	.word	0x20004a48
 80067b8:	20004a38 	.word	0x20004a38
 80067bc:	20004a2c 	.word	0x20004a2c
 80067c0:	20004a3c 	.word	0x20004a3c
 80067c4:	20004a40 	.word	0x20004a40

080067c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b086      	sub	sp, #24
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d04f      	beq.n	800687a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80067da:	2308      	movs	r3, #8
 80067dc:	425b      	negs	r3, r3
 80067de:	697a      	ldr	r2, [r7, #20]
 80067e0:	4413      	add	r3, r2
 80067e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	685a      	ldr	r2, [r3, #4]
 80067ec:	4b25      	ldr	r3, [pc, #148]	@ (8006884 <vPortFree+0xbc>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4013      	ands	r3, r2
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d10b      	bne.n	800680e <vPortFree+0x46>
	__asm volatile
 80067f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067fa:	f383 8811 	msr	BASEPRI, r3
 80067fe:	f3bf 8f6f 	isb	sy
 8006802:	f3bf 8f4f 	dsb	sy
 8006806:	60fb      	str	r3, [r7, #12]
}
 8006808:	bf00      	nop
 800680a:	bf00      	nop
 800680c:	e7fd      	b.n	800680a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d00b      	beq.n	800682e <vPortFree+0x66>
	__asm volatile
 8006816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800681a:	f383 8811 	msr	BASEPRI, r3
 800681e:	f3bf 8f6f 	isb	sy
 8006822:	f3bf 8f4f 	dsb	sy
 8006826:	60bb      	str	r3, [r7, #8]
}
 8006828:	bf00      	nop
 800682a:	bf00      	nop
 800682c:	e7fd      	b.n	800682a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	685a      	ldr	r2, [r3, #4]
 8006832:	4b14      	ldr	r3, [pc, #80]	@ (8006884 <vPortFree+0xbc>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4013      	ands	r3, r2
 8006838:	2b00      	cmp	r3, #0
 800683a:	d01e      	beq.n	800687a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d11a      	bne.n	800687a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	685a      	ldr	r2, [r3, #4]
 8006848:	4b0e      	ldr	r3, [pc, #56]	@ (8006884 <vPortFree+0xbc>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	43db      	mvns	r3, r3
 800684e:	401a      	ands	r2, r3
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006854:	f7fe fb62 	bl	8004f1c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	685a      	ldr	r2, [r3, #4]
 800685c:	4b0a      	ldr	r3, [pc, #40]	@ (8006888 <vPortFree+0xc0>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4413      	add	r3, r2
 8006862:	4a09      	ldr	r2, [pc, #36]	@ (8006888 <vPortFree+0xc0>)
 8006864:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006866:	6938      	ldr	r0, [r7, #16]
 8006868:	f000 f874 	bl	8006954 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800686c:	4b07      	ldr	r3, [pc, #28]	@ (800688c <vPortFree+0xc4>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	3301      	adds	r3, #1
 8006872:	4a06      	ldr	r2, [pc, #24]	@ (800688c <vPortFree+0xc4>)
 8006874:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006876:	f7fe fb5f 	bl	8004f38 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800687a:	bf00      	nop
 800687c:	3718      	adds	r7, #24
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}
 8006882:	bf00      	nop
 8006884:	20004a48 	.word	0x20004a48
 8006888:	20004a38 	.word	0x20004a38
 800688c:	20004a44 	.word	0x20004a44

08006890 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006890:	b480      	push	{r7}
 8006892:	b085      	sub	sp, #20
 8006894:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006896:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800689a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800689c:	4b27      	ldr	r3, [pc, #156]	@ (800693c <prvHeapInit+0xac>)
 800689e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f003 0307 	and.w	r3, r3, #7
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d00c      	beq.n	80068c4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	3307      	adds	r3, #7
 80068ae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	f023 0307 	bic.w	r3, r3, #7
 80068b6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80068b8:	68ba      	ldr	r2, [r7, #8]
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	1ad3      	subs	r3, r2, r3
 80068be:	4a1f      	ldr	r2, [pc, #124]	@ (800693c <prvHeapInit+0xac>)
 80068c0:	4413      	add	r3, r2
 80068c2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80068c8:	4a1d      	ldr	r2, [pc, #116]	@ (8006940 <prvHeapInit+0xb0>)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80068ce:	4b1c      	ldr	r3, [pc, #112]	@ (8006940 <prvHeapInit+0xb0>)
 80068d0:	2200      	movs	r2, #0
 80068d2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	68ba      	ldr	r2, [r7, #8]
 80068d8:	4413      	add	r3, r2
 80068da:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80068dc:	2208      	movs	r2, #8
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	1a9b      	subs	r3, r3, r2
 80068e2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f023 0307 	bic.w	r3, r3, #7
 80068ea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	4a15      	ldr	r2, [pc, #84]	@ (8006944 <prvHeapInit+0xb4>)
 80068f0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80068f2:	4b14      	ldr	r3, [pc, #80]	@ (8006944 <prvHeapInit+0xb4>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	2200      	movs	r2, #0
 80068f8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80068fa:	4b12      	ldr	r3, [pc, #72]	@ (8006944 <prvHeapInit+0xb4>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	2200      	movs	r2, #0
 8006900:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	68fa      	ldr	r2, [r7, #12]
 800690a:	1ad2      	subs	r2, r2, r3
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006910:	4b0c      	ldr	r3, [pc, #48]	@ (8006944 <prvHeapInit+0xb4>)
 8006912:	681a      	ldr	r2, [r3, #0]
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	4a0a      	ldr	r2, [pc, #40]	@ (8006948 <prvHeapInit+0xb8>)
 800691e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	4a09      	ldr	r2, [pc, #36]	@ (800694c <prvHeapInit+0xbc>)
 8006926:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006928:	4b09      	ldr	r3, [pc, #36]	@ (8006950 <prvHeapInit+0xc0>)
 800692a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800692e:	601a      	str	r2, [r3, #0]
}
 8006930:	bf00      	nop
 8006932:	3714      	adds	r7, #20
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr
 800693c:	20000e2c 	.word	0x20000e2c
 8006940:	20004a2c 	.word	0x20004a2c
 8006944:	20004a34 	.word	0x20004a34
 8006948:	20004a3c 	.word	0x20004a3c
 800694c:	20004a38 	.word	0x20004a38
 8006950:	20004a48 	.word	0x20004a48

08006954 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006954:	b480      	push	{r7}
 8006956:	b085      	sub	sp, #20
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800695c:	4b28      	ldr	r3, [pc, #160]	@ (8006a00 <prvInsertBlockIntoFreeList+0xac>)
 800695e:	60fb      	str	r3, [r7, #12]
 8006960:	e002      	b.n	8006968 <prvInsertBlockIntoFreeList+0x14>
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	60fb      	str	r3, [r7, #12]
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	429a      	cmp	r2, r3
 8006970:	d8f7      	bhi.n	8006962 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	68ba      	ldr	r2, [r7, #8]
 800697c:	4413      	add	r3, r2
 800697e:	687a      	ldr	r2, [r7, #4]
 8006980:	429a      	cmp	r2, r3
 8006982:	d108      	bne.n	8006996 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	685a      	ldr	r2, [r3, #4]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	441a      	add	r2, r3
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	68ba      	ldr	r2, [r7, #8]
 80069a0:	441a      	add	r2, r3
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	429a      	cmp	r2, r3
 80069a8:	d118      	bne.n	80069dc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681a      	ldr	r2, [r3, #0]
 80069ae:	4b15      	ldr	r3, [pc, #84]	@ (8006a04 <prvInsertBlockIntoFreeList+0xb0>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	429a      	cmp	r2, r3
 80069b4:	d00d      	beq.n	80069d2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	685a      	ldr	r2, [r3, #4]
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	441a      	add	r2, r3
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	681a      	ldr	r2, [r3, #0]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	601a      	str	r2, [r3, #0]
 80069d0:	e008      	b.n	80069e4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80069d2:	4b0c      	ldr	r3, [pc, #48]	@ (8006a04 <prvInsertBlockIntoFreeList+0xb0>)
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	601a      	str	r2, [r3, #0]
 80069da:	e003      	b.n	80069e4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681a      	ldr	r2, [r3, #0]
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80069e4:	68fa      	ldr	r2, [r7, #12]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d002      	beq.n	80069f2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	687a      	ldr	r2, [r7, #4]
 80069f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80069f2:	bf00      	nop
 80069f4:	3714      	adds	r7, #20
 80069f6:	46bd      	mov	sp, r7
 80069f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fc:	4770      	bx	lr
 80069fe:	bf00      	nop
 8006a00:	20004a2c 	.word	0x20004a2c
 8006a04:	20004a34 	.word	0x20004a34

08006a08 <calloc>:
 8006a08:	4b02      	ldr	r3, [pc, #8]	@ (8006a14 <calloc+0xc>)
 8006a0a:	460a      	mov	r2, r1
 8006a0c:	4601      	mov	r1, r0
 8006a0e:	6818      	ldr	r0, [r3, #0]
 8006a10:	f000 b802 	b.w	8006a18 <_calloc_r>
 8006a14:	20000010 	.word	0x20000010

08006a18 <_calloc_r>:
 8006a18:	b570      	push	{r4, r5, r6, lr}
 8006a1a:	fba1 5402 	umull	r5, r4, r1, r2
 8006a1e:	b934      	cbnz	r4, 8006a2e <_calloc_r+0x16>
 8006a20:	4629      	mov	r1, r5
 8006a22:	f000 f83f 	bl	8006aa4 <_malloc_r>
 8006a26:	4606      	mov	r6, r0
 8006a28:	b928      	cbnz	r0, 8006a36 <_calloc_r+0x1e>
 8006a2a:	4630      	mov	r0, r6
 8006a2c:	bd70      	pop	{r4, r5, r6, pc}
 8006a2e:	220c      	movs	r2, #12
 8006a30:	6002      	str	r2, [r0, #0]
 8006a32:	2600      	movs	r6, #0
 8006a34:	e7f9      	b.n	8006a2a <_calloc_r+0x12>
 8006a36:	462a      	mov	r2, r5
 8006a38:	4621      	mov	r1, r4
 8006a3a:	f000 f8cf 	bl	8006bdc <memset>
 8006a3e:	e7f4      	b.n	8006a2a <_calloc_r+0x12>

08006a40 <malloc>:
 8006a40:	4b02      	ldr	r3, [pc, #8]	@ (8006a4c <malloc+0xc>)
 8006a42:	4601      	mov	r1, r0
 8006a44:	6818      	ldr	r0, [r3, #0]
 8006a46:	f000 b82d 	b.w	8006aa4 <_malloc_r>
 8006a4a:	bf00      	nop
 8006a4c:	20000010 	.word	0x20000010

08006a50 <free>:
 8006a50:	4b02      	ldr	r3, [pc, #8]	@ (8006a5c <free+0xc>)
 8006a52:	4601      	mov	r1, r0
 8006a54:	6818      	ldr	r0, [r3, #0]
 8006a56:	f000 b913 	b.w	8006c80 <_free_r>
 8006a5a:	bf00      	nop
 8006a5c:	20000010 	.word	0x20000010

08006a60 <sbrk_aligned>:
 8006a60:	b570      	push	{r4, r5, r6, lr}
 8006a62:	4e0f      	ldr	r6, [pc, #60]	@ (8006aa0 <sbrk_aligned+0x40>)
 8006a64:	460c      	mov	r4, r1
 8006a66:	6831      	ldr	r1, [r6, #0]
 8006a68:	4605      	mov	r5, r0
 8006a6a:	b911      	cbnz	r1, 8006a72 <sbrk_aligned+0x12>
 8006a6c:	f000 f8be 	bl	8006bec <_sbrk_r>
 8006a70:	6030      	str	r0, [r6, #0]
 8006a72:	4621      	mov	r1, r4
 8006a74:	4628      	mov	r0, r5
 8006a76:	f000 f8b9 	bl	8006bec <_sbrk_r>
 8006a7a:	1c43      	adds	r3, r0, #1
 8006a7c:	d103      	bne.n	8006a86 <sbrk_aligned+0x26>
 8006a7e:	f04f 34ff 	mov.w	r4, #4294967295
 8006a82:	4620      	mov	r0, r4
 8006a84:	bd70      	pop	{r4, r5, r6, pc}
 8006a86:	1cc4      	adds	r4, r0, #3
 8006a88:	f024 0403 	bic.w	r4, r4, #3
 8006a8c:	42a0      	cmp	r0, r4
 8006a8e:	d0f8      	beq.n	8006a82 <sbrk_aligned+0x22>
 8006a90:	1a21      	subs	r1, r4, r0
 8006a92:	4628      	mov	r0, r5
 8006a94:	f000 f8aa 	bl	8006bec <_sbrk_r>
 8006a98:	3001      	adds	r0, #1
 8006a9a:	d1f2      	bne.n	8006a82 <sbrk_aligned+0x22>
 8006a9c:	e7ef      	b.n	8006a7e <sbrk_aligned+0x1e>
 8006a9e:	bf00      	nop
 8006aa0:	20004a4c 	.word	0x20004a4c

08006aa4 <_malloc_r>:
 8006aa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006aa8:	1ccd      	adds	r5, r1, #3
 8006aaa:	f025 0503 	bic.w	r5, r5, #3
 8006aae:	3508      	adds	r5, #8
 8006ab0:	2d0c      	cmp	r5, #12
 8006ab2:	bf38      	it	cc
 8006ab4:	250c      	movcc	r5, #12
 8006ab6:	2d00      	cmp	r5, #0
 8006ab8:	4606      	mov	r6, r0
 8006aba:	db01      	blt.n	8006ac0 <_malloc_r+0x1c>
 8006abc:	42a9      	cmp	r1, r5
 8006abe:	d904      	bls.n	8006aca <_malloc_r+0x26>
 8006ac0:	230c      	movs	r3, #12
 8006ac2:	6033      	str	r3, [r6, #0]
 8006ac4:	2000      	movs	r0, #0
 8006ac6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006aca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006ba0 <_malloc_r+0xfc>
 8006ace:	f000 f869 	bl	8006ba4 <__malloc_lock>
 8006ad2:	f8d8 3000 	ldr.w	r3, [r8]
 8006ad6:	461c      	mov	r4, r3
 8006ad8:	bb44      	cbnz	r4, 8006b2c <_malloc_r+0x88>
 8006ada:	4629      	mov	r1, r5
 8006adc:	4630      	mov	r0, r6
 8006ade:	f7ff ffbf 	bl	8006a60 <sbrk_aligned>
 8006ae2:	1c43      	adds	r3, r0, #1
 8006ae4:	4604      	mov	r4, r0
 8006ae6:	d158      	bne.n	8006b9a <_malloc_r+0xf6>
 8006ae8:	f8d8 4000 	ldr.w	r4, [r8]
 8006aec:	4627      	mov	r7, r4
 8006aee:	2f00      	cmp	r7, #0
 8006af0:	d143      	bne.n	8006b7a <_malloc_r+0xd6>
 8006af2:	2c00      	cmp	r4, #0
 8006af4:	d04b      	beq.n	8006b8e <_malloc_r+0xea>
 8006af6:	6823      	ldr	r3, [r4, #0]
 8006af8:	4639      	mov	r1, r7
 8006afa:	4630      	mov	r0, r6
 8006afc:	eb04 0903 	add.w	r9, r4, r3
 8006b00:	f000 f874 	bl	8006bec <_sbrk_r>
 8006b04:	4581      	cmp	r9, r0
 8006b06:	d142      	bne.n	8006b8e <_malloc_r+0xea>
 8006b08:	6821      	ldr	r1, [r4, #0]
 8006b0a:	1a6d      	subs	r5, r5, r1
 8006b0c:	4629      	mov	r1, r5
 8006b0e:	4630      	mov	r0, r6
 8006b10:	f7ff ffa6 	bl	8006a60 <sbrk_aligned>
 8006b14:	3001      	adds	r0, #1
 8006b16:	d03a      	beq.n	8006b8e <_malloc_r+0xea>
 8006b18:	6823      	ldr	r3, [r4, #0]
 8006b1a:	442b      	add	r3, r5
 8006b1c:	6023      	str	r3, [r4, #0]
 8006b1e:	f8d8 3000 	ldr.w	r3, [r8]
 8006b22:	685a      	ldr	r2, [r3, #4]
 8006b24:	bb62      	cbnz	r2, 8006b80 <_malloc_r+0xdc>
 8006b26:	f8c8 7000 	str.w	r7, [r8]
 8006b2a:	e00f      	b.n	8006b4c <_malloc_r+0xa8>
 8006b2c:	6822      	ldr	r2, [r4, #0]
 8006b2e:	1b52      	subs	r2, r2, r5
 8006b30:	d420      	bmi.n	8006b74 <_malloc_r+0xd0>
 8006b32:	2a0b      	cmp	r2, #11
 8006b34:	d917      	bls.n	8006b66 <_malloc_r+0xc2>
 8006b36:	1961      	adds	r1, r4, r5
 8006b38:	42a3      	cmp	r3, r4
 8006b3a:	6025      	str	r5, [r4, #0]
 8006b3c:	bf18      	it	ne
 8006b3e:	6059      	strne	r1, [r3, #4]
 8006b40:	6863      	ldr	r3, [r4, #4]
 8006b42:	bf08      	it	eq
 8006b44:	f8c8 1000 	streq.w	r1, [r8]
 8006b48:	5162      	str	r2, [r4, r5]
 8006b4a:	604b      	str	r3, [r1, #4]
 8006b4c:	4630      	mov	r0, r6
 8006b4e:	f000 f82f 	bl	8006bb0 <__malloc_unlock>
 8006b52:	f104 000b 	add.w	r0, r4, #11
 8006b56:	1d23      	adds	r3, r4, #4
 8006b58:	f020 0007 	bic.w	r0, r0, #7
 8006b5c:	1ac2      	subs	r2, r0, r3
 8006b5e:	bf1c      	itt	ne
 8006b60:	1a1b      	subne	r3, r3, r0
 8006b62:	50a3      	strne	r3, [r4, r2]
 8006b64:	e7af      	b.n	8006ac6 <_malloc_r+0x22>
 8006b66:	6862      	ldr	r2, [r4, #4]
 8006b68:	42a3      	cmp	r3, r4
 8006b6a:	bf0c      	ite	eq
 8006b6c:	f8c8 2000 	streq.w	r2, [r8]
 8006b70:	605a      	strne	r2, [r3, #4]
 8006b72:	e7eb      	b.n	8006b4c <_malloc_r+0xa8>
 8006b74:	4623      	mov	r3, r4
 8006b76:	6864      	ldr	r4, [r4, #4]
 8006b78:	e7ae      	b.n	8006ad8 <_malloc_r+0x34>
 8006b7a:	463c      	mov	r4, r7
 8006b7c:	687f      	ldr	r7, [r7, #4]
 8006b7e:	e7b6      	b.n	8006aee <_malloc_r+0x4a>
 8006b80:	461a      	mov	r2, r3
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	42a3      	cmp	r3, r4
 8006b86:	d1fb      	bne.n	8006b80 <_malloc_r+0xdc>
 8006b88:	2300      	movs	r3, #0
 8006b8a:	6053      	str	r3, [r2, #4]
 8006b8c:	e7de      	b.n	8006b4c <_malloc_r+0xa8>
 8006b8e:	230c      	movs	r3, #12
 8006b90:	6033      	str	r3, [r6, #0]
 8006b92:	4630      	mov	r0, r6
 8006b94:	f000 f80c 	bl	8006bb0 <__malloc_unlock>
 8006b98:	e794      	b.n	8006ac4 <_malloc_r+0x20>
 8006b9a:	6005      	str	r5, [r0, #0]
 8006b9c:	e7d6      	b.n	8006b4c <_malloc_r+0xa8>
 8006b9e:	bf00      	nop
 8006ba0:	20004a50 	.word	0x20004a50

08006ba4 <__malloc_lock>:
 8006ba4:	4801      	ldr	r0, [pc, #4]	@ (8006bac <__malloc_lock+0x8>)
 8006ba6:	f000 b85b 	b.w	8006c60 <__retarget_lock_acquire_recursive>
 8006baa:	bf00      	nop
 8006bac:	20004b90 	.word	0x20004b90

08006bb0 <__malloc_unlock>:
 8006bb0:	4801      	ldr	r0, [pc, #4]	@ (8006bb8 <__malloc_unlock+0x8>)
 8006bb2:	f000 b856 	b.w	8006c62 <__retarget_lock_release_recursive>
 8006bb6:	bf00      	nop
 8006bb8:	20004b90 	.word	0x20004b90

08006bbc <memcmp>:
 8006bbc:	b510      	push	{r4, lr}
 8006bbe:	3901      	subs	r1, #1
 8006bc0:	4402      	add	r2, r0
 8006bc2:	4290      	cmp	r0, r2
 8006bc4:	d101      	bne.n	8006bca <memcmp+0xe>
 8006bc6:	2000      	movs	r0, #0
 8006bc8:	e005      	b.n	8006bd6 <memcmp+0x1a>
 8006bca:	7803      	ldrb	r3, [r0, #0]
 8006bcc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006bd0:	42a3      	cmp	r3, r4
 8006bd2:	d001      	beq.n	8006bd8 <memcmp+0x1c>
 8006bd4:	1b18      	subs	r0, r3, r4
 8006bd6:	bd10      	pop	{r4, pc}
 8006bd8:	3001      	adds	r0, #1
 8006bda:	e7f2      	b.n	8006bc2 <memcmp+0x6>

08006bdc <memset>:
 8006bdc:	4402      	add	r2, r0
 8006bde:	4603      	mov	r3, r0
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d100      	bne.n	8006be6 <memset+0xa>
 8006be4:	4770      	bx	lr
 8006be6:	f803 1b01 	strb.w	r1, [r3], #1
 8006bea:	e7f9      	b.n	8006be0 <memset+0x4>

08006bec <_sbrk_r>:
 8006bec:	b538      	push	{r3, r4, r5, lr}
 8006bee:	4d06      	ldr	r5, [pc, #24]	@ (8006c08 <_sbrk_r+0x1c>)
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	4604      	mov	r4, r0
 8006bf4:	4608      	mov	r0, r1
 8006bf6:	602b      	str	r3, [r5, #0]
 8006bf8:	f7fa fbe4 	bl	80013c4 <_sbrk>
 8006bfc:	1c43      	adds	r3, r0, #1
 8006bfe:	d102      	bne.n	8006c06 <_sbrk_r+0x1a>
 8006c00:	682b      	ldr	r3, [r5, #0]
 8006c02:	b103      	cbz	r3, 8006c06 <_sbrk_r+0x1a>
 8006c04:	6023      	str	r3, [r4, #0]
 8006c06:	bd38      	pop	{r3, r4, r5, pc}
 8006c08:	20004b8c 	.word	0x20004b8c

08006c0c <__errno>:
 8006c0c:	4b01      	ldr	r3, [pc, #4]	@ (8006c14 <__errno+0x8>)
 8006c0e:	6818      	ldr	r0, [r3, #0]
 8006c10:	4770      	bx	lr
 8006c12:	bf00      	nop
 8006c14:	20000010 	.word	0x20000010

08006c18 <__libc_init_array>:
 8006c18:	b570      	push	{r4, r5, r6, lr}
 8006c1a:	4d0d      	ldr	r5, [pc, #52]	@ (8006c50 <__libc_init_array+0x38>)
 8006c1c:	4c0d      	ldr	r4, [pc, #52]	@ (8006c54 <__libc_init_array+0x3c>)
 8006c1e:	1b64      	subs	r4, r4, r5
 8006c20:	10a4      	asrs	r4, r4, #2
 8006c22:	2600      	movs	r6, #0
 8006c24:	42a6      	cmp	r6, r4
 8006c26:	d109      	bne.n	8006c3c <__libc_init_array+0x24>
 8006c28:	4d0b      	ldr	r5, [pc, #44]	@ (8006c58 <__libc_init_array+0x40>)
 8006c2a:	4c0c      	ldr	r4, [pc, #48]	@ (8006c5c <__libc_init_array+0x44>)
 8006c2c:	f000 f872 	bl	8006d14 <_init>
 8006c30:	1b64      	subs	r4, r4, r5
 8006c32:	10a4      	asrs	r4, r4, #2
 8006c34:	2600      	movs	r6, #0
 8006c36:	42a6      	cmp	r6, r4
 8006c38:	d105      	bne.n	8006c46 <__libc_init_array+0x2e>
 8006c3a:	bd70      	pop	{r4, r5, r6, pc}
 8006c3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c40:	4798      	blx	r3
 8006c42:	3601      	adds	r6, #1
 8006c44:	e7ee      	b.n	8006c24 <__libc_init_array+0xc>
 8006c46:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c4a:	4798      	blx	r3
 8006c4c:	3601      	adds	r6, #1
 8006c4e:	e7f2      	b.n	8006c36 <__libc_init_array+0x1e>
 8006c50:	08006ea0 	.word	0x08006ea0
 8006c54:	08006ea0 	.word	0x08006ea0
 8006c58:	08006ea0 	.word	0x08006ea0
 8006c5c:	08006ea4 	.word	0x08006ea4

08006c60 <__retarget_lock_acquire_recursive>:
 8006c60:	4770      	bx	lr

08006c62 <__retarget_lock_release_recursive>:
 8006c62:	4770      	bx	lr

08006c64 <memcpy>:
 8006c64:	440a      	add	r2, r1
 8006c66:	4291      	cmp	r1, r2
 8006c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c6c:	d100      	bne.n	8006c70 <memcpy+0xc>
 8006c6e:	4770      	bx	lr
 8006c70:	b510      	push	{r4, lr}
 8006c72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c7a:	4291      	cmp	r1, r2
 8006c7c:	d1f9      	bne.n	8006c72 <memcpy+0xe>
 8006c7e:	bd10      	pop	{r4, pc}

08006c80 <_free_r>:
 8006c80:	b538      	push	{r3, r4, r5, lr}
 8006c82:	4605      	mov	r5, r0
 8006c84:	2900      	cmp	r1, #0
 8006c86:	d041      	beq.n	8006d0c <_free_r+0x8c>
 8006c88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c8c:	1f0c      	subs	r4, r1, #4
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	bfb8      	it	lt
 8006c92:	18e4      	addlt	r4, r4, r3
 8006c94:	f7ff ff86 	bl	8006ba4 <__malloc_lock>
 8006c98:	4a1d      	ldr	r2, [pc, #116]	@ (8006d10 <_free_r+0x90>)
 8006c9a:	6813      	ldr	r3, [r2, #0]
 8006c9c:	b933      	cbnz	r3, 8006cac <_free_r+0x2c>
 8006c9e:	6063      	str	r3, [r4, #4]
 8006ca0:	6014      	str	r4, [r2, #0]
 8006ca2:	4628      	mov	r0, r5
 8006ca4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ca8:	f7ff bf82 	b.w	8006bb0 <__malloc_unlock>
 8006cac:	42a3      	cmp	r3, r4
 8006cae:	d908      	bls.n	8006cc2 <_free_r+0x42>
 8006cb0:	6820      	ldr	r0, [r4, #0]
 8006cb2:	1821      	adds	r1, r4, r0
 8006cb4:	428b      	cmp	r3, r1
 8006cb6:	bf01      	itttt	eq
 8006cb8:	6819      	ldreq	r1, [r3, #0]
 8006cba:	685b      	ldreq	r3, [r3, #4]
 8006cbc:	1809      	addeq	r1, r1, r0
 8006cbe:	6021      	streq	r1, [r4, #0]
 8006cc0:	e7ed      	b.n	8006c9e <_free_r+0x1e>
 8006cc2:	461a      	mov	r2, r3
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	b10b      	cbz	r3, 8006ccc <_free_r+0x4c>
 8006cc8:	42a3      	cmp	r3, r4
 8006cca:	d9fa      	bls.n	8006cc2 <_free_r+0x42>
 8006ccc:	6811      	ldr	r1, [r2, #0]
 8006cce:	1850      	adds	r0, r2, r1
 8006cd0:	42a0      	cmp	r0, r4
 8006cd2:	d10b      	bne.n	8006cec <_free_r+0x6c>
 8006cd4:	6820      	ldr	r0, [r4, #0]
 8006cd6:	4401      	add	r1, r0
 8006cd8:	1850      	adds	r0, r2, r1
 8006cda:	4283      	cmp	r3, r0
 8006cdc:	6011      	str	r1, [r2, #0]
 8006cde:	d1e0      	bne.n	8006ca2 <_free_r+0x22>
 8006ce0:	6818      	ldr	r0, [r3, #0]
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	6053      	str	r3, [r2, #4]
 8006ce6:	4408      	add	r0, r1
 8006ce8:	6010      	str	r0, [r2, #0]
 8006cea:	e7da      	b.n	8006ca2 <_free_r+0x22>
 8006cec:	d902      	bls.n	8006cf4 <_free_r+0x74>
 8006cee:	230c      	movs	r3, #12
 8006cf0:	602b      	str	r3, [r5, #0]
 8006cf2:	e7d6      	b.n	8006ca2 <_free_r+0x22>
 8006cf4:	6820      	ldr	r0, [r4, #0]
 8006cf6:	1821      	adds	r1, r4, r0
 8006cf8:	428b      	cmp	r3, r1
 8006cfa:	bf04      	itt	eq
 8006cfc:	6819      	ldreq	r1, [r3, #0]
 8006cfe:	685b      	ldreq	r3, [r3, #4]
 8006d00:	6063      	str	r3, [r4, #4]
 8006d02:	bf04      	itt	eq
 8006d04:	1809      	addeq	r1, r1, r0
 8006d06:	6021      	streq	r1, [r4, #0]
 8006d08:	6054      	str	r4, [r2, #4]
 8006d0a:	e7ca      	b.n	8006ca2 <_free_r+0x22>
 8006d0c:	bd38      	pop	{r3, r4, r5, pc}
 8006d0e:	bf00      	nop
 8006d10:	20004a50 	.word	0x20004a50

08006d14 <_init>:
 8006d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d16:	bf00      	nop
 8006d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d1a:	bc08      	pop	{r3}
 8006d1c:	469e      	mov	lr, r3
 8006d1e:	4770      	bx	lr

08006d20 <_fini>:
 8006d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d22:	bf00      	nop
 8006d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d26:	bc08      	pop	{r3}
 8006d28:	469e      	mov	lr, r3
 8006d2a:	4770      	bx	lr
